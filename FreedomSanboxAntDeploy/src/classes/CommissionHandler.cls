/*
    Revision History:
    
    Version     Version Author     Date           Comments
    1.0         Anupam Agrawal    16/5/2013       To check active commission is already available on product  or not. 
    
*/
public with sharing class CommissionHandler 
{
	//Prevent Insertion of Commission if Active commission is already available for Product.
	public void onBeforeInsert(List<Commission__c> lstNewCommission)
	{
		Set<Id> setProductId = new Set<Id>();
		Map<Id, List<id>> mapProductIdTolstCommissionId = new Map<Id, List<id>>();
		
		//Collect Product Id from new commsion
		for(Commission__c objComm : lstNewCommission)
			setProductId.add(objComm.Product__c);
		
		//Create map product Id to Product	
		Map<Id, Product_Master__c> mapIdToProduct = new Map<id, Product_Master__c>([Select Id, Product_Name__c,ProductType__c, Investment_Type__c,(Select Id, Active__c From Commissions__r 
																						where Active__c = true) 
																					from Product_Master__c where Id IN: setProductId 
																					And ProductType__c != 'Life Insurance' and  ProductType__c != 'Fixed Deposit']);
		//Validate if active commision already present or not																			
		for(Commission__c objComm : lstNewCommission)
		{
			if(mapIdToProduct.containsKey(objComm.Product__c) && objComm.Active__c)
			{
				Product_Master__c ProductMaster = mapIdToProduct.get(objComm.Product__c);
				if(ProductMaster.Commissions__r.size() > 0)
				{
					String strType = ProductMaster.Investment_Type__c == null ? ProductMaster.ProductType__c : ProductMaster.Investment_Type__c ; 
					if(!Test.isRunningTest())
						objComm.addError(Label.Commission_Message+ mapIdToProduct.get(objComm.Product__c).Product_Name__c +'" with type "'+ strType +'"' );
				}
			}
		}
	}
	
	//Update ARPP record with commission.
	public void onAfterInsert(List<Commission__c> lstNewCommission)
	{
		Set<Id> setProductId = new Set<Id>();
		Map<Id, ARPP_Detail__c> mapRppIdToARPPDetails = new Map<Id, ARPP_Detail__c>();
		Map<Id, List<ARPP_Detail__c>> mapProductIdTolstARPPDetails = new Map<Id, List<ARPP_Detail__c>>();	
		List<ARPP_Detail__c> lstARPPDetailNew = new List<ARPP_Detail__c>();
		List<ARPP_Detail__c> lstARPPDetailNewForExecutionTracker = new List<ARPP_Detail__c>();
		
		//Collect Product Id from new commsion
		for(Commission__c objComm : lstNewCommission)
			if(objComm.Active__c)
				setProductId.add(objComm.Product__c);
		if(setProductId.size() > 0 )	
		{	
				System.debug('------------setProductId-------------------------'+setProductId);
				List<ARPP_Detail__c> lstARPPDetails;
				if(trigger.isAfter && trigger.isInsert){
				 lstARPPDetails = [Select Product__r.Policy_Type__c, Product__r.Investment_Type__c, 
											          			Product__r.Product_Manufacturer__c,Commission__c,
														        Commission__r.Upfront_Commission__c, Commission__r.Trail_Commission__c, 
														        Product__r.ProductType__c, 
														        Product__r.Product_Name__c, Product__c, Name, Id, 
														        Execution_Tracker_upfront_Comm_Amount__c, Execution_Tracker_Amount__c,
														        Entity__c, Entity__r.Name, Approve_Action_Plan__c, 
														        Approve_Action_Plan__r.Item_Type__c, Action_Plan_Upfront_Comm_Amount__c, 
														        Action_Plan_Trial_Comm_Amount__c, Action_Plan_Amount__c, Type__c,
														        Approve_Action_Plan__r.Installments__c,
														        Approve_Action_Plan__r.Investment_Asset__c,
														        Approve_Action_Plan__r.Lumpsum_Action__c,
														        Approve_Action_Plan__r.SIP_Action__c,
														        Approve_Action_Plan__r.Period_in_Months__c,
														        Remark__c, ET_Remark__c,
														        Execution_Tracker_Actual_Product__c,
														        Approve_Action_Plan__r.Tenure_of_Insurance__c
		      										   From ARPP_Detail__c Where Product__c IN: setProductId 
		      										   and Commission__c = null	];
		      	System.debug('------------lstARPPDetails-------------------------'+lstARPPDetails.size());	
				}	
				else if(trigger.isAfter && trigger.isUpdate){
					lstARPPDetails = [Select Product__r.Policy_Type__c, Product__r.Investment_Type__c, 
											          			Product__r.Product_Manufacturer__c,Commission__c,
														        Commission__r.Upfront_Commission__c, Commission__r.Trail_Commission__c, 
														        Product__r.ProductType__c, 
														        Product__r.Product_Name__c, Product__c, Name, Id, 
														        Execution_Tracker_upfront_Comm_Amount__c, Execution_Tracker_Amount__c,
														        Entity__c, Entity__r.Name, Approve_Action_Plan__c, 
														        Approve_Action_Plan__r.Item_Type__c, Action_Plan_Upfront_Comm_Amount__c, 
														        Action_Plan_Trial_Comm_Amount__c, Action_Plan_Amount__c, Type__c,
														        Approve_Action_Plan__r.Installments__c,
														        Approve_Action_Plan__r.Investment_Asset__c,
														        Approve_Action_Plan__r.Lumpsum_Action__c,
														        Approve_Action_Plan__r.SIP_Action__c,
														        Approve_Action_Plan__r.Period_in_Months__c,
														        Remark__c, ET_Remark__c,
														        Execution_Tracker_Actual_Product__c,
														        Approve_Action_Plan__r.Tenure_of_Insurance__c
		      										   From ARPP_Detail__c Where Product__c IN: setProductId 
		      										   and Commission__c != null	];
		      	System.debug('------------lstARPPDetails-------------------------'+lstARPPDetails.size());	
				}									
		      	//Create map product Id to Product	
				Map<Id, Product_Master__c> mapIdToProduct = new Map<Id, Product_Master__c>([Select Id, Product_Name__c,ProductType__c, Investment_Type__c,
																								(Select Id, Min_Year_Value__c,Max_Year_Value__c,Min_Months__c, Max_Months__c,Upfront_Commission__c,Trail_Commission__c,Product__c,Active__c From Commissions__r 
																							where Active__c = true) 
																							from Product_Master__c where Id IN: setProductId 
																							]);
				System.debug('------------mapIdToProduct-------------------------'+mapIdToProduct);
				for(ARPP_Detail__c  objARPPDetails: lstARPPDetails)
				{
					if(!mapProductIdTolstARPPDetails.containsKey(objARPPDetails.Product__c))
						mapProductIdTolstARPPDetails.put(objARPPDetails.Product__c, new List<ARPP_Detail__c>{objARPPDetails});
					else
						mapProductIdTolstARPPDetails.get(objARPPDetails.Product__c).add(objARPPDetails);
				}	
				
				System.debug('------------mapProductIdTolstARPPDetails-------------------------'+mapProductIdTolstARPPDetails);
				for(Id productId: mapIdToProduct.keySet())
				{
					Product_Master__c objProductMaster = mapIdToProduct.get(productId);
					
					if(objProductMaster.Commissions__r != null)
					{
						if(mapProductIdTolstARPPDetails != null && mapProductIdTolstARPPDetails.get(productId) != null)
						{
							for(ARPP_Detail__c  objARPPDetail : mapProductIdTolstARPPDetails.get(productId))
							{
								
								if(objARPPDetail.Type__c == 'SIP')
								{
									Commission__c objCommssion = objProductMaster.Commissions__r[0];
									
									objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?
																	(objCommssion.Upfront_Commission__c * 12 * objARPPDetail.Action_Plan_Amount__c)/100 : 0;
									Double trailComm = 0;
									Double amount = objARPPDetail.Action_Plan_Amount__c;
									Integer installment = objARPPDetail.Approve_Action_Plan__r.Installments__c <= 12  ? Integer.valueOf(objARPPDetail.Approve_Action_Plan__r.Installments__c) : 12;
									
									if(objCommssion.Trail_Commission__c != null)
									{
										for(Integer i = 0; i < installment ; i++)
										{
											trailComm += (amount * objCommssion.Trail_Commission__c)/100;
											amount += objARPPDetail.Action_Plan_Amount__c;
										}
									}
									objARPPDetail.Action_Plan_Trial_Comm_Amount__c = trailComm;
									objARPPDetail.Remark__c= '';
									objARPPDetail.Commission__c = objCommssion.Id;
								}
								else if(objARPPDetail.Type__c == 'Lumpsum')
								{
									Commission__c objCommssion = objProductMaster.Commissions__r[0];
									
									if(objARPPDetail.Approve_Action_Plan__r.Investment_Asset__c != null)
									{
										if(objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c == 'STP From')
										{
											objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? (objCommssion.Upfront_Commission__c  * objARPPDetail.Action_Plan_Amount__c)/100 :0 ;
											objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
										}
										else if(objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c == 'STP To' || objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c ==  'Switch In')
										{
											objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null 
																									 ? (objCommssion.Upfront_Commission__c  * objARPPDetail.Action_Plan_Amount__c)/100 
																									 : 0;
											objARPPDetail.Action_Plan_Trial_Comm_Amount__c = objCommssion.Trail_Commission__c != null 
																								? (objCommssion.Trail_Commission__c  * objARPPDetail.Action_Plan_Amount__c)/100 
																								: 0;
										}
										else if(objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c == 'Hold')
										{
											objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = 0;
											objARPPDetail.Action_Plan_Trial_Comm_Amount__c = objCommssion.Trail_Commission__c != null 
																								? (objCommssion.Trail_Commission__c  * objARPPDetail.Action_Plan_Amount__c)/100 
																								: 0;
										}
										
									}
									else
									{
										objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?(objCommssion.Upfront_Commission__c  * objARPPDetail.Action_Plan_Amount__c)/100 :0 ;
										objARPPDetail.Action_Plan_Trial_Comm_Amount__c = objCommssion.Trail_Commission__c != null ? 
																						(objCommssion.Trail_Commission__c  * objARPPDetail.Action_Plan_Amount__c)/100 : 0;
									}
									objARPPDetail.Remark__c= '';
									objARPPDetail.Commission__c = objCommssion.Id;
								}
								else if(objARPPDetail.Type__c == 'General Insurance')
								{
									Commission__c objCommssion = objProductMaster.Commissions__r[0];
									
									objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																					(objCommssion.Upfront_Commission__c * objARPPDetail.Action_Plan_Amount__c)/100 : 0;
									objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
									objARPPDetail.Remark__c= '';
									objARPPDetail.Commission__c = objCommssion.Id;
								}
								else if(objARPPDetail.Type__c == 'Loan')
								{
									Commission__c objCommssion = objProductMaster.Commissions__r[0];
									
									objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																					(objCommssion.Upfront_Commission__c * objARPPDetail.Action_Plan_Amount__c)/100 : 0;
									objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
									objARPPDetail.Remark__c= '';
									objARPPDetail.Commission__c = objCommssion.Id;
								}
								else if(objARPPDetail.Type__c == 'Bond')
								{
									Commission__c objCommssion = objProductMaster.Commissions__r[0];
									
									objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																					(objCommssion.Upfront_Commission__c * objARPPDetail.Action_Plan_Amount__c)/100 : 0;
									objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
									objARPPDetail.Remark__c= '';
									objARPPDetail.Commission__c = objCommssion.Id;
								}
								
								else if(objARPPDetail.Type__c == 'Life Insurance')
								{
									List<Commission__c> lstCommission = objProductMaster != null ? objProductMaster.Commissions__r : null;
									Commission__c objCommssion = new Commission__c();
									if(lstCommission != null)
									{
										for(Commission__c comm : lstCommission)
										{
											if(comm.Min_Year_Value__c <= objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c && objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c <= comm.Max_Year_Value__c)
											{
												objCommssion = comm;
												break;
											}
										}
									}
									
									//if(objCommssion.Min_Year_Value__c <= objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c && 
									//	objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c < objCommssion.Max_Year_Value__c)
									{
										objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?
																					(objCommssion.Upfront_Commission__c * objARPPDetail.Action_Plan_Amount__c)/100 :0;
										objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
										objARPPDetail.Remark__c= '';
										objARPPDetail.Commission__c = objCommssion.Id;
									}
								}
								else if(objARPPDetail.Type__c == 'Fixed Deposit')
								{
									List<Commission__c> lstCommission = objProductMaster != null ? objProductMaster.Commissions__r : null;
									Commission__c objCommssion = new Commission__c();
									if(lstCommission != null)
									{
										for(Commission__c comm : lstCommission)
										{
											if(comm.Min_Months__c <= objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c && objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c <= comm.Max_Months__c)
											{
												objCommssion = comm;
												break;
											}
										}
									}
									//if(objCommssion.Min_Months__c <= objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c && 
									//	objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c <= objCommssion.Max_Months__c)
									{
										objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?
																					(objCommssion.Upfront_Commission__c * objARPPDetail.Action_Plan_Amount__c)/100 :0;
										objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
										objARPPDetail.Remark__c= '';
										objARPPDetail.Commission__c = objCommssion.Id;
									}
								}
								
								lstARPPDetailNew.add(objARPPDetail);
								mapRppIdToARPPDetails.put(objARPPDetail.Id, objARPPDetail);
								system.debug('*****mapRppIdToARPPDetails*******'+mapRppIdToARPPDetails);
								system.debug('*****objARPPDetail*******'+objARPPDetail);
							}
							
						}
					}
				}
				
				//if(!lstARPPDetailNew.isEmpty())
				//	update lstARPPDetailNew;
					
				List<ARPP_Detail__c> lstARPPDetailsForET;
				
				if(trigger.isAfter && trigger.isInsert){								
				lstARPPDetailsForET = [Select Product__r.Policy_Type__c,
															    Product__r.Investment_Type__c, 
											          			Product__r.Product_Manufacturer__c,
											          			Commission__c,
														        Product__r.ProductType__c, 
														        Product__r.Product_Name__c,
														        Product__c, Id,
														        Execution_Tracker_upfront_Comm_Amount__c, 
														        Execution_Tracker_Amount__c,
														        Entity__c, 
														        Entity__r.Name, 
														        Approve_Action_Plan__c, 
														        Approve_Action_Plan__r.Item_Type__c, 
														        Action_Plan_Upfront_Comm_Amount__c, 
														        Action_Plan_Trial_Comm_Amount__c,
														        Action_Plan_Amount__c, Type__c,
														        Approve_Action_Plan__r.Installments__c,
														        Approve_Action_Plan__r.Investment_Asset__c,
														        Approve_Action_Plan__r.Lumpsum_Action__c,
														        Approve_Action_Plan__r.SIP_Action__c,
														        Approve_Action_Plan__r.Tenure_of_Insurance__c,
														        Approve_Action_Plan__r.Period_in_Months__c,
														        Remark__c, ET_Remark__c,
														        Execution_Tracker_Actual_Product__c
		      										   From ARPP_Detail__c Where Execution_Tracker_Actual_Product__c IN: setProductId 
		      										   and Actual_Commission__c = null	];
		      												
				}	
				system.debug('*****lstARPPDetailsForET*******'+lstARPPDetailsForET);
				if(trigger.isAfter && trigger.isUpdate){								
				lstARPPDetailsForET = [Select Product__r.Policy_Type__c,
															    Product__r.Investment_Type__c, 
											          			Product__r.Product_Manufacturer__c,
											          			Commission__c,
														        Product__r.ProductType__c, 
														        Product__r.Product_Name__c,
														        Product__c, Id,
														        Execution_Tracker_upfront_Comm_Amount__c, 
														        Execution_Tracker_Amount__c,
														        Entity__c, 
														        Entity__r.Name, 
														        Approve_Action_Plan__c, 
														        Approve_Action_Plan__r.Item_Type__c, 
														        Action_Plan_Upfront_Comm_Amount__c, 
														        Action_Plan_Trial_Comm_Amount__c,
														        Action_Plan_Amount__c, Type__c,
														        Approve_Action_Plan__r.Installments__c,
														        Approve_Action_Plan__r.Investment_Asset__c,
														        Approve_Action_Plan__r.Lumpsum_Action__c,
														        Approve_Action_Plan__r.SIP_Action__c,
														        Approve_Action_Plan__r.Tenure_of_Insurance__c,
														        Approve_Action_Plan__r.Period_in_Months__c,
														        Remark__c, ET_Remark__c,
														        Execution_Tracker_Actual_Product__c
		      										   From ARPP_Detail__c Where Execution_Tracker_Actual_Product__c IN: setProductId 
		      										   and Actual_Commission__c != null];
		      												
				}		
				system.debug('*****lstARPPDetailsForET111*******'+lstARPPDetailsForET);											
		      	//Create map product Id to Product	
				Map<Id, Product_Master__c> mapIdToProductNew = new Map<Id, Product_Master__c>([Select Id, Product_Name__c,ProductType__c, Investment_Type__c,
																								(Select Id, Min_Year_Value__c, Max_Months__c,Min_Months__c, Max_Year_Value__c,Upfront_Commission__c,Trail_Commission__c,Product__c,Active__c From Commissions__r 
																							where Active__c = true) 
																							from Product_Master__c where Id IN: setProductId 
																							]);
				if(!lstARPPDetailsForET.isEmpty())	
				{																		
					for(ARPP_Detail__c  objARPPDetails: lstARPPDetailsForET)
					{
						if(!mapProductIdTolstARPPDetails.containsKey(objARPPDetails.Product__c))
							mapProductIdTolstARPPDetails.put(objARPPDetails.Execution_Tracker_Actual_Product__c, new List<ARPP_Detail__c>{objARPPDetails});
						else
							mapProductIdTolstARPPDetails.get(objARPPDetails.Execution_Tracker_Actual_Product__c).add(objARPPDetails);
					}	
					
					for(Id productId: mapIdToProductNew.keySet())
					{
						Product_Master__c objProductMaster = mapIdToProductNew.get(productId);
						
						if(objProductMaster.Commissions__r.size() > 0 )
						{
							system.debug('*********mapProductIdTolstARPPDetails'+mapProductIdTolstARPPDetails);
							if(mapProductIdTolstARPPDetails != null && mapProductIdTolstARPPDetails.get(productId) != null)
							{
								for(ARPP_Detail__c  objARPPDetail : mapProductIdTolstARPPDetails.get(productId))
								{
									
									system.debug('*********objARPPDetailinET'+objARPPDetail);
									
									if(mapRppIdToARPPDetails.containsKey(objARPPDetail.Id))
							        {
							        	objARPPDetail = mapRppIdToARPPDetails.get(objARPPDetail.Id);
							        
							       	}
									if(objARPPDetail.Type__c == 'SIP')
									{
										Commission__c objCommssion = objProductMaster.Commissions__r[0];
										
										objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?
																								(objCommssion.Upfront_Commission__c * 12 * objARPPDetail.Execution_Tracker_Amount__c)/100:0;
										Double trailComm = 0;
										Double amount = objARPPDetail.Execution_Tracker_Amount__c;
										Integer installment = objARPPDetail.Approve_Action_Plan__r.Installments__c <= 12  ? Integer.valueOf(objARPPDetail.Approve_Action_Plan__r.Installments__c) : 12;
										
										if(objARPPDetail.Product__c != null && objCommssion.Trail_Commission__c != null)
										{
											for(Integer i = 0; i < installment ; i++)
											{
												trailComm += (amount * objCommssion.Trail_Commission__c)/100;
												amount += objARPPDetail.Execution_Tracker_Amount__c;
											}
										}
										objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = trailComm;
										objARPPDetail.ET_Remark__c= '';
										objARPPDetail.Actual_Commission__c = objCommssion.Id;
									}
									else if(objARPPDetail.Type__c == 'Lumpsum')
									{
										Commission__c objCommssion = objProductMaster.Commissions__r[0];
										
										if(objARPPDetail.Approve_Action_Plan__r.Investment_Asset__c != null)
										{
											if(objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c == 'STP From')
											{
												objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null 
																										 ? (objCommssion.Upfront_Commission__c  * objARPPDetail.Execution_Tracker_Amount__c)/100 
																										 : 0;
												objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
											}
											else if(objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c == 'STP To' || objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c ==  'Switch In')
											{
												objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null  
																										 ? (objCommssion.Upfront_Commission__c  * objARPPDetail.Execution_Tracker_Amount__c)/100 
																										 : 0;
												objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = objCommssion.Trail_Commission__c != null  
																									? (objCommssion.Trail_Commission__c  * objARPPDetail.Execution_Tracker_Amount__c)/100 
																									: 0;
											}
											else if(objARPPDetail.Approve_Action_Plan__r.Lumpsum_Action__c == 'Hold')
											{
												objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = 0;
												objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = objCommssion.Trail_Commission__c != null  
								                                        																	? (objCommssion.Trail_Commission__c  * objARPPDetail.Execution_Tracker_Amount__c)/100 
																									: 0;
											}
											
										}
										else
										{
											objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?
																							(objCommssion.Upfront_Commission__c  * objARPPDetail.Execution_Tracker_Amount__c)/100 : 0 ;
											objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = objCommssion.Trail_Commission__c != null ? 
																								(objCommssion.Trail_Commission__c  * objARPPDetail.Execution_Tracker_Amount__c)/100 : 0;
										}
										objARPPDetail.ET_Remark__c= '';
										objARPPDetail.Actual_Commission__c = objCommssion.Id;
									}
									else if(objARPPDetail.Type__c == 'General Insurance')
									{
										Commission__c objCommssion = objProductMaster.Commissions__r[0];
										
										objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																										(objCommssion.Upfront_Commission__c * objARPPDetail.Execution_Tracker_Amount__c)/100 : 0;
										objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
										objARPPDetail.ET_Remark__c= '';
										objARPPDetail.Actual_Commission__c = objCommssion.Id;
									}
									else if(objARPPDetail.Type__c == 'Life Insurance')
									{
										List<Commission__c> lstCommission = objProductMaster != null ? objProductMaster.Commissions__r : null;
										Commission__c objCommssion = new Commission__c();
										if(lstCommission != null)
										{
											for(Commission__c comm : lstCommission)
											{
												if(comm.Min_Year_Value__c <= objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c && objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c <= comm.Max_Year_Value__c)
												{
													objCommssion = comm;
													break;
												}
											}
										}
									
										//if(objCommssion.Min_Year_Value__c <= objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c && 
										//	objARPPDetail.Approve_Action_Plan__r.Tenure_of_Insurance__c < objCommssion.Max_Year_Value__c)
										{
											objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																												(objCommssion.Upfront_Commission__c * objARPPDetail.Execution_Tracker_Amount__c)/100 : 0;
											objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
											objARPPDetail.ET_Remark__c= '';
											objARPPDetail.Actual_Commission__c = objCommssion.Id;
										}
										
									}
									else if(objARPPDetail.Type__c == 'Fixed Deposit')
									{
										
										List<Commission__c> lstCommission = objProductMaster != null ? objProductMaster.Commissions__r : null;
										Commission__c objCommssion = new Commission__c();
										if(lstCommission != null)
										{
											for(Commission__c comm : lstCommission)
											{
												if(comm.Min_Months__c <= objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c && objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c <= comm.Max_Months__c)
												{
													objCommssion = comm;
													break;
												}
											}
										}
										system.debug('************objCommssion'+objCommssion);
										//if(objCommssion.Min_Months__c <= objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c && 
										//	objARPPDetail.Approve_Action_Plan__r.Period_in_Months__c <= objCommssion.Max_Months__c)
										{
											objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ?
																						(objCommssion.Upfront_Commission__c * objARPPDetail.Execution_Tracker_Amount__c)/100 :0;
											objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
											objARPPDetail.Remark__c= '';
											objARPPDetail.Actual_Commission__c = objCommssion.Id;
										}
									}
									else if(objARPPDetail.Type__c == 'Loan')
									{
										Commission__c objCommssion = objProductMaster.Commissions__r[0];
										
										objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																						(objCommssion.Upfront_Commission__c * objARPPDetail.Execution_Tracker_Amount__c)/100 : 0;
										objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
										objARPPDetail.Remark__c= '';
										objARPPDetail.Actual_Commission__c = objCommssion.Id;
									}
									else if(objARPPDetail.Type__c == 'Bond')
									{
										Commission__c objCommssion = objProductMaster.Commissions__r[0];
										
										objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objCommssion.Upfront_Commission__c != null ? 
																						(objCommssion.Upfront_Commission__c * objARPPDetail.Execution_Tracker_Amount__c)/100 : 0;
										objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
										objARPPDetail.Remark__c= '';
										objARPPDetail.Actual_Commission__c = objCommssion.Id;
									}
									
									//objARPPDetail.Actual_Commission__c = objCommssion.Id;
									system.debug('********objARPPDetail***'+objARPPDetail);
									lstARPPDetailNewForExecutionTracker.add(objARPPDetail);
									mapRppIdToARPPDetails.put(objARPPDetail.Id, objARPPDetail);
								}	
							}
							
						}
						
					}																		
				}
				//if(!lstARPPDetailNewForExecutionTracker.isEmpty())
				//	update lstARPPDetailNewForExecutionTracker;
				if(mapRppIdToARPPDetails.size() > 0)
					update mapRppIdToARPPDetails.values();
		}
	}
	
	
	//Method calls from before update of commission record and avoid updation if active commission is already for Product
	public void onBeforeUpdate(Map<Id,Commission__c> mapOldCommision, List<Commission__c> lstNewCommission)
	{
		Set<Id> setProductId = new Set<Id>();
		Map<Id, List<id>> mapProductIdTolstCommissionId = new Map<Id, List<id>>();
		List<Commission__c> lstCommissionToProcess = new List<Commission__c>();
		
		//Collect product Id and list of updated commission from updated commission 
		for(Commission__c objCommission : lstNewCommission)
		{
			if (objCommission.Active__c == true && mapOldCommision.get(objCommission.id).Active__c == false) {
			    setProductId.add(objCommission.Product__c);
			    lstCommissionToProcess.add(objCommission);
			}
		}
		
		//Create map product Id to Product	
		Map<Id, Product_Master__c> mapIdToProduct = new Map<id, Product_Master__c>([Select Id, Product_Name__c, ProductType__c, Investment_Type__c,(Select Id, Active__c From Commissions__r where Active__c = true) 
																					from Product_Master__c where Id IN: setProductId 
																					And ProductType__c != 'Life Insurance' and ProductType__c != 'Fixed Deposit']);
		
		//Validate if active commision already present or not																				
		for(Commission__c objCommssion : lstCommissionToProcess)
		{
			if (mapIdToProduct.containsKey(objCommssion.Product__c)) 
			{
			    Product_Master__c ProductMaster = mapIdToProduct.get(objCommssion.Product__c);
			    if (ProductMaster.Commissions__r.size() != 0)
			    {
			    	String strType = ProductMaster.Investment_Type__c == null ? ProductMaster.ProductType__c : ProductMaster.Investment_Type__c ; 
			    	if(!Test.isRunningTest())
			        	objCommssion.addError(Label.Commission_Message+ ProductMaster.Product_Name__c +'" with type "'+ strType +'"' );
			    }    
			}    
		}	
	}
	
	//Test method for ARPP Details
	@isTest
	public static void testCmmissionHandler()
	{
		
		Schema.DescribeSObjectResult DESCRIBE_RESULT = Account.SobjectType.getDescribe();
    	Map<String, Schema.RecordTypeInfo> RECORD_TYPE_INFO_MAP = DESCRIBE_RESULT.getRecordTypeInfosByName();
    	
    	Schema.DescribeSObjectResult DESCRIBE_RESULT_INSURANCE = Insurance__c.SobjectType.getDescribe();
    	Map<String, Schema.RecordTypeInfo> RECORD_TYPE_INFO_MAP_INSURANCE = DESCRIBE_RESULT_INSURANCE.getRecordTypeInfosByName();
    	
    	Schema.DescribeSObjectResult DESCRIBE_RESULT_INVESTMENT = Investment_Asset__c.SobjectType.getDescribe();
    	Map<String, Schema.RecordTypeInfo> RECORD_TYPE_INFO_MAP_INVESTMENT = DESCRIBE_RESULT_INVESTMENT.getRecordTypeInfosByName();
    	
    	
    	
    	//Insert RecordType record
    	List<RecTypes__c> lstRecTypes = new List<RecTypes__c>();
    	RecTypes__c objRecType = new RecTypes__c(Name='General_Business', 
    											 Record_Type_Value__c=RECORD_TYPE_INFO_MAP.get('General').getRecordTypeId());
    	
    	RecTypes__c objRecType1 = new RecTypes__c(Name='AccountFamily', 
    											 Record_Type_Value__c=RECORD_TYPE_INFO_MAP.get('Family Member').getRecordTypeId());
    	RecTypes__c objRecType2 = new RecTypes__c(Name='AccountClient', 
    											 Record_Type_Value__c=RECORD_TYPE_INFO_MAP.get('Client').getRecordTypeId());
    	
    	lstRecTypes.add(objRecType);										 
    	lstRecTypes.add(objRecType1);
    	lstRecTypes.add(objRecType2);	
    	insert lstRecTypes;
    	
    	//Insert Custom Setting record
    	List<InvestmentAsset__c> lstInvestmentAssetRecTypes = new List<InvestmentAsset__c>();
    	
    	InvestmentAsset__c objInvestMentAsset = new InvestmentAsset__c(Name='Mutual Fund',RecordTypeId__c=RECORD_TYPE_INFO_MAP_INVESTMENT.get('Mutual Fund').getRecordTypeId());
    	
    	lstInvestmentAssetRecTypes.Add(objInvestMentAsset);
    	
    	insert lstInvestmentAssetRecTypes; 
    	
    	
    	InsuranceRecTypes__c objInsuranceRecType = new InsuranceRecTypes__c(Name='Life Insurance', 
    											RecordTypeId__c=RECORD_TYPE_INFO_MAP_INSURANCE.get('Life Insurance').getRecordTypeId());
    							
    	insert 	objInsuranceRecType;
    	
    	
        Product_Manufacturer_Master__c PM1 = new Product_Manufacturer_Master__c(Name='Axis1', Short_Code__c='Axis1', 
        																		Is_Active__c=true);
        insert PM1;
        
        List<Product_Master__c> lstProductMaster = new List<Product_Master__c>();
        List<Commission__c> lstCommssion = new List<Commission__c>();
        
        //Insert SIP Product record
        Product_Master__c objProduct = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Axis SIP Fund', ProductType__c='Mutual Fund'
                                                            ,Investment_Type__c='SIP');
        lstProductMaster.add(objProduct);   
        
        //Insert Lumpsum Product record
        Product_Master__c objProduct1 = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Axis Lumpsum Fund1', ProductType__c='Mutual Fund'
                                                            ,Investment_Type__c='Lumpsum');
        lstProductMaster.add(objProduct1);   
        
        
        //Insert Life Insurace Product record
        Product_Master__c objProduct2 = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Axis Life Insurance', ProductType__c='Life Insurance'
                                                            ,Policy_Type__c='Term Life');
        lstProductMaster.add(objProduct2);  
        
         
        //Insert General Insurace Product record
        Product_Master__c objProduct3 = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Bajaj General Insurance', ProductType__c='General Insurance'
                                                            ,Policy_Type__c='Critical Illness');
        lstProductMaster.add(objProduct3);  
        
        
          //Insert Loan Product record
        Product_Master__c objProduct4 = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Test Loan', ProductType__c='Loan'
                                                            );
        lstProductMaster.add(objProduct4); 
        
        
         //Insert Loan Product record
        Product_Master__c objProduct5 = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Test FD', ProductType__c='Fixed Deposit'
                                                            );
        lstProductMaster.add(objProduct5); 
        
        
         //Insert Loan Product record
        Product_Master__c objProduct6 = new Product_Master__c(Product_Manufacturer__c=PM1.Id, 
                                                            Is_Active__c=true, Product_Name__c='Test Bond', ProductType__c='Bond'
                                                            );
        lstProductMaster.add(objProduct6);  
        
        
        insert lstProductMaster;
        
       List<ARPP_Detail__c>	lstARPPDetails = new List<ARPP_Detail__c>();
       
      
        						
        ID ProfileID = [ Select id from Profile where name = 'Financial Planner'].id;
      	User objUser = new User(email='test-user@fakeemail1.com', profileid = ProfileID, UserName='test-user@fakeemail1.com', 
      	 							alias='tuser11', CommunityNickName='tuser1',TimeZoneSidKey='America/New_York', 
      	 							LocaleSidKey='en_US', EmailEncodingKey='ISO-8859-1',LanguageLocaleKey='en_US', FirstName = 'Test_Parent_Fname1',
      	 						    LastName = 'Test_Parent_Lname1' );

        insert objUser;
        
        //Insert smagicbasic SMS Template record 
    	List<smagicbasic__SMS_Template__c> lstTemplate = new List<smagicbasic__SMS_Template__c>();
    	
    	smagicbasic__SMS_Template__c template= new smagicbasic__SMS_Template__c(smagicbasic__Name__c= 'Discontinuation Template', 
    																			smagicbasic__ObjectName__c = 'Account');
    	
    	smagicbasic__SMS_Template__c template1= new smagicbasic__SMS_Template__c(smagicbasic__Name__c= 'Renewal Template', 
    																			smagicbasic__ObjectName__c = 'Account');
    	lstTemplate.add(template);
    	lstTemplate.add(template1);
    	
    	insert lstTemplate;
    						
        //Insert Account record
    	Account objGeneralAccount = new Account(Name='Parner Account Test',
    								RecordTypeId= RECORD_TYPE_INFO_MAP.get('General').getRecordTypeId());
    	insert 	objGeneralAccount;
    																	
        Account objAccount1 = new Account(LastName='Test Freedom', Adjustment_Factor__c='2', OwnerId = objUser.Id,
	                       PersonTitle='TestData',PersonBirthdate=system.today(),PersonHomePhone='54623676',PersonMobilePhone='5463712345',
	                       Alternate_Mobile__c='356475',PersonEmail='sgdh@test.com', Alternate_E_Mail_Address__c='fdgr@test.com',PersonMailingStreet='aa',
	                       PersonMailingCity='bbb',Retirement_Year__c=2034,Residential_Status_del__c='own',Retirement_Age__c='58',Estimated_Life_Expectancy__c='67',
	                       Estimated_Life_EndYear__c=2041,Relationship_to_Entity__pc='husband', Related_To__c ='Ffreedom',
	                       RecordTypeId = RECORD_TYPE_INFO_MAP.get('Client').getRecordTypeId(),Will__c = true );
	                      
	                       
        insert objAccount1;
        
        Insurance__c insurance1 = new Insurance__c(Flag__c = 'Analysis',Entity__c=objAccount1.id, Suggested_Cover_General_Insurance__c=45665,Premium_Frequency__c = 'One Time Premium',
	    											Insurance_Company__c='ICICI',Policy_Type__c='Term Life',Premium_Amount_Rs__c=2351,Commencement_Date__c = system.today(),
	    											RecordTypeId=RECORD_TYPE_INFO_MAP_INSURANCE.get('Life Insurance').getRecordTypeId(),Policy_Number__c = 'sss');
	    insert insurance1;
	    						
        List<Investment_Asset__c> lstInvestmentAsset = new List<Investment_Asset__c>();
        Investment_Asset__c objInvest = new Investment_Asset__c(Entity__c=objAccount1.id, Scheme_Name_Text__c='Axis SIP Fund',Monthly_SIP_Amount__c=10000, 
      														RecordTypeId = RECORD_TYPE_INFO_MAP_INVESTMENT.get('Mutual Fund').getRecordTypeId(), Maturity_Date__c = system.today());
      														
        lstInvestmentAsset.add(objInvest);
        
        Investment_Asset__c objInvest1 = new Investment_Asset__c(Entity__c=objAccount1.id, Scheme_Name_Text__c='Axis SIP Fund',Monthly_SIP_Amount__c=10000, 
      														RecordTypeId=RECORD_TYPE_INFO_MAP_INVESTMENT.get('Mutual Fund').getRecordTypeId(), Maturity_Date__c = system.today());
      														
      	Investment_Asset__c objInvest2 = new Investment_Asset__c(Entity__c=objAccount1.id, Scheme_Name_Text__c='Axis Lumpsum Fund',Monthly_SIP_Amount__c=10000, 
      														RecordTypeId=RECORD_TYPE_INFO_MAP_INVESTMENT.get('Mutual Fund').getRecordTypeId(), Maturity_Date__c = system.today());
      																											
      	lstInvestmentAsset.add(objInvest1);
      	lstInvestmentAsset.add(objInvest2);	
      													
        insert lstInvestmentAsset;
        
        
         //Select a.isSIPexecutionTracker__c, a.isExecutionTracker__c, a.Scheme_Name__c, a.SIP_Action__c, a.SIP_Action_Amount__c, a.Lumpsum_Action__c, 
		//a.Investment_Asset__c, a.Action_Amount__c From Approve_Action_Plan__c a  where Investment_Asset__c!=null
      	//Insert Approve Action Plan Record
      	List<Approve_Action_Plan__c> lstApproveActionPlan = new List<Approve_Action_Plan__c>();
      	
      	Approve_Action_Plan__c objAAP4 = new Approve_Action_Plan__c(isSIPexecutionTracker__c=true,isExecutionTracker__c =true, 
      											Remarks__c='test SIP', Amount__c = 20000,Lumpsum_Action__c='Hold',
      										  	Amount_Per_Installment__c = 200,  SIP_Action__c='Continue',Investment_Asset__c = objInvest2.Id,
      										  	Scheme_Name__c='Axis SIP Fund',Installments__c = 20, SIP_Action_Amount__c = 2000,
      										  	Action_Amount__c =1000,
      										  	Account__c = objAccount1.id, AP_Status__c = 'Opened');	
      										  								
        lstApproveActionPlan.add(objAAP4);
       
       
        Approve_Action_Plan__c objAAP5 = new Approve_Action_Plan__c(isLumpsumExecTracker__c=true,isExecutionTracker__c =true, Remarks__c='test Lumpsum', Amount__c = 20000,
      										  Amount_Per_Installment__c = 200,  Lumpsum_Action__c='Hold',Investment_Asset__c = objInvest.Id,
      										  Scheme_Name__c='Axis Lumpsum Fund1',Installments__c = 20,
      										  Action_Amount__c =1000,
      										  Account__c = objAccount1.id, AP_Status__c = 'Opened');	
      										  								
        lstApproveActionPlan.add(objAAP5);
       
       
        Approve_Action_Plan__c objAAP6 = new Approve_Action_Plan__c(isLumpsumExecTracker__c=true,isExecutionTracker__c =true, Remarks__c='test Lumpsum', Amount__c = 20000,
      										  Amount_Per_Installment__c = 200,  Lumpsum_Action__c='Switch In',Investment_Asset__c = objInvest1.Id,
      										  Scheme_Name__c='Axis SIP Fund',Installments__c = 20,
      										  Action_Amount__c =1000,
      										  Account__c = objAccount1.id, AP_Status__c = 'Opened');	
      										  								
        lstApproveActionPlan.add(objAAP6);									  
      										  
      										  
      										  
      	
        Approve_Action_Plan__c objAAP = new Approve_Action_Plan__c(Transaction_Type__c='STP To', Remarks__c='test Lumpsum', Amount__c = 20000,
      										  Amount_Per_Installment__c = 200,
      										  Product_Name__c ='Axis Lumpsum Fund1',Installments__c = 20, Action_Amount__c = 2000,
      										  Item_Type__c = 'Lumpsum', Account__c = objAccount1.id, isLumpsumExecTracker__c=true,AP_Status__c = 'Opened');
      										  							  
        lstApproveActionPlan.add(objAAP);			
        
        Approve_Action_Plan__c objAAP1 = new Approve_Action_Plan__c (Transaction_Type__c='New Sip', Remarks__c='test SIP',
        								    Account__c=objAccount1.id,
        								    Product_Name__c= 'Axis SIP Fund',
     										Amount__c=10000,Fund__c='HDFC Top 200 Fund',Amount_Per_Installment__c=400,Option__c='Growth',Installments__c=40, 
     										Item_Type__c = 'SIP',
     										Category__c='Equity', isSIPexecutionTracker__c = true,AP_Status__c = 'Opened');	
     															  
      	lstApproveActionPlan.add(objAAP1);		
      	
      	
      	Approve_Action_Plan__c objAAP2= new Approve_Action_Plan__c(Amount__c = 20000,Suggested_Cover__c =1000000,
      										  Policy_Name__c = 'Axis Life Insurance', Amount_Per_Installment__c = 200, Installments__c = 20, 
      										  Action_Amount__c = 1000,	Insurance__c = insurance1.Id,
      										  Policy_Type__c = 'Term Life', Tenure_of_Insurance__c = 5 , Sum_Assured_Rs__c = 10000,  
      										  Item_Type__c = 'Life Insurance', Account__c = objAccount1.id, isInsuranceExecutionTracker__c =true,
      										  AP_Status__c = 'Opened', Premium_Amount_Rs__c = 1000);
      										  
      	lstApproveActionPlan.add(objAAP2);		
      				
      				
      	Approve_Action_Plan__c objAAP3 = new Approve_Action_Plan__c (Transaction_Type__c='New Sip',
      										Product_Name__c = 'Bajaj General Insurance',
      										Policy_Type__c = 'Critical Illness',
      										Tenure_of_Insurance__c = 5,
      										Sum_Assured_Rs__c = 10000, 
      										Account__c=objAccount1.id,
     										Amount__c=10000,Amount_Per_Installment__c=400,Installments__c=40, Item_Type__c = 'General Insurance',
     										isInsuranceExecutionTracker__c = true, Premium_Amount_Rs__c = 1000);
     										
     	lstApproveActionPlan.add(objAAP3);
     	
     	
     	Approve_Action_Plan__c objAAPLoan = new Approve_Action_Plan__c (
			        								    isExecutionTracker__c = false, isaddonexecutionTracker__c = true,
			        								    Product_Name__c= 'Test Loan', Product__c = objProduct4.Id,
			     										Amount__c=10000,
			     										Item_Type__c = 'Fixed Deposit',
			     										Account__c = objAccount1.id, AP_Status__c = 'Opened');	
     															  
      	lstApproveActionPlan.add(objAAPLoan);	
      	
      	
      	Approve_Action_Plan__c objAAPFD = new Approve_Action_Plan__c (
			        								    isExecutionTracker__c = false, isaddonexecutionTracker__c = true,
			        								    Product_Name__c= 'Test FD', Product__c = objProduct5.Id,
			     										Amount__c=10000,
			     										Item_Type__c = 'Fixed Deposit',
			     										Account__c = objAccount1.id, AP_Status__c = 'Opened');	
     															  
      	lstApproveActionPlan.add(objAAPFD);	
      	
      	
      	
      	Approve_Action_Plan__c objAAPBond = new Approve_Action_Plan__c (
			        								    isExecutionTracker__c = false, isaddonexecutionTracker__c = true,
			        								    Product_Name__c= 'Test Bond', Product__c = objProduct6.Id,
			     										Amount__c=10000,
			     										Item_Type__c = 'Bond',
			     										Account__c = objAccount1.id, AP_Status__c = 'Opened');	
     															  
      	lstApproveActionPlan.add(objAAPBond);	
     	
     	insert lstApproveActionPlan;	
     	
     	  
      	//Insert Execution Tracker Record
      	List<Execution_Tracker__c> lstExecutionTracker = new List<Execution_Tracker__c>();
      	Execution_Tracker__c objMET1 = new Execution_Tracker__c(Approve_Action_Plan__c = objAAP2.id,Agreed_Amount__c =3000, Executed_Amount__c=100, Application_Status__c='Closed',
      																Entity_Name__c = objAccount1.Id, Type__c='Life Insurance', 
      																ET_Status__c='Assigned to Operations');
      	
      	
      	Execution_Tracker__c objMET2 = new Execution_Tracker__c(Approve_Action_Plan__c = objAAP3.id,Agreed_Amount__c =3000, Executed_Amount__c=100, Application_Status__c='Closed',
      																Entity_Name__c = objAccount1.Id, Type__c='General Insurance', 
      																ET_Status__c='Assigned to Operations');
      																
      	Execution_Tracker__c objMET3 = new Execution_Tracker__c(Approve_Action_Plan__c = objAAP1.id,Agreed_Amount__c =3000, Executed_Amount__c=100, Application_Status__c='Closed',
      																Entity_Name__c = objAccount1.Id, Type__c='SIP', 
      																ET_Status__c='Assigned to Operations');	
      																
      	Execution_Tracker__c objMET4 = new Execution_Tracker__c(Approve_Action_Plan__c = objAAP.id,Agreed_Amount__c =3000, Executed_Amount__c=100, Application_Status__c='Closed',
      																Entity_Name__c = objAccount1.Id, Type__c='Lumpsum', 
      																ET_Status__c='Assigned to Operations');																														
      	lstExecutionTracker.add(objMET1);
      	lstExecutionTracker.add(objMET2);
      	lstExecutionTracker.add(objMET3);
      	lstExecutionTracker.add(objMET4);														
      	insert lstExecutionTracker;
      	
       ARPP_Detail__c objARPP = new ARPP_Detail__c(Entity__c = objAccount1.Id,Approve_Action_Plan__c = objAAP1.id,
       												Product__c= objProduct.Id, Type__c = 'Lumpsum', Commission__c = null,
       												Actual_Commission__c = null,
       												Action_Plan_Amount__c = 1000,Execution_Tracker_Actual_Product__c= objProduct.Id);
       												
       insert objARPP;											
        
       ARPP_Detail__c objARPP1 = new ARPP_Detail__c(Entity__c = objAccount1.Id,Approve_Action_Plan__c = objAAP1.id,
       												Product__c= objProduct.Id, Type__c = 'SIP', Commission__c = null,
       												Actual_Commission__c = null,
       												Action_Plan_Amount__c = 1000,Execution_Tracker_Actual_Product__c= objProduct.Id);
      insert objARPP1;
       
       												
        //Insert Commission record
        Commission__c objCommission = new Commission__c(Product__c = objProduct.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);
        	
           
        Commission__c objCommission1 = new Commission__c(Product__c = objProduct1.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);	
        
        Commission__c objCommission2 = new Commission__c(Product__c = objProduct2.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);	
        
        Commission__c objCommission3 = new Commission__c(Product__c = objProduct3.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);	
        Commission__c objCommission4 = new Commission__c(Product__c = objProduct3.Id, Active__c = false,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20); 	
        												
        Commission__c objCommission5 = new Commission__c(Product__c = objProduct4.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 0, Upfront_Commission__c = 20);																									
        lstCommssion.add(objCommission5);
        
        
        Commission__c objCommission6 = new Commission__c(Product__c = objProduct5.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Min_Months__c = 1, Max_Months__c = 10,
        												Trail_Commission__c = 0, Upfront_Commission__c = 20);																									
        lstCommssion.add(objCommission6);
        
        
        Commission__c objCommission7 = new Commission__c(Product__c = objProduct6.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 0, Upfront_Commission__c = 20);																									
        lstCommssion.add(objCommission7);		
        																																													
        lstCommssion.add(objCommission);
        lstCommssion.add(objCommission1);
        lstCommssion.add(objCommission2);
        lstCommssion.add(objCommission3);
        lstCommssion.add(objCommission4);									
        insert lstCommssion;	
        
        objCommission1.Active__c = false;
        objCommission4.Active__c =true;
        objCommission5.Active__c =false;
        update objCommission1;	
        
		/*
		
		Test.startTest();
		List<Commission__c> lstCommision = new  List<Commission__c> ();
		
		 //InsertProduct Manufacturer record
		Product_Manufacturer_Master__c objProductManufacturer = new Product_Manufacturer_Master__c(Name='Axis', Short_Code__c='axis', Is_Active__c=true);
        insert objProductManufacturer;
		
		//Insert Product record
        Product_Master__c objProduct = new Product_Master__c(Product_Manufacturer__c= objProductManufacturer.Id, 
                                                             Is_Active__c= true, Product_Name__c='Axis Equity Fund1', ProductType__c='Mutual Fund',
                                                             Investment_Type__c ='SIP');
        insert objProduct;
        
        //Insert Commission record
        Commission__c objCommission = new Commission__c(Product__c = objProduct.Id, Active__c = true,
        												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);
        insert objCommission;
        
        Commission__c objCommission1 = new Commission__c(Product__c = objProduct.Id, Active__c = false,
       												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);  
        lstCommision.add(objCommission1);
        
        insert lstCommision;
        												 
		Commission__c objCommission2 = new Commission__c(Product__c = objProduct.Id, Active__c = true,
       												Max_Year_Value__c = 10, Min_Year_Value__c = 0 ,
        												Trail_Commission__c = 10, Upfront_Commission__c = 20);  
        insert objCommission2;
        
        //Update Commission record
        objCommission1.Active__c = true;
        update objCommission1;
        
        Test.stopTest();*/
	}    
}