/**
 * Email services are automated processes that use Apex classes
 * to process the contents, headers, and attachments of inbound
 * email.
 */
global class IntegrateGmailAndSalesforce implements Messaging.InboundEmailHandler 
{
  global Messaging.InboundEmailResult handleInboundEmail(Messaging.InboundEmail email, Messaging.InboundEnvelope envelope) 
    {
        Messaging.InboundEmailResult result = new Messaging.InboundEmailresult();
            
        String myPlainText = '';
        String myHtmlText = '';
                     
        if(email != null && email.fromAddress != null)
        {
          /*============For Autogenerated mail=========*/ 
            if(email.fromAddress == Label.FromFfreedomEmailAddress || email.fromAddress == Label.FromGoogleEmailAddress)
            {
                myPlainText = email.plainTextBody;
                myHtmlText = email.htmlBody;
                /*=== Following Code to retrive data from autogenerated mail==========*/
                /*=========code to retrieve email id (who has applied Forward Rule)========*/                
                Integer frmAddStart = myPlainText.indexOf(Label.HasRequested);
                String fromAddress = myPlainText.substring(0, frmAddStart);
               
               /*=========code to retrieve Confirmation code from autogenerated mail========*/  
                Integer numStart = myPlainText.indexOf(Label.Email_Confirmation_Code) + Integer.valueOf(Label.EmailConfirmationCodeNumStart);
                Integer numEnd =  myPlainText.indexOf(Label.ToAllow) - Integer.valueOf(Label.EmailConfirmationCodeNumEnd);                
                String ConfirmCode = myPlainText.substring(numStart,numEnd);
                
                /*===========Send mail with confirmation code=========*/     
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                mail.setToAddresses(new String[] {fromAddress});
                mail.setSubject(Label.Email_Confirmation_Code);
                mail.setPlainTextBody(Label.ConfirmationCodeEmailText + ConfirmCode);
                Messaging.SendEmailResult [] r = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});
       }
       /*========Mail send by entity or lead======*/
            else
            {
                MapEntity(email.fromAddress,email.subject,email.plainTextBody,email.textAttachments,email.binaryAttachments);
            }
         }
       return result;
    }
    
    public void MapEntity(String fromAddress, String Subject, String PlainTextBody,List<Messaging.Inboundemail.Textattachment> tAttachment,List<Messaging.Inboundemail.BinaryAttachment> bAttachment)
    {
    	try
      	{
      		List<Attachment> lstTxtAttachmentTobeInsert = new List<Attachment>();
    		List<Attachment> lstBinAttachmentTobeInsert = new List<Attachment>();
           /*======Create record in Activity History for Entity===*/
       		List<Account> lstAccount= [Select Id,OwnerId,Name from Account where PersonEmail =: fromAddress and Entity_Status__c =: 'Active' and Owner.IsActive = true];
       		List<Task> lstTask = new List<Task>();
       		
       		Map<Id,List<Messaging.Inboundemail.Textattachment>> tAttachMap = new  Map<Id,List<Messaging.Inboundemail.Textattachment>>();
    		Map<Id,List<Messaging.Inboundemail.BinaryAttachment>> bAttachMap = new Map<Id,List<Messaging.Inboundemail.BinaryAttachment>>();
			Map<String,String> MapTaskIdOwnerId = new Map<String,String>();
			
        	if(lstAccount != null && lstAccount.size() >0)
        	{
	             /*======For more than one Entity having same email id====*/
		        for(Account objAccount : lstAccount)
		        {
		        	Task objTask = new Task(OwnerId = objAccount.OwnerId, WhatId = objAccount.Id, Subject = Label.EmailTaskSubject + Subject, Description=PlainTextBody, Status = 'Completed', IsReminderSet = False,ActivityDate = System.TODAY(),Completion_Date__c = System.today());
	              	lstTask.add(objTask);
	            }
 			}
	        else
	        {
            	/*======Create record in Activity History for Lead===*/
               	List<Lead> lstLead =  [select Id,OwnerId from Lead where Email =: fromAddress and Status != 'Converted' and Owner.IsActive = true];
               	if(lstLead != null && lstLead.size() >0)
              	{
	                /*======For more than one Lead having same email id====*/
	                for(Lead objLead : lstLead)
	              	{
	                	Task objTask = new Task(OwnerId = objLead.OwnerId, WhoId = objLead.Id, Subject = Label.EmailTaskSubject + Subject, Description = PlainTextBody, Status = 'Completed', IsReminderSet = False,ActivityDate = System.TODAY(),Completion_Date__c = System.today());
	             		lstTask.add(objTask);
	              	}
         		}
          	}
          
          	if(lstTask.size() > 0)
          	{
  			 	List<Database.saveResult> lstSaveResult = Database.insert(lstTask);
  			 	
  			 	set<String> setTaskId = new Set<String>();
  			 	for(Database.saveResult  objSaveResult : lstSaveResult)
      			{	
          			if(objSaveResult.isSuccess())
          				setTaskId.add(objSaveResult.getId()); 
          		}
          		
          		if(setTaskId.size() > 0)
          		{
          			List<Task> lstTaskId = [Select Id,WhatId,OwnerId From Task where id in : setTaskId];
          			
          			for(Task objTask : lstTaskId){	
          				MapTaskIdOwnerId.put(objTask.Id,objTask.OwnerId);
	          			tAttachMap.put(objTask.Id,tAttachment);
						bAttachMap.put(objTask.Id,bAttachment);
	          		}
	          		
	          		for(String strTaskId : setTaskId)
	          		{
						if(tAttachMap.get(strTaskId)!= null && tAttachMap.get(strTaskId).size() > 0)
						{
							for(Messaging.Inboundemail.Textattachment objTxtAttach : tAttachMap.get(strTaskId))
							{
								Attachment atch = new Attachment();
								atch.Name = objTxtAttach.fileName;
								atch.Body = Blob.valueOf(objTxtAttach.body);
								atch.ParentId = strTaskId;
								atch.OwnerId = MapTaskIdOwnerId.get(strTaskId);
								lstTxtAttachmentTobeInsert.add(atch);
							}
						} 
						
						if(bAttachMap.get(strTaskId)!= null && bAttachMap.get(strTaskId).size() > 0)
						{
							for(Messaging.Inboundemail.BinaryAttachment objBinAttach : bAttachMap.get(strTaskId))
							{
								Attachment atch = new Attachment();
								atch.Name = objBinAttach.fileName;
								atch.Body = objBinAttach.body;
								atch.ParentId = strTaskId;
								atch.OwnerId = MapTaskIdOwnerId.get(strTaskId);
								lstBinAttachmentTobeInsert.add(atch);
							}
						} 
					}
					if(lstTxtAttachmentTobeInsert.size() > 0)
						Database.upsert (lstTxtAttachmentTobeInsert);
					
					if(lstBinAttachmentTobeInsert.size() > 0)
						Database.upsert (lstBinAttachmentTobeInsert);	
          		}
          	}
		}   	
      	catch(Exception ex)
      	{
	        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
	        mail.setToAddresses(new String [] {Label.Technology_Support});
	        mail.setSubject(Label.InboundEmailException);
	        mail.SetPlainTextBody(String.valueof(ex));
	        Messaging.SendEmailResult [] r = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});
      	}
    }
 }