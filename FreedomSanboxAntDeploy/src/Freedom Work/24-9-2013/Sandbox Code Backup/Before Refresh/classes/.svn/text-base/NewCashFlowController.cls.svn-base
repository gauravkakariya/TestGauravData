/*
	
	Revision History:
	
    Version     Version Author     Date        Comments
    1.0         --           	   --	  		Initial Draft
    2.0			Manasi			   03/06/2011	Added apex warning, if birthdate is null in setAction() and projection() function.
    2.0			Manasi			   4/8/2011 	Chnage in class NewCashFlowController:
    											1. Added new Property :
				  								IsSurplusNegative Boolean value will be true when Total expenseValue is greater than Total incomeValue
				  								2. IsSurplusNegative Boolean :assign false as default value in constructor 
				  								3. IsSurplusNegative Boolean value will be true when expenseValue is greater than incomeValue  
									 
*/
public class NewCashFlowController 
{
	//FS0309
	public Remarks__c objRemark {get;set;}
	public String strRemark {get;set;}
    public NewCashFlowService service;
    public String entityId {get;set;}
    //Added on : 1/2/2013 : Aditi Satpute : Hide Save button for Business Partner Financial Plan //Sanat
	public Boolean isDisplaySaveButton{get;set;}
	
    /** Eternus Solutions       **/
	/** Author  : Manasi		**/
	/** Issue Id: FS0090      	**/
	/** Date    : 4/8/2011	 	**/
	/** Purpose : Added new Property :
				  IsSurplusNegative Boolean value will be true when Total expenseValue is greater than Total incomeValue **/
	/****************************************************/  
    public Boolean IsSurplusNegative {get;set;}
    public NewCashFlowBean cashFlowBean { get;set;}   
    private String chartData;
    public String getChartData(){ return chartData;}   
    private String chartPath ;
    private  double incrementFactor;
    public Static String eId {get;set;}
    
    //00001592
    public Boolean blnIsMonthlySurplusNegative {get; set;}
    public NewCashFlowController()
    {
    	System.debug('==== Inside Controller ====');
    	system.debug('***************start NewCashFlow Controller*Limit.getQueries======1========== Last Inside NewPortfolioSummary >'+Limits.getQueries());
    	//Code Added on : 1/2/2013 : Aditi Satpute : Hide Save button for Business Partner Financial Plan : by default true //Sanat
   		isDisplaySaveButton = true;
    	/** Eternus Solutions       **/
		/** Author  : Manasi		**/
		/** Issue Id: FS0090      	**/
		/** Date    : 4/8/2011	 	**/
		/** Purpose : IsSurplusNegative Boolean :assign false as default value in constructor **/
		/****************************************************/  
    	IsSurplusNegative = false;
        service = new NewCashFlowService();
        entityId = eId == null ? System.currentPageReference().getParameters().get('entityId'):eId;          
        system.debug('*****entity Id : in controller*****'+entityId); 
                     
        cashFlowBean = service.getCashFlowSnapshot(entityId);
        system.debug('***************start NewCashFlow Controller*Limit.getQueries========2======== Last Inside NewPortfolioSummary >'+Limits.getQueries());
        //cashFlowBean = service.getCashFlowProjection(entityId);        
        
        chartPath = 'http://chart.apis.google.com/chart?cht=bvs&chs=400x200&chco=458B00|6495ED|CD9B1D'; 
        List<ChartDataItem> items = new List<ChartDataItem>();
        incrementFactor=getIncrementFactor();//checkValue();
        system.debug('***************start NewCashFlow Controller*Limit.getQueries=====3=========== Last Inside NewPortfolioSummary >'+Limits.getQueries());
        //items.add(new ChartDataItem('TotalIncomes' , cashFlowBean.summaryList.get(0).totalValueList.get(0)));
        //items.add(new ChartDataItem('TotalExpenses' , cashFlowBean.summaryList.get(1).totalValueList.get(0)));
        items.add(new ChartDataItem('TotalIncomes',math.roundToLong(incomeValue)));
        items.add(new ChartDataItem('TotalExpenses',math.roundToLong(expenseValue)));
        items.add(new ChartDataItem('NetCashSurplus' ,math.roundToLong(netCash)));
        
  		/** Eternus Solutions       **/
		/** Author  : Manasi		**/
		/** Issue Id: FS0090      	**/
		/** Date    : 4/8/2011	 	**/
		/** Purpose : IsSurplusNegative Boolean value will be true when expenseValue is greater than incomeValue **/
		/****************************************************/  
       	if(math.roundToLong(expenseValue) > math.roundToLong(incomeValue))
    		IsSurplusNegative = true;
		else
			IsSurplusNegative = false;       	
        if(minValue != 0)
        {
            chartPath = chartPath + '&chxt=x,y&chf=bg,s,F0F0F0&chm=N,000000,0,,12,&chxr=1,'+(MinValue-incrementFactor)+','+maxValue+','+incrementFactor+'&chds='+(MinValue-incrementFactor)+','+maxValue;  
        }else{
            chartPath = chartPath + '&chxt=x,y&chf=bg,s,F0F0F0&chm=N,000000,0,,12,&chxr=1,'+MinValue+','+maxValue+','+incrementFactor+'&chds='+MinValue+','+maxValue;  
        }
        chartData = chartPath +  getChartInfo(items);
        system.debug('***************start NewCashFlow Controller*Limit.getQueries======4========== Last Inside NewPortfolioSummary >'+Limits.getQueries());
        //FS0309
        if(entityId != null)
	    {
	    	/* Map<String,Remarks__c > mapofRemarks = TestRemark.getRemark(entityId);
	    	if(!mapofRemarks.isEmpty() && mapofRemarks.containsKey('CashFlow'))
	    	{
	    	 	objRemark = mapofRemarks.get('CashFlow');
	    		strRemark = objRemark.Remark__c;
	    	}	*/
	    	for(Remarks__c obj:[select Remark__c from Remarks__c where entity__c =:entityId and recordtype.Name=:'CashFlow' limit 1])
	    	{
	    		objRemark = obj;
	    		strRemark = objRemark.Remark__c; 
	    	}
	    	//Added Code on : 1/2/2013 : Aditi Satpute : Hide Save button for Business Partner Financial Plan //Sanat
		    User objUser = [Select Profile.Name, ProfileId, UserType, Name, Id From User where Id =: UserInfo.getUserId() limit 1];
		    if(objUser.UserType.equalsIgnoreCase('PowerPartner'))
		    {
		    	isDisplaySaveButton = false;
		    }	
	    }
	    //00001592
	    blnIsMonthlySurplusNegative = false;
	    system.debug('***************End NewCashFlow Controller*Limit.getQueries================ Last Inside NewPortfolioSummary >'+Limits.getQueries());
	      //Error.debuglog('-----------------Limit NewCashFlow--------'+Limits.getQueries());
    }
    
    public List<String> getYearList 
    {
        get 
        {
            return service.getYearList();
        }
    }

    public PageReference setAction() 
    {
    	/** Eternus Solutions      **/
		/** Author  : Manasi Ranade*/
		/** Issue Id: F0029      **/
		/** Date    : 03/06/2011 **/
		/** Purpose : Added warning to the page, if Age is null**/ 
    	try
    	{
    		system.debug('****entityId : in setAction()****'+entityId);
	        String operation = System.currentPageReference().getParameters().get('operation');
	        if('Snapshot'.equals(operation)) 
	        {
	            cashFlowBean = service.getCashFlowSnapshot(entityId);
	        }
	        else 
	        {
	            cashFlowBean = service.getCashFlowProjection(entityId);
	        }
    	}
        catch(system.exception e)
 	    {
 	    	ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.WARNING, e.getMessage()));
 	    } 
        return null;
    } 
    
    public Double netCash 
    {
        get 
        {
           Double totalIncome = 0, totalExpense = 0;
                
           if(!cashFlowBean.summaryList.isEmpty()) 
           {
               if(!cashFlowBean.summaryList.get(0).totalValueList.isEmpty())
                   totalIncome  = cashFlowBean.summaryList.get(0).totalValueList.get(0);
                   if(!cashFlowBean.summaryList.get(1).totalValueList.isEmpty())
                       totalExpense = cashFlowBean.summaryList.get(1).totalValueList.get(0);
           }
                                
           if(totalIncome > totalExpense ) 
           {
                return totalIncome - totalExpense;
           }
           else 
           {
                return  (totalExpense - totalIncome) * (-1);
           }                                   
        }
    }
    public String getCashFlowChart 
    {
        get 
        {
            Double totalIncomes =  0,totalExpenses = 0,yAxisMaxValue = 0;
            List<String> xAxisDataList =  new String[] {'Total Incomes','Total Expenses', 'Net cash - Surplus/(Shortage)'};
            List<String> yAxisDataList = new String[]{};
            
            if(!cashFlowBean.summaryList.isEmpty()) 
            {
                if(!cashFlowBean.summaryList.get(0).totalValueList.isEmpty())
                    totalIncomes  = cashFlowBean.summaryList.get(0).totalValueList.get(0);
                if(!cashFlowBean.summaryList.get(1).totalValueList.isEmpty())   
                    totalExpenses = cashFlowBean.summaryList.get(1).totalValueList.get(0);
            }                                                
            yAxisDataList.add('' + totalIncomes);
            yAxisDataList.add('' + totalExpenses);                                
            yAxisDataList.add('' +  netCash);
            
            yAxisMaxValue = totalIncomes ;  
            if( totalExpenses > totalIncomes )
                 yAxisMaxValue = totalExpenses;
                  
            return GraphMarkUpGenerator.get2DGraph('', '', ''+yAxisMaxValue, xAxisDataList,
                                                                             yAxisDataList, 'Cash Flow');                    
        }       
        set;
    }
  
    public pageReference projection() 
    {
    	/** Eternus Solutions      **/
		/** Author  : Manasi Ranade*/
		/** Issue Id: F0029      **/
		/** Date    : 03/06/2011 **/
		/** Purpose : Added warning to the page, if Age is null**/ 
 	    // try
 	    // {
 	    system.debug('***********entityId*: in NewCashFlowController***********'+entityId);
 	    cashFlowBean = service.getCashFlowProjection(entityId);
	    cashFlowBean.isMonthlySurplusNegative = true;
	         
	    //00001592
        Double dblTotalIncomes = 0, dblTotalExpenses = 0;
        if(cashFlowBean.summaryList != null)
        {
        	system.debug('DDDDDDDDDDDDDDDDDDd cashFlowBean.summaryList:'+cashFlowBean.summaryList[0]);
        	system.debug('................cashFlowBean.summaryList.size():'+cashFlowBean.summaryList.size());
        	system.debug('-----------------cashFlowBean.summaryLis:'+cashFlowBean.summaryList);
        	system.debug('------------------cashFlowBean.summaryList[0].monthlySummary:'+cashFlowBean.summaryList[0].monthlySummary);
        	if(cashFlowBean.summaryList != null &&  cashFlowBean.summaryList[0] != null && cashFlowBean.summaryList.size() >= 1 && cashFlowBean.summaryList[0].monthlySummary != null)
	        {
	        	dblTotalIncomes = cashFlowBean.summaryList[0].monthlySummary;
	        }
	        
	        if(cashFlowBean.summaryList.size() >= 2 && cashFlowBean.summaryList[1].monthlySummary != null)
	        {
	        	dblTotalExpenses = cashFlowBean.summaryList[1].monthlySummary;
	        }
	        if(dblTotalIncomes < dblTotalExpenses)
	        	blnIsMonthlySurplusNegative = true;
	        else
	        	blnIsMonthlySurplusNegative = false;
        }	
        //entityId = System.currentPageReference().getParameters().get('entityId');
        pageReference pageRef = new pageReference('/apex/NewCashFlowProjection?entityId=' +entityId + '&tabname=Financial Planning');   
        pageRef.setRedirect(false);     
        return pageRef; 
		//} 	 
 	    return null;
    }
    public pageReference newCashFlow() 
    {
        //cashFlowBean = service.getCashFlowPage(entityId);
        //entityId = System.currentPageReference().getParameters().get('entityId');
        pageReference pageRef = new pageReference('/apex/NewCashFlowPage?entityId=' +entityId + '&tabname=Financial Planning');   
        pageRef.setRedirect(true);     
        return pageRef;     
    }
    
    
     public Double incomeValue
     {
         get 
         {
             if(!cashFlowBean.summaryList.isEmpty()) 
             {
                 if(!cashFlowBean.summaryList.get(0).totalValueList.isEmpty())
                     return cashFlowBean.summaryList.get(0).totalValueList.get(0); 
             }
             return 0;
         }
     }
     public Double expenseValue 
     {
         get 
         {
              if(!cashFlowBean.summaryList.isEmpty()) 
              {
                  if(!cashFlowBean.summaryList.get(1).totalValueList.isEmpty())
                      return cashFlowBean.summaryList.get(1).totalValueList.get(0);    
              }
              return 0;       
         }
    }
     /**
    For generation google chart
    */
    
    public double MinValue
    {
       set;
       get
       {
           MinValue=0;
           /* Double totalIncome, totalExpense;
           try{
               if(!cashFlowBean.summaryList.isEmpty()){
                   if(!cashFlowBean.summaryList.get(0).totalValueList.isEmpty())
                       totalIncome  = cashFlowBean.summaryList.get(0).totalValueList.get(0);
                   if(!cashFlowBean.summaryList.get(1).totalValueList.isEmpty())  
                       totalExpense = cashFlowBean.summaryList.get(1).totalValueList.get(0);
                    system.debug('====================='+totalIncome  + totalExpense );    
               }
                system.debug('===========min=========='+cashFlowBean.summaryList);
           }catch(Exception e)
           {
               system.debug(e.getMessage());
           }*/
           if(incomeValue<expenseValue && incomeValue<netCash)
               MinValue=incomeValue;
           else if(expenseValue<incomeValue&& expenseValue<netCash)
               MinValue=expenseValue ;
           else
               MinValue=netCash;
           return math.roundToLong(minValue);
       }
   }
  public double getIncrementFactor()
  {
       double prevValue;
       if(MinValue<0)
       {
           MinValue=MinValue*(-1);
       }
       double value=0;
       //if(MinValue!=0)
       value=(maxValue-MinValue)/10;
       //if(value<=MinValue)    
       //return MinValue;
       //else
       return math.roundToLong(value);
   }
    public double maxValue
    {
       set;
       get
       {
           maxValue=0;
           /*  Double totalIncome, totalExpense;
           try{
               if(!cashFlowBean.summaryList.isEmpty()){
                    if(!cashFlowBean.summaryList.get(0).totalValueList.isEmpty())
                       totalIncome  = cashFlowBean.summaryList.get(0).totalValueList.get(0);
                    if(!cashFlowBean.summaryList.get(1).totalValueList.isEmpty())  
                       totalExpense = cashFlowBean.summaryList.get(1).totalValueList.get(0);
                   system.debug('====================='+totalIncome  + totalExpense ); 
               }
                system.debug('========max============='+cashFlowBean.summaryList);
           }catch(Exception e)
           {
               system.debug(e.getMessage());
           }*/
           if(incomeValue<expenseValue)
               maxValue=expenseValue;
           else 
               maxValue=incomeValue;
           return math.roundToLong(maxValue);
       }
    }    
    private String getChartInfo(List<ChartDataItem> items)
    {
         String chd = ''; 
         String chl = ''; 
         for(ChartDataItem citem : items) {
             chd += citem.Value + ',';
             chl += citem.Name+ '|'; 
         } 
         chd = chd.substring(0, chd.length() -1); 
         chl = chl.substring(0, chl.length() -1); 
         String result = '&chbh=a,50,20&chd=t:' + chd + '&chl=' + chl+'&chtt='+'Cash Flow'; 
         return result;
    }
    
    public class ChartDataItem
    { 
        public String Name{get;set;} 
        public Double Value {get;set;} 
        public ChartDataItem(String Name, Double Value) 
        {
            this.Name = Name;    
            this.Value = Value; 
        }
    }
    
    //FS0309
    public void save()
	{
		system.debug('!!!!!!!!!!! 1 cash');
		if(objRemark == null)
    	{
    		system.debug('!!!!!!!!!!! 1.1');
    		objRemark =new Remarks__c();
    		ID RecTypeId = [select id from RecordType where Name= 'CashFlow'][0].id;
    		system.debug('!!!!!!!!!!! 1.2 selectedType:'+RecTypeId);
    		objRemark.RecordTypeId = RecTypeId;
    		system.debug('!!!!!!!!!!! 1.3');
    		objRemark.Entity__c = entityId;
			system.debug('!!!!!!!!!!! 1.4');
    		objRemark.Remark__c = strRemark;
    		system.debug('!!!!!!!!!!! 1.5');
    		insert objRemark;
    		system.debug('!!!!!!!!!!! 1.6');
    	}
    	else
    	{
    		system.debug('!!!!!!!!!!! 2');
    		objRemark.Remark__c = strRemark;
    		update objRemark;
    	}
    	system.debug('!!!!!!!!!!! 3');
		//objRemark.Entity__c = entityId;
		//objRemark.recordtype.Name = 'Networth';
		//upsert objRemark;
	}
}