public with sharing class HandlerForParentOfLoan
{
	static Boolean flag=true;
    public Integer count=0;
     
	public void beforeLoanInsert(List<Loan__c> lstLoan)
	{
		system.debug('=================================================='+lstLoan);
		Map<String , List<Loan__c>> mapPortalIdAndList = new Map<String , List<Loan__c> >();
		Map<String , List<Loan__c>> mapNewPortalIdAndList = new Map<String , List<Loan__c> >();
	
		for(Loan__c objLoan : lstLoan)
		{
			//List<Loan__c> listLoan = new List<Loan__c>([select Portal_Id__c from Loan__c where Portal_Id__c = :objLoan.Portal_Id__c]);
			//if(listLoan.size() == 0 )
			//{
				if(objLoan.Portal_Parent_Entity__c!= NULL )		
				{
					if(!mapPortalIdAndList.containsKey(objLoan.Portal_Parent_Entity__c))
					{
					     mapPortalIdAndList.put(objLoan.Portal_Parent_Entity__c , new List<Loan__c>{objLoan});
					     mapNewPortalIdAndList.put(objLoan.Portal_Id__c , new List<Loan__c>{objLoan});
					}
					else
					{
					     mapPortalIdAndList.get(objLoan.Portal_Parent_Entity__c).add(objLoan);
					     mapNewPortalIdAndList.put(objLoan.Portal_Id__c , new List<Loan__c>{objLoan});
					}
				//}
			}
		}
		
		List<Account> lstAccount = new List<Account>([select id, Portal_Id__c , Name  from Account where Portal_Id__c IN: mapPortalIdAndList.keySet() ]);
		List<Loan__c> lstLon = new List<Loan__c>([select Portal_Id__c from Loan__c where Portal_Id__c IN: mapNewPortalIdAndList.keySet() ]);
		//system.debug('=================================================='+lstAccount);
		
		if(lstLon.isEmpty()){
		for(Account objAccount : lstAccount )
		{
			if(mapPortalIdAndList != null && mapPortalIdAndList.containsKey(objAccount.Portal_Id__c) && mapPortalIdAndList.get(objAccount.Portal_Id__c) != null)
			{
				for(Loan__c objLoan : mapPortalIdAndList.get(objAccount.Portal_Id__c))
				{
				   	
				   if(objAccount.Id != null)
				   		objLoan.Entity__c = objAccount.Id;
					system.debug('objContact======='+objLoan);
					count++;
				} 
			}
		}
		}		
	}
	
	public void beforeUpdateLoan(List<Loan__c> lstNewLoan, List<Loan__c> lstOldLoan)
	{
		for(Loan__c objNewLoan : lstNewLoan)
		{
			for(Loan__c objOldLoan : lstOldLoan)
		    {
			   if(objOldLoan.From_Portal__c == 1 && objNewLoan.Synched_Date_Time__c >= objOldLoan.LastModifiedDate )
			   {
				  objNewLoan.From_Portal__c = 0;
				  objNewLoan.IsSynched__c = true;
			   }
			   else if(objOldLoan.From_Portal__c == 1 && objNewLoan.Synched_Date_Time__c < objOldLoan.LastModifiedDate )
			   {
				  objNewLoan.From_Portal__c = 0;
				  objNewLoan.IsSynched__c = false;
			   }
			   else if(objNewLoan.From_Portal__c == 0)
			   {
			   	 objNewLoan.IsSynched__c = false;
			   }
			}
			
		}
	}
	
	@IsTest(seealldata = true) 
      public static void testCoverage() 
      {
      	 TestData_Ffreedom testData = new TestData_Ffreedom();
      	 Account parent = new Account();
          parent = testData.initializeAccount();
          insert parent;
          Account child = new Account(); 
          child = testData.init_FamilyMember(parent);
          child.Portal_Id__c = '1';
          insert child;
      	  
          Loan__c objLoan = new Loan__c();
          objLoan.Balance_No_of_Years__c = 2.0;
          objLoan.Portal_Parent_Entity__c = '1';
          objLoan.From_Portal__c = 0;
          objLoan.Entity__c = parent.Id;
          objLoan.Portal_Id__c ='5';
           //insert objExp;
          
          Loan__c objLoan1 = new Loan__c();
          objLoan1.Balance_No_of_Years__c = 3.0;
          objLoan1.Portal_Parent_Entity__c = '1';
          objLoan1.From_Portal__c = 1;
          objLoan1.Entity__c = parent.Id;
          objLoan1.Portal_Id__c ='6';
             
          test.startTest();
              insert objLoan;
             objLoan.Balance_No_of_Years__c = 4.0;
              update objLoan;
              insert objLoan1;
              objLoan1.Balance_No_of_Years__c = 6.0;
              objLoan1.Synched_Date_Time__c = system.Now()+1;
              update objLoan1;
              objLoan1.Balance_No_of_Years__c = 3.0;
              objLoan1.Synched_Date_Time__c = system.Now();
              update objLoan1;
          test.stopTest();
       }
}