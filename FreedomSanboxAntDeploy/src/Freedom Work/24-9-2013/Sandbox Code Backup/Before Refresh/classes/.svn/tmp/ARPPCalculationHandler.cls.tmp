/*
  Revision History:
    Version     Version Author        Date          Comments
    1.0          Anupam Agrawal       09/05/2013     Initial Draft : Create ARRP record after creating Action plan and ET.
*/

public with sharing class ARPPCalculationHandler 
{
	//Method call On After Insert of Approve Action plan object
	public void onAfterInsertForARPPCalculation(Map<Id, Approve_Action_Plan__c> mapNewIdToActionPlan)
	{
		//local variables
		List<ARPP_Detail__c> lstARPPDetail = new List<ARPP_Detail__c>();
		Map<String, List<Approve_Action_Plan__c>> mapItemTypeTolstAAP = new Map<String, List<Approve_Action_Plan__c>>();
		Map<String, Product_Master__c> mapProductNameToPM = new Map<String, Product_Master__c>();
		List<Approve_Action_Plan__c> lstApproveActionPlan = new List<Approve_Action_Plan__c>();
		String strQuery = ' Select Insurance__r.Policy_Type__c, ';
		Map<String, Schema.SObjectField> mapAAPFieldNameToFieldDescribe = Approve_Action_Plan__c.sObjectType.getDescribe().fields.getMap();
		
		//Create Dynamic query
		for(String strField : mapAAPFieldNameToFieldDescribe.keySet())
		{
			strQuery += strField +',';
		}
		strQuery = strQuery.substring(0, strQuery.length() - 1);
		Set<Id>  setAAPId = new Set<Id>();
		setAAPId.addAll(mapNewIdToActionPlan.keySet());
		
		strQuery += ' from Approve_Action_Plan__c where Id IN: setAAPId  ';	
		
		Set<String> setProductName = new Set<String>();
		
		//Execute query and create map of Item type to Action Plan .
 		for(Approve_Action_Plan__c objAAP : Database.query(strQuery))
		{
			//Check ET is opened or Not.
			Boolean isET = objAAP.isSIPexecutionTracker__c || objAAP.isLumpsumExecTracker__c || objAAP.isInsuranceExecutionTracker__c;
			if(isET && objAAP.Item_Type__c != '' && objAAP.Item_Type__c != 'Recmmended Insurance')
			{
				if(!mapItemTypeTolstAAP.containsKey(objAAP.Item_Type__c))
					mapItemTypeTolstAAP.put(objAAP.Item_Type__c, new List<Approve_Action_Plan__c>{objAAP});
				else
					mapItemTypeTolstAAP.get(objAAP.Item_Type__c).add(objAAP);
				
				//Collect all SIP and Lumpsum product Name.	
				if(objAAP.Item_Type__c == 'SIP' || objAAP.Item_Type__c == 'Lumpsum')
					setProductName.add(objAAP.Product_Name__c);
			}
		}
		
<<<<<<< .mine
		//retrieve all Products where Investment type either SIP or Lumpsum 
		List<Product_Master__c> lstSIPorLumpsumPM = [Select (Select Upfront_Commission__c, Trail_Commission__c from Commissions__r where Active__c = true limit 1), 
														Product_Name__c, ProductType__c, Investment_Type__c 
												   	From Product_Master__c where Product_Name__c IN: setProductName and (Investment_Type__c = 'SIP' or Investment_Type__c = 'Lumpsum')];
		//ARPP record on SIP product 
=======
		
		//retrieve all Products where Investment type either SIP or Lumpsum 
		List<Product_Master__c> lstSIPorLumpsumPM = [Select (Select Upfront_Commission__c, Trail_Commission__c from Commissions__r where Active__c = true limit 1), 
														Product_Name__c, ProductType__c, Investment_Type__c 
												   	From Product_Master__c where Product_Name__c IN: setProductName and (Investment_Type__c = 'SIP' or Investment_Type__c = 'Lumpsum')];
		//ARPP record on SIP product 
>>>>>>> .r15043
		if(mapItemTypeTolstAAP.containsKey('SIP'))
		{
			mapProductNameToPM = new Map<String, Product_Master__c>();
			
<<<<<<< .mine
			//Collect SIP product from commen list.
			for(Product_Master__c objPM : lstSIPorLumpsumPM)
				if(objPM.Investment_Type__c == 'SIP')
					mapProductNameToPM.put(objPM.Product_Name__c, objPM);
					
			//Execute SIP Action Plan and create ARPP detail record for each.
=======
			//Collect SIP product from commen list.
			for(Product_Master__c objPM : lstSIPorLumpsumPM)
				if(objPM.Investment_Type__c == 'SIP')
					mapProductNameToPM.put(objPM.Product_Name__c, objPM);
			//Execute SIP Action Plan and create ARPP detail record for each.
>>>>>>> .r15043
			for(Approve_Action_Plan__c objAAP : mapItemTypeTolstAAP.get('SIP'))	
			{
				Product_Master__c objPM = mapProductNameToPM.get(objAAP.Product_Name__c);
				Commission__c objComm = objPM != null && objPM.Commissions__r.size() > 0 ? objPM.Commissions__r[0] : null ;
				ARPP_Detail__c objARPPDetail = new ARPP_Detail__c();
				
<<<<<<< .mine
				//Calcualte Action Plan Trail & Upfront Commission for SIP
=======
>>>>>>> .r15043
				objARPPDetail.Approve_Action_Plan__c = objAAP.Id;
				objARPPDetail.Product__c = objPM != null && objComm != null? objPM.Id : null;
				objARPPDetail.Commission__c = objComm != null? objComm.Id : null;
				objARPPDetail.Entity__c = objAAP.Account__c;
				
				objARPPDetail.Action_Plan_Amount__c = objAAP.Amount__c;
				objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objPM != null && objComm != null ? (objComm.Upfront_Commission__c * 12 * objAAP.Amount__c)/100 : 0;
				Double trailComm = 0;
				Double amount = objAAP.Amount__c;
				Integer installment = objAAP.Installments__c <= 12  ? Integer.valueOf(objAAP.Installments__c) : 12;
				if(objPM != null )
					for(Integer i = 0; i < installment ; i++)
					{
						trailComm += (amount * objComm.Trail_Commission__c)/100;
						amount += objAAP.Amount__c;
					}
				objARPPDetail.Action_Plan_Trial_Comm_Amount__c = trailComm;
<<<<<<< .mine
				
=======
				
				
>>>>>>> .r15043
				objARPPDetail.Type__c = objAAP.Item_Type__c;
				objARPPDetail.Remark__c = (objPM == null ? 'Product Detail is not Found' : (objComm == null ? 'Commission Detail is not found' : ''));
				
				lstARPPDetail.add(objARPPDetail);
				
				objAAP.Product__c = objPM != null ? objPM.Id : null;
				lstApproveActionPlan.add(objAAP);
			}
		}
		
		//Lumpsum Product
		if(mapItemTypeTolstAAP.containsKey('Lumpsum'))
		{									
<<<<<<< .mine
=======
			
>>>>>>> .r15043
			mapProductNameToPM = new Map<String, Product_Master__c>();
			for(Product_Master__c objPM : lstSIPorLumpsumPM)
				if(objPM.Investment_Type__c == 'Lumpsum')
					mapProductNameToPM.put(objPM.Product_Name__c, objPM);
			
			for(Approve_Action_Plan__c objAAP : mapItemTypeTolstAAP.get('Lumpsum'))	
			{
				Product_Master__c objPM = mapProductNameToPM.get(objAAP.Product_Name__c);
				Commission__c objComm =  objPM != null && objPM.Commissions__r.size() > 0 ? objPM.Commissions__r[0] : null ;
				ARPP_Detail__c objARPPDetail = new ARPP_Detail__c();
				
<<<<<<< .mine
				//Calcualte Action Plan Trail & Upfront Commission for Lumpsum
=======
>>>>>>> .r15043
				objARPPDetail.Approve_Action_Plan__c = objAAP.Id;
				objARPPDetail.Product__c = objPM != null ? objPM.Id : null;
				objARPPDetail.Entity__c = objAAP.Account__c;
				objARPPDetail.Commission__c = objComm != null? objComm.Id : null;
				
				objARPPDetail.Action_Plan_Amount__c = objAAP.Amount__c;
				objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objPM != null && objComm != null ? (objComm.Upfront_Commission__c * 12 * objAAP.Amount__c)/100 : 0;
				objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
				
				objARPPDetail.Type__c = objAAP.Item_Type__c;
				objARPPDetail.Remark__c = (objPM == null ? 'Product Detail is not Found' : (objComm == null ? 'Commission Detail is not found' : ''));
				
				lstARPPDetail.add(objARPPDetail);
				
				objAAP.Product__c = objPM != null ? objPM.Id : null;
				lstApproveActionPlan.add(objAAP);
			}
		}
		
		List<Product_Master__c> lstPM = [Select Upfront_Commission__c, Trail_Commission__c, Product_Name__c, ProductType__c, Investment_Type__c, Policy_Type__c,
												(Select Upfront_Commission__c, Trail_Commission__c, Min_Year_Value__c, Max_Year_Value__c from Commissions__r where Active__c = true )
												From Product_Master__c where ProductType__c = 'General Insurance' OR ProductType__c = 'Life Insurance'];
		
		
		//Life Insurance Product
		if(mapItemTypeTolstAAP.containsKey('Life Insurance'))
		{									
			mapProductNameToPM = new Map<String, Product_Master__c>();
			for(Product_Master__c objPM : lstPM)
			{
				if(objPM.ProductType__c == 'Life Insurance')
					mapProductNameToPM.put(objPM.Product_Name__c + '~' + objPM.Policy_Type__c, objPM);
			}
			
<<<<<<< .mine
			for(Approve_Action_Plan__c objAAP : mapItemTypeTolstAAP.get('Life Insurance'))	
			{	
				Product_Master__c objPM = mapProductNameToPM.get(objAAP.Policy_Name__c + '~' + objAAP.Insurance__r.Policy_Type__c);
				List<Commission__c> lstCommission = objPM != null ? objPM.Commissions__r : null;
				Commission__c objComm;
				if(lstCommission != null)
				{
					for(Commission__c comm : lstCommission)
					{
						if(comm.Min_Year_Value__c <= objAAP.Tenure_of_Insurance__c && objAAP.Tenure_of_Insurance__c < comm.Max_Year_Value__c)
						{
							objComm = comm;
							break;
						}
					}
				}
				
				//Calcualte Action Plan Trail & Upfront Commission for Life Insurance
=======
			for(Approve_Action_Plan__c objAAP : mapItemTypeTolstAAP.get('Life Insurance'))	
			{	
				Product_Master__c objPM = mapProductNameToPM.get(objAAP.Policy_Name__c + '~' + objAAP.Insurance__r.Policy_Type__c);
				system.debug('*********objPM'+objPM);
				List<Commission__c> lstCommission = objPM != null ? objPM.Commissions__r : null;
				Commission__c objComm;
				if(lstCommission != null)
				{
					for(Commission__c comm : lstCommission)
					{
						if(comm.Min_Year_Value__c <= objAAP.Tenure_of_Insurance__c && objAAP.Tenure_of_Insurance__c < comm.Max_Year_Value__c)
						{
							objComm = comm;
							break;
						}
					}
				}
				
>>>>>>> .r15043
				ARPP_Detail__c objARPPDetail = new ARPP_Detail__c();
				objARPPDetail.Approve_Action_Plan__c = objAAP.Id;
				objARPPDetail.Product__c = objPM != null ? objPM.Id : null;
				objARPPDetail.Commission__c = objComm != null? objComm.Id : null;
				objARPPDetail.Entity__c = objAAP.Account__c;
				
				objARPPDetail.Action_Plan_Amount__c = objAAP.Sum_Assured_Rs__c;
				objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objPM != null && objComm != null ?(objAAP.Sum_Assured_Rs__c != null ?(objComm.Upfront_Commission__c * objAAP.Sum_Assured_Rs__c)/100 : 0) : 0;
				objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
				
				objARPPDetail.Type__c = objAAP.Item_Type__c;
				objARPPDetail.Remark__c = (objPM == null ? 'Product Detail is not Found' : (objComm == null ? 'Commission Detail is not found' : ''));
				
				lstARPPDetail.add(objARPPDetail);
				
				objAAP.Product__c = objPM != null ? objPM.Id : null;
				lstApproveActionPlan.add(objAAP);
			}
		}
		
<<<<<<< .mine
		//General Insurance Product
		if(mapItemTypeTolstAAP.containsKey('General Insurance'))
=======
		
		
		//General Insurance Product
		if(mapItemTypeTolstAAP.containsKey('General Insurance'))
>>>>>>> .r15043
		{									
			mapProductNameToPM = new Map<String, Product_Master__c>();
			for(Product_Master__c objPM : lstPM)
			{
				if(objPM.ProductType__c == 'General Insurance')
					mapProductNameToPM.put(objPM.Product_Name__c + '~' + objPM.Policy_Type__c, objPM);
			}
			
<<<<<<< .mine
			//Calcualte Action Plan Trail & Upfront Commission
			for(Approve_Action_Plan__c objAAP : mapItemTypeTolstAAP.get('General Insurance'))	
			{
				Product_Master__c objPM = mapProductNameToPM.get(objAAP.Product_Name__c + '~' + objAAP.Policy_Type__c);
				Commission__c objComm =  objPM != null && objPM.Commissions__r.size() > 0 ? objPM.Commissions__r[0] : null ;
				ARPP_Detail__c objARPPDetail = new ARPP_Detail__c();
=======
			for(Approve_Action_Plan__c objAAP : mapItemTypeTolstAAP.get('General Insurance'))	
			{
				Product_Master__c objPM = mapProductNameToPM.get(objAAP.Product_Name__c + '~' + objAAP.Policy_Type__c);
				Commission__c objComm =  objPM != null && objPM.Commissions__r.size() > 0 ? objPM.Commissions__r[0] : null ;
				ARPP_Detail__c objARPPDetail = new ARPP_Detail__c();
>>>>>>> .r15043
				
				objARPPDetail.Approve_Action_Plan__c = objAAP.Id;
				objARPPDetail.Product__c = objPM != null ? objPM.Id : null;
				objARPPDetail.Entity__c = objAAP.Account__c;
				objARPPDetail.Commission__c = objComm != null? objComm.Id : null;
				
				objARPPDetail.Action_Plan_Amount__c = objAAP.Sum_Assured_Rs__c ;
				objARPPDetail.Action_Plan_Upfront_Comm_Amount__c = objPM != null && objComm != null ? (objAAP.Sum_Assured_Rs__c  != null ?(objComm.Upfront_Commission__c * objAAP.Sum_Assured_Rs__c )/100 : 0) : 0;
				objARPPDetail.Action_Plan_Trial_Comm_Amount__c = 0;
				
				objARPPDetail.Type__c = objAAP.Item_Type__c;
				objARPPDetail.Remark__c = (objPM == null ? 'Product Detail is not Found' : (objComm == null ? 'Commission Detail is not found' : ''));
				
				lstARPPDetail.add(objARPPDetail);
				
				objAAP.Product__c = objPM != null ? objPM.Id : null;
				lstApproveActionPlan.add(objAAP);
			}
		}
<<<<<<< .mine
		
		//Insert Arpp Detail Record
=======
		
		
>>>>>>> .r15043
		if(!lstARPPDetail.isEmpty())
			insert lstARPPDetail;
		
		//Update Action Plan Record	
		if(!lstApproveActionPlan.isEmpty())
			update lstApproveActionPlan;
		
	}
	
	//Delete ARPP Detail record related to Approve Action Plan 
	public void onBeforeDeleteForARPPCalculation(Map<Id, Approve_Action_Plan__c> mapOldIdToActionPlan)
	{
		List<ARPP_Detail__c> lstARPPDetail = [Select Id from ARPP_Detail__c where Approve_Action_Plan__c IN : mapOldIdToActionPlan.keySet()];
		if(!lstARPPDetail.isEmpty())
			delete lstARPPDetail;
	}
	
	//Method call from Execution tracker Trigger to calculate ARPP for Executed Amount.
	public void onAfterInsertAndUpdateForARPPCalculation(Map<Id, Execution_Tracker__c> mapNewIdToET)
	{
		List<Execution_Tracker__c> lstET = new List<Execution_Tracker__c>();
		Set<Id> setAPId = new Set<Id>();
		Map<Id, ARPP_Detail__c> mapAPIdToARPPDetail = new Map<Id, ARPP_Detail__c>();
		List<ARPP_Detail__c> lstUpdateARPPDetail = new List<ARPP_Detail__c>();
		
		//Collect Approve Action plan Id and Execution Tracker record
		for(Execution_Tracker__c objET : mapNewIdToET.values())
		{
			if(objET.ParentExecutionTracker__c == null)
			{
				lstET.add(objET);
				setAPId.add(objET.Approve_Action_Plan__c);
			}
		}
		
		List<ARPP_Detail__c> lstARPPDetail = [Select  Product__r.Policy_Type__c, Product__r.Investment_Type__c, 
							          			Product__r.Product_Manufacturer__c,
										        Commission__r.Upfront_Commission__c, Commission__r.Trail_Commission__c, 
										        Product__r.ProductType__c, 
										        Product__r.Product_Name__c, Product__c, Name, Id, 
										        Execution_Tracker_upfront_Comm_Amount__c, 
										        Entity__c, Entity__r.Name, Approve_Action_Plan__c, Approve_Action_Plan__r.Item_Type__c, Action_Plan_Upfront_Comm_Amount__c, 
										        Action_Plan_Trial_Comm_Amount__c, Action_Plan_Amount__c, Type__c,
										        Approve_Action_Plan__r.Installments__c
      											From ARPP_Detail__c Where Approve_Action_Plan__c IN: setAPId];	
      											
      	//Create Map Approve Action Plan to ARPP Detail											
		for(ARPP_Detail__c objAD : lstARPPDetail )
		{
			mapAPIdToARPPDetail.put(objAD.Approve_Action_Plan__c , objAD);
		} 
		
		for(Execution_Tracker__c objET : lstET)
		{
			//Calcualte Execution Tracker trail Commission
			ARPP_Detail__c objARPPDetail = mapAPIdToARPPDetail.get(objET.Approve_Action_Plan__c);
			if(objARPPDetail != null)
			{
				if(objARPPDetail.Type__c == 'SIP')
				{
					objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objARPPDetail.Product__c != null && objARPPDetail.Commission__r != null? (objARPPDetail.Commission__r.Upfront_Commission__c * 12 * objET.Agreed_Amount__c)/100 : 0;
					Double trailComm = 0;
					Double amount = objET.Agreed_Amount__c;
					Integer installment = objARPPDetail.Approve_Action_Plan__r.Installments__c <= 12  ? Integer.valueOf(objARPPDetail.Approve_Action_Plan__r.Installments__c) : 12;
					
					if(objARPPDetail.Product__c != null && objARPPDetail.Commission__r != null)
					{
						for(Integer i = 0; i < installment ; i++)
						{
							trailComm += (amount * objARPPDetail.Commission__r.Trail_Commission__c)/100;
							amount += objET.Agreed_Amount__c;
						}
					}
					
					objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = trailComm;
				}
				else if(objARPPDetail.Type__c == 'Lumpsum')
				{
					objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objARPPDetail.Product__c != null  && objARPPDetail.Commission__r != null ? (objARPPDetail.Commission__r.Upfront_Commission__c * 12 * objET.Agreed_Amount__c)/100 : 0;
					objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
				}
				else if(objARPPDetail.Type__c == 'Life Insurance' || objARPPDetail.Type__c == 'General Insurance')
				{
					objARPPDetail.Execution_Tracker_upfront_Comm_Amount__c = objARPPDetail.Product__c != null  && objARPPDetail.Commission__r != null ? (objARPPDetail.Commission__r.Upfront_Commission__c * objET.Agreed_Amount__c)/100 : 0;
					objARPPDetail.Execution_Tracker_Trial_Comm_Amount__c = 0;
				}
				
				objARPPDetail.Execution_Tracker_Amount__c = objET.Agreed_Amount__c;
				objARPPDetail.Execution_Tracker__c = objET.Id;			
				lstUpdateARPPDetail.add(objARPPDetail);
			}
		}
		
		//Update ARPP Detail Record
		if(!lstUpdateARPPDetail.isEmpty())
		{
			update lstUpdateARPPDetail;
		}
	}
}