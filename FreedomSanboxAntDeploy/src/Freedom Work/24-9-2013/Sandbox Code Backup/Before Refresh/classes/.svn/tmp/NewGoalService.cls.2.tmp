/*
    This class is holding key logic to perform various calculation on goal page.
    It is doing SIP calculation and storing SIP and Goal FV and PV data in system for further use.
    
    /*
        
       Revision History:
       
    Version     Version Author     Date            Comments
    1.0         --                   --             Initial Draft
    2.0      Niket Chandane  2/06/2011        Issue ID:F0010: Addded the New function With Name :  public Decimal setGoalMappingBeanInflationRate(List<Goal__c> lstgoal)
                                                    function accepts the Goal list and checks whether the Inflation_Rate__c is Null or Not 
                                                    If Null it gets the Inflation_Rate__c from the Global assumption for that entity and set's in the 
                                                    GoalMappingBean class Property "GlobalAssumptionInflationRate". 
                                                    this GlobalAssumptionInflationRate property of the GoalMapping Bean is used on the "GoalComponentController"
                                                    Which is reflates on the generatePDF page.
                                                                               
   2.0      Niket Chandane  3/06/2011        Update the Method getGoalDetailsForOutput() Added If Condition if Cost_Goal_Annual == Null then go for next Goal do not calculate any thing for that goal.
   2.0          Niket Chandane  23/06/2011       Update the Method "applyAllocatedAssetsOnGoalAmount" Added the filter to identify the record type of the 
                                                    Asset allocated to the Goal.
                                                    Issue : FS0008
   
   2.0          Manasi Ranade   2/08/2011           1)Issue Id:FS0040 : Changed getPmtAmount function
                                                                        Checked the futureValue  and futureValueActual value before division         
   
   2.0          Manasi Ranade   2/08/2011           Issue Id:FS0110 :Class NewGoalService : 
                             1)  Changed getAssociatedAssets function
                                                      If RecordType is : 'Deposits With Bank' then consider the interest rate of current deposit  
                                                        else fetch it from CalculatedInterestRate__c
                                                    2)  Commented following code because if we will enter interest rate as 8% then it will become 800 for Fixed Deposit
   2.0          Manasi Ranade   23/08/2011          Issue Id:FS0117 :
                                                    1.   Commented code from applyAllocatedAssetsOnGoalAmount finction.Because Action6 will work as Action3.
                                                      So no need of Action6 now.
                                                    2.   Change in function :
                                                      As per the discussion with Haren, Action 3 and Action 6 should work same.
                                                    So added || condition for Action6
   2.0          Manasi Ranade   22/08/2011          Issue Id :FS0118 : Change in function :applyAllocatedAssetsOnGoalAmount
                                                                      Code to calculate maturity amount of insurance.
                                                                                  
   2.0          Manasi Ranade   27/9/2011           Issue Id :FS0164 :   a. Created new function : getAssociatedInvestmentAssetsseparately: Function to fetch each Allocated Investment Asset 
                                                                           Saperately.And calculate the allocated amount,Maturity Year
                                                                        b. Change in function applyAllocatedAssetsOnGoalAmount: Fetch the maturity amount from goalMappingBean object
                                                                        c. Change in function getGoalDetailsForOutput,getGoalDetails:Code to fetch the Investment Assets 
                                                                                     separately (Previous code is commented, as it was returning the aggreegate result)
   2.0      Manasi Ranade   27/9/2011           Issue Id :FS0165 :   a. Change in function : getAssociatedInsuranceAssets: Added code Code to calculate the current amount 
                                                                        of Insurance at current time
   2.0      Manasi Ranade   26/9/2011           Issue Id :FS0166 :   a. Change in function applyAllocatedAssetsOnGoalAmount: For Mutual Fund, 'Hold Align to Goal'
                                                                        and 'Liquidate Align To Goal' should work in same manner.
                                                                        So if selected action is Hold Align to Goal then dont execute the following code.
                                                                        It should execute the Liquidate Align To Goal related code
   2.0          Manasi Ranade   26/9/2011           Issue Id :FS0183 :   Change in function: getAssociatedInsuranceAssets
                                                                        Added code to assign default value to Insurance's asset value.
   2.0          Manasi Ranade   11/10/2011          Issue Id :FS0185 :  Change in function: populateSIPCalculation:
                                                                        Added PV value of the retirement year
   2.0          Manasi Ranade   11/10/2011          Issue Id :FS0191 :   Change in function: getAssociatedInvestmentAssetsseparately:
                                                                        Fetched Goal Year value to display it on Goal OutPut Page
                                12/10/2011      Change in function:  getAssociatedAssets
                                                                        Assigned growthRate to Interest rate to fetch it on Goal Output page
                                                                        Change in function :getAssociatedInvestmentAssetsExceptFixedIncome
                                                                        Fetched growth rate to display it on Goal Output page
   2.0          Manasi Ranade   13/10/2011          Issue Id :FS0194 :  Added property to stote the actual targetAmount amount
   2.0          Manasi Ranade   13/10/2011          Issue Id :FS0305 :  Change in function : applyAllocatedAssetsOnGoalAmount : Fetch the Growth rate in anual contribution for current asset,
                                                                        Change in function : getAssociatedAssets : Assgin default growth rate as zero if it is null
   2.0          Manasi Ranade   06/12/2011          1)Issue Id:FS0337 : Created new Function: calculateUpdatedRemainingAmount() :
                                                                        Function calculates the new remaining amount by increasing it by 8%
   2.0          Manasi Ranade   7/12/2011           1)Issue Id:FS0340 : Added Goal Id parameter in ClearSipBeanList function
   2.0          Manasi Ranade   9/12/2011           Issue Id : FS0344 : When Insurance policies are allocated, the same does not reflect on the output page: 
                                                                        The problem was because of Insurance Map Which was not filled before using getAssociatedInsuranceAssets() function
   2.0          Manasi Ranade   14/12/2011          Issue Id:FS0349 :   Add check here from GoalController.Change in function: populateSIPCalculation 
   2.0          Manasi Ranade   9/1/2012            Issue Id:FS0403 :  1. Function : GetGoalDetails : Commented new logic related to Liquidate Align to Goal
                                                                        2. Function : applyAllocatedAssetsOnGoalAmount : Uncommented the old code related to liquidate Align To Goal
   2.0          Manasi Ranade  9/1/2012      Issue Id:FS0420 :   Checked whether defaultYearsList is filled or not
                                                                        And added Error Msg : Goal Start Year should not be less than or equal to Current Year
   2.0           Dipak Nikam     21/2/2012                     maturity value will grow as per the goal profile in  Progressive Asset Allocation from the  Maturity year to goal Year.
                                                                        Changed goalInvestmentAssetLinkObj.Investment_Asset__r.TotalAsset__c to Maturity_Value__c.
   2.0           Manasi Ranade   6/3/2012            Issue id : 00001535 : Change in function : getAssociatedAssets,applyAllocatedAssetsOnGoalAmount:
                                                                        1. If EndYear is given for the Asset, then consider it for calculation.
                                                                        2. For the case Hold Align to Gaol,
                                                                          Asset will grow upto the given end year by its expected growth rate. After that asset will grow progressively.
   2.0      Manasi Ranade   6/3/2012            Issue id : 00001536 : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                                                                          It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1
   2.0      Manasi Ranade   15/03/2012          Issue id : 00001552 : change in function : applyAllocatedAssetsOnGoalAmount:
                                                                          Previously First parameter for calculateCompound was Maturity amount.Changed it to Allocated amount
   2.0      Manasi Ranade   15/03/2012          Issue id : 00001610 : Created New Function : PrintSequence :
                                                                          Function to print the Goal Year and Related sequence of allocation
   2.0      Manasi Ranade   07/05/2012          Issue id : 00001619 : Created and Used OriginalGoalSipAmountMap Map to compare current and old SIP values
   2.0      Manasi Ranade   8/5/2012            Issue id : 00001622 : Commented following part.
                                                                No need to overwrite the value of goalAssetMappingBean.allocatedAmount
                                                                It is set in function getAssociatedInsuranceAssets 
   2.0           Mahesh Hirugade  9/5/2012      Issue id : 00001614 : Added newDescription to populateGoalAseetMapping() to show description on GoalOutputPage
   2.0           Mahesh Hirugade  31/5/2012      Issue id : 00001663 : Function : applyAllocatedAssetsOnGoalAmount: 
                             For Action1 calculate the maturity amount and then apply progressive Rate.
   2.0           Manasi Ranade  10/8/2012      Issue id : 00001727
   3.0      Prajakta Sanap  28/8/2013      FP enhancement      Added FIDescription populateGoalAseetMapping() to show description on GoalOutputPage for Fixed Income
                                         Added Maturity Value for Assets in populateGoalAseetMapping() and for others it will be default zero.
   3.0      Prajakta Sanap    01/04/2013      FP enhancement      Added Gold Growth Rate for the new record type Gold in Investment Asset                                           
*/

public class NewGoalService 
{
  /** Eternus Solutions      **/
    /** Author  : Manasi Ranade*/
    /** Issue Id: FS0194      **/
    /** Date    : 13/10/2011 **/
    /** Purpose : Stored the actual targetAmount amount**/
    public Double FutureTotalAmount{get;set;}
    
    //Fs0400 Commented following as not used in the code
    //public Double dblAnnualContribution{get;set;}
    //public Double dblAnnualExpextedgrowthRate{get;set;}
    
    public DatabaseSOQL databaseSOQLObj {get; set;}
    public DatabaseDML databaseDMLObj {get; set;}
    public Double retirementFutureValuesWithoutAllocation {get;set;}
    public Boolean isFirstLoad {get;set;}
    public String allocationMessage = '';    /* Prajakta - FP changes - 22-03-2013 */
    public Double maturityValue{get;set;}     /* Prajakta - FP changes - 26-03-2013 */
 	public Account objAccount{get;set;}		/* Prajakta - FP changes - 12-04-2013 */
    public String entityId {get;set;}		/* Prajakta - FP changes - 12-04-2013 */ 
    public Double FutureTotalAmount{get;set;} /** Manasi Ranade - FS0194 - 13/10/2011 - Stored the actual targetAmount amount  **/
    /** Eternus Solutions   **/
    /** Author  : Manasi Ranade - FS0118 - 22/08/2011 **/
    /** Purpose : Code to calculate maturity amount of insurance.
    /****************************************************/
    //100
    public Map<Id,Insurance__c> insuranceMap = new Map<Id,Insurance__c>();
    
    //Map to fetch related Investment Assets 
    public Map<Id,Investment_Asset__c> investmentAssetMap = new Map<Id,Investment_Asset__c>();
    
    private Map<String,GoalMappingBean> goalMappingBeanMapByGoalId = new Map<String,GoalMappingBean>();
    private List<SelectOption> goalProfilePickList;
    private Map<ID,Goal_Profile__c> goalProfileMap = new Map<ID,Goal_Profile__c>();
    private Map<String,Goal_Profile__c> goalProfileMapByName = new Map<String,Goal_Profile__c>();
    private Entity_Global_Assumption__c globalAssumptions;
    private List<Decimal> rateList ;
    private List<Goal_Profile__c> goalProfileList;
<<<<<<< .mine
    
=======
    public Double retirementFutureValuesWithoutAllocation {get;set;}
    public Boolean isFirstLoad {get;set;}
    public String allocationMessage = '';    /* Prajakta - FP changes - 22-03-2013 */
    public Double maturityValue{get;set;}     /* Prajakta - FP changes - 26-03-2013 */
	public Integer currentYearnew{get;set;}	/* Prajakta - FP changes - 30-04-2013 */
	public Account objAccount{get;set;}		/* Prajakta - FP changes - 12-04-2013 */
    public String entityId {get;set;}		/* Prajakta - FP changes - 12-04-2013 */ 
	
>>>>>>> .r14313
    
    //private Integer retirementYear;
    public NewGoalService()
    {
    	System.debug('Inside the NewGoalService');
      	retirementFutureValuesWithoutAllocation = 0;
        databaseSOQLObj = new DatabaseSOQL();
        databaseDMLObj = new DatabaseDML();   
       // MapOrderToAllocatiotion = new Map<Integer,String>();  
        isFirstLoad = true;
        
        /* Prajakta - FP changes - 12-04-2013 */
<<<<<<< .mine
        Integer currentYearnew;
=======
        //Integer currentYearnew;
>>>>>>> .r14313
        entityId = System.currentPageReference().getParameters().get('entityId');
<<<<<<< .mine
        objAccount = databaseSOQLObj.getEntity(entityId);
        if(objAccount.Plan_Generation_Date__c != null) 
        	currentYearnew = objAccount.Plan_Generation_Date__c.year();
        else
        	currentYearnew = System.today().year();	
        
=======
        objAccount = databaseSOQLObj.getEntity(entityId);
        if(objAccount.Plan_Generation_Date__c != null) 
        	currentYearnew = objAccount.Plan_Generation_Date__c.year();
        else
        	currentYearnew = System.today().year();
>>>>>>> .r14313
    }
<<<<<<< .mine
=======
    /** Eternus Solutions   **/
    /** Author  : Manasi Ranade - FS0118 - 22/08/2011 **/
    /** Purpose : Code to calculate maturity amount of insurance.
    /****************************************************/
    //100
    Public Map<Id,Insurance__c> insuranceMap = new Map<Id,Insurance__c>();
>>>>>>> .r14313
    
    
    private void setInfoMessage(String str) 
    {
          ApexPages.addMessage(new ApexPages.Message(ApexPages.severity.INFO,str));                                                                                                                               
    }
    
    /** 
        This method will create Goal profile Picklist to display profiles on Goal Page.
    **/
    private void getProfilePickList(String entityId) 
    {              
        List<Goal_Profile__c> goalProfileList;
        String profileName;        
        try 
        {            
          //Fetch the profile name from database object  
          goalProfilePickList = new List<SelectOption>();
            goalProfileList = databaseSOQLObj.getStdGoalProfileList();
            
            //Add Custom profile Name
            goalProfileList.addAll(databaseSOQLObj.getCustomGoalProfileList(entityId));
               
            Account objAcc = [select Id, Name, Related_To__c, Virtual_Partner__c, OwnerId from Account where Id = :  entityId];
          
         Account FfreedomAcc = new Account();
        Account BusinessAcc = new Account();
         Account VirtualAcc = new Account();
         
         List<Account> lstVirtualAcc = new List<Account>();
         double Equity,Debt,Gold;
         double ReturnExpected;
       
         if(objAcc.Related_To__c == 'Ffreedom')
        {
           FfreedomAcc = [select id,Expected_Return_on_Investment__c,Equity__c,Gold__c,Debt__c,Income_Growth_Rate__c,Inflation_Rate__c,
                       Gold_Growth_Rate__c,     /* Prajakta - FP changes - 01-04-2013 */
                       Default_Estimated_Life_Expectancy__c,Number_Of_Months__c,Stock_Growth_Rate__c,Default_Retirement_Age__c 
                   from Account 
                   where Related_To__c = 'Ffreedom' 
                   and RecordTypeId =: RecTypes__c.getInstance('General_Business').Record_Type_Value__c 
                   limit 1];
           Equity = FfreedomAcc.Equity__c;
           Debt = FfreedomAcc.Debt__c;
           Gold = FfreedomAcc.Gold__c;
        }
        else if(objAcc.Related_To__c == 'Business Partner')
        {
           map<id,User> mapUser = new map<id,User>([select Id,Name,ProfileId,ContactId,Profile.Name from User]);
           map<id,Contact> mapContact = new map<id,Contact>([select id,AccountId from Contact]);
           map<id,Account> BusinessAccMap = new map<id,Account>
                            ([select id,Expected_Return_on_Investment__c,Equity__c,Gold__c,Debt__c,Income_Growth_Rate__c,Inflation_Rate__c,
                                Gold_Growth_Rate__c,     /* Prajakta - FP changes - 01-04-2013 */
                                   Default_Estimated_Life_Expectancy__c,Number_Of_Months__c,Stock_Growth_Rate__c,Default_Retirement_Age__c 
                               from Account 
                               where Related_To__c = 'Business Partner' 
                               and RecordTypeId =: RecTypes__c.getInstance('General_Business').Record_Type_Value__c 
                                 ]);
           Account objBusinessAcc = new Account();
           User objUser = new User();
           Contact objContact = new Contact();
             
           if(mapUser.containsKey(objAcc.OwnerId)) 
           { 
             objUser = mapUser.get(objAcc.OwnerId);
             if(objUser != Null)
             {
            if(mapContact.containsKey(objUser.ContactId))
            {  
              objContact = mapContact.get(objUser.ContactId);
              if(objContact != Null)
              {
                if(BusinessAccMap.ContainsKey(objContact.AccountId))
                {
                  objBusinessAcc = BusinessAccMap.get(objContact.AccountId);
                  if(objBusinessAcc != null)
                  {
                    Equity = objBusinessAcc.Equity__c;
                       Debt = objBusinessAcc.Debt__c;
                       Gold = objBusinessAcc.Gold__c;           
                  }
                } 
              }
            }
             }
           }
        }
           
        else if(objAcc.Related_To__c == 'Virtual Partner')
        {
            map<Id,Account> virtualAccMap = new map<Id,Account> 
                               ([select id,Expected_Return_on_Investment__c,Equity__c,Gold__c,Debt__c,Income_Growth_Rate__c,Inflation_Rate__c,
                                   Gold_Growth_Rate__c,     /* Prajakta - FP changes - 01-04-2013 */
                                   Default_Estimated_Life_Expectancy__c,Number_Of_Months__c,Stock_Growth_Rate__c,Default_Retirement_Age__c 
                               from Account 
                               where Related_To__c = 'Virtual Partner' 
                               and RecordTypeId =: RecTypes__c.getInstance('General_Business').Record_Type_Value__c]);
           Account objVirtualAcc = new Account();        
            if(virtualAccMap.containsKey(objAcc.Virtual_Partner__c))
             {
          objVirtualAcc = virtualAccMap.get(objAcc.Virtual_Partner__c);
          if(objVirtualAcc != null)
          {
             Equity = objVirtualAcc.Equity__c;
                Debt = objVirtualAcc.Debt__c;
                Gold = objVirtualAcc.Gold__c;    
          }
             }
        }
           
           for(Goal_Profile__c goalProfile : goalProfileList) 
           {
               profileName = goalProfile.Name;
               if('Customized'.equalsIgnoreCase(goalProfile.Goal_Profile_Type__c))
               {
                   profileName = profileName + ' (Customized)';
               }
               goalProfilePickList.add(new SelectOption(goalProfile.id, profileName));             
               goalProfileMap.put(goalProfile.id, goalProfile);
               goalProfileMapByName.put(profileName, goalProfile);
               
               ReturnExpected = ((goalProfile.Equity_Allocation__c * Equity) + (goalProfile.Debt_Allocation__c * Debt) + (goalProfile.Gold_allocation__c * Gold)) /100;
         goalProfile.Returns_expected__c = ReturnExpected;
           }
        }
        catch(Exception ex) 
        {
              throw new GeneralException('NewGoalService.getProfilePickList : Internal Error ' + ex.getMessage());    
        }               
    }
    
    /**
        This method will apply Logic to decide Future value and apply assets to achieve Goal.
    **/
    /*Niket*/
    public Map<String,GoalMappingBean> getGoalDetails(List<String> goalIdList,String entityId) 
    {
      List<Goal__c> goalObjList = new List<Goal__c>();
      system.debug('-------------in map getGoalDetails----------'+goalObjList);
    // Initialised local variabels starts 
        Goal_Profile__c currentGoalProfile,startingGoalProfile;            
        Double targetAmountActual, targetAmount, futureValue = 0, presentValue = 0 ;
        Double futureValueActual, presentValueActual;
        Double inflationRate =6 , goalCurrentAmount, goalPV = 0, goalPVActual, rate;
        
<<<<<<< .mine
        //FS0400 - Double inflationRate =6 ,goalCurrentAmount, goalPV = 0,goalPVActual,rate;
        Integer endYear, startYear; 
        Integer goalFrequency=0, retirementYear; 
=======
        //FS0400
        //Double inflationRate =6 ,goalCurrentAmount, goalPV = 0,goalPVActual,rate;
        Integer endYear, startYear;
        //currentYear = Date.today().year(); //2014; /*Praj*/ 
        Integer goalFrequency=0, retirementYear; 
>>>>>>> .r14313
        String savingType,currentGoalProfileName;
        
        Double[] pmtAmount;
        
        Map<Integer, GoalMappingBean.GoalFinancialDataBean> goalFinancialDataBeanMapByYear;
        Map<Integer, Decimal> rateMap;
        
        GoalMappingBean.GoalDetailBean detailBean;
        
        GoalMappingBean.GoalFinancialDataBean goalFinancialDataBean;                        
        GoalMappingBean goalMappingBean;
        
        // Initialised local variabels ends
        /** Eternus Solutions   **/
        /** Author  : Manasi Ranade - FS0118 - 22/08/2011 **/
        /** Purpose : Code to calculate maturity amount of insurance.
        /****************************************************/
      insuranceMap = databaseSOQLObj.getInsuranceDetails(entityId);
       System.debug('-----------------------------> 3 ---');
      //Get all details of investment asset of selected entity
      investmentAssetMap = databaseSOQLObj.getInvestmentAssetDetails(entityId);
      System.debug('-----------------------------> 4 ---');
        
        try 
        {
          globalAssumptions = databaseSOQLObj.getEntityGlobalAssumption(entityId);
          
            //FS0400
            inflationRate = ((globalAssumptions != null) ? globalAssumptions.Inflation_Rate__c : 6);
            
            /*if(globalAssumptions != null) {
               inflationRate = globalAssumptions.Inflation_Rate__c;
            }*/
            goalObjList = databaseSOQLObj.getGoal(goalIdList);
            
            system.debug('---------------goalObjList-------------in goaldetails**'+goalObjList);
            
            getProfilePickList(entityId);
               
            for(Goal__c goalObj : goalObjList) 
            {
              	/* Prajakta - FP changes - 12-04-2013 */
              	Integer sipStartYear;
              	if(goalObj.SIP_Start_Year__c != null)
	              	sipStartYear = Integer.valueOf(goalObj.SIP_Start_Year__c);
              	else
              		sipStartYear = system.today().year();
              	
              	if((goalObj.Goal_End_Year__c == null) ||(goalObj.Goal_Start_Year__c == null)) 
                  continue;
                  
                //FS0400
                //endYear = Integer.valueof(goalObj.Goal_End_Year__c.trim());
                //startYear = Integer.valueof(goalObj.Goal_Start_Year__c.trim());
                retirementYear = ((goalObj.Entity__r.Retirement_Age__c != null )&& (goalObj.Entity__r.PersonBirthdate != null)
                                        ? goalObj.Entity__r.PersonBirthdate.addYears(Integer.valueOf(goalObj.Entity__r.Retirement_Age__c)).year()
                                        : null );
                //FS0400
                //Prev //goalMappingBean = new GoalMappingBean(goalObj.id,startYear,retirementYear,endYear);
              goalMappingBean = new GoalMappingBean(goalObj.id, Integer.valueof(goalObj.Goal_Start_Year__c.trim()), retirementYear, 
                                  Integer.valueof(goalObj.Goal_End_Year__c.trim()),sipStartYear);                
              goalMappingBean.goalObj = goalObj;
              goalMappingBean.goalProfileList = goalProfilePickList;
              goalMappingBeanMapByGoalId.put(goalObj.id , goalMappingBean);
              
              //TODO: Eternus
              //goalMappingBean.setSIPObjects(databaseSOQLObj.getSIPAmountList(goalObj.id));                   
            }
            
            /* get All Asset details for this goal */
            getAssociatedAssets(goalIdList, entityId);
               
            //Commented by Manasi: Created new method :getAssociatedInvestmentAssetsseparately
            /** Eternus Solutions       **/
            /** Author  : Manasi Ranade - FS0164 - 27/9/2011 **/
            /** Purpose : Code to fetch the Investment Assets separately (Previous code is commented, as it was returning the aggreegate result) 
            /****************************************************/
            getAssociatedInvestmentAssetsExceptFixedIncome(goalIdList,entityId);
            getAssociatedInvestmentAssetsseparately(goalIdList,entityId);
            getAssociatedInsuranceAssets(goalIdList,entityId);
               
            for(Goal__c goalObj : goalObjList) 
            {
              if((goalObj.Goal_End_Year__c== null) ||(goalObj.Goal_Start_Year__c == null))
                  continue;
                   
              inflationRate = (goalObj.Inflation_Rate__c != null ? goalObj.Inflation_Rate__c :inflationRate);
                
<<<<<<< .mine
              /* Prajakta - FP changes - 12-04-2013 */
              Integer currentYear = goalObj.SIP_Start_Year__c != null ? Integer.valueOf(goalObj.SIP_Start_Year__c) :system.today().year();
              
=======
                /* Prajakta - FP changes - 12-04-2013 */
              Integer currentYear = goalObj.SIP_Start_Year__c != null ? Integer.valueOf(goalObj.SIP_Start_Year__c) :system.today().year();   
                   
>>>>>>> .r14313
                if((goalObj.SelectedGoalProfile__c != null) && (goalObj.Saving_type__c != null)) 
                {
                  goalMappingBean = goalMappingBeanMapByGoalId.get(goalObj.id);
                    endYear = Integer.valueof(goalObj.Goal_End_Year__c.trim());
                    startYear = Integer.valueof(goalObj.Goal_Start_Year__c.trim());
                    savingType = goalObj.Saving_type__c;
                       
                    // This MAP is needed to calculate PV value   
                    goalFinancialDataBeanMapByYear = new Map<Integer,GoalMappingBean.GoalFinancialDataBean>();
                    startingGoalProfile = goalProfileMap.get(goalObj.SelectedGoalProfile__c);
<<<<<<< .mine
                    
                    getGoalProfileList(currentYear, endYear, goalObj, startingGoalProfile, savingType); /*Praj - PGD year*/
=======
                    getGoalProfileList(currentYear, endYear, goalObj, startingGoalProfile, savingType);
>>>>>>> .r14313
                    
                    // Pending problem with Goal Freequence
                    goalFrequency = Integer.valueOf(String.valueOf(((goalObj.goal_Frequency__c == NULL) || (goalObj.Goal_Frequency__c <= 0) ? 1 : goalObj.Goal_Frequency__c)).trim());
                       
                    /*This for loop Generates the Total Amount of the goal on the Goal Calculator Page*/
                    /*
                        Actual Goal calculation starts form this loop.
                        This calculation is shown on the respective goal.
                    */
                    isAssetAllocationStartYear = true;
                    for(Integer goalYear =  startYear; goalYear <= endYear; goalYear += goalFrequency)
                    {
                        goalCurrentAmount = Double.valueOf(String.valueOf(goalObj.Cost_of_Goal_Annual__c).trim());
                            
                        /*"targetAmountActual" calculates only goal compound value with
                        respective to Inflation rate */
<<<<<<< .mine
                        //Original Code 
=======
                        //Original Code
>>>>>>> .r14313
                        
                        //System.today().year();/*Praj - As to calculate target amount, current year is required*/
                        Integer currentYearPlan;
                        if(objAccount.Plan_Generation_Date__c != null)
                        	currentYearPlan = objAccount.Plan_Generation_Date__c.year();
                        else
                        	currentYearPlan = System.today().year();
                        targetAmountActual = targetAmount =  FinancialUtil.calculateCompound(goalCurrentAmount, goalYear - currentYearPlan, inflationRate);
                           
                        /** Eternus Solutions      **/
                       /** Author  : Manasi Ranade*/
                       /** Issue Id: FS0194      **/
                       /** Date    : 13/10/2011 **/
                       /** Purpose : Stored the actual targetAmount amount**/
                        if(goalYear == startYear)
                        {
                          FutureTotalAmount = targetAmountActual;
                        }
                        //targetAmountActual = targetAmount =  calculateCompound(goalCurrentAmount, goalYear - currentYear, inflationRate);
                        /** Eternus Solutions       **/
                       /** Author  : Manasi Ranade **/
                       /** Issue Id: 00001536     **/
                       /** Date    : 6/3/2012           **/
                       /** Purpose : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                                              It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1
                       /****************************************************/
<<<<<<< .mine
                       		/*Praj - make it currentYear1 - As to calculate target amount, current year is required*/
=======
                           /*Praj - make it currentYear1 - As to calculate target amount, current year is required*/
>>>>>>> .r14313
                         targetAmount = applyAllocatedAssetsOnGoalAmount(goalMappingBean, startingGoalProfile, targetAmount, currentYearPlan, goalYear, savingType, goalFrequency);
                         //error.debugLog('-------targetAmount --------> '+targetAmount+'-'+currentYear+'-'+goalYear);
                           //Manasi:5DEC
                         if(targetAmount > 0) 
                         { 
                             detailBean = goalMappingBean.populateGoalDetailBeanList(currentYear,goalYear,targetAmount,targetAmountActual,true);
                             pmtAmount = getPmtAmount(targetAmount,targetAmountActual,currentYear ,goalMappingBean.retirementYear ,goalYear,savingType);
                             //error.debugLog('-------pmtAmount--------> '+pmtAmount+'-'+targetAmountActual+'-'+currentYear+'-'+retirementYear+'-'+goalYear);
                             futureValue = futureValueActual = 0;
                             
                             for(Integer calcYear = detailBean.goalStartYear; calcYear< goalYear; calcYear++)/**/
                             {
                                 //Original
                                 futureValue = (( retirementYear == null)|| (calcYear < goalMappingBean.retirementYear) ?
                                                                    FinancialUtil.calculateCompoundMonthly(  presentValue = (true ? futureValue :futureValue),
                                                                                                              pmtAmount[0],
                                                                                                              12, rateList.get(goalYear -calcYear-1).doubleValue()
                                                                                                           )
                                                                    :
                                                                    FinancialUtil.calculateCompoundMonthly( presentValue =(true ? futureValue :futureValue),
                                                                                              0, // PMT should be considered zero after retirement.
                                                                                              12,
                                                                                              rateList.get(goalYear -calcYear-1).doubleValue()
                                                                                        )
                                                  );
                                
                                   //Original
                                 futureValueActual = (( retirementYear == null)|| (calcYear < goalMappingBean.retirementYear) ?
                                                                    FinancialUtil.calculateCompoundMonthly(
                                                                                                            presentValueActual =(true ? futureValueActual :futureValueActual), 
                                                                                                            pmtAmount[1],
                                                                                                            12,
                                                                                          rateList.get(goalYear -calcYear-1).doubleValue()
                                                                                          )
                                                                    :
                                                                      FinancialUtil.calculateCompoundMonthly(
                                                                                            presentValueActual =(true ? futureValueActual :futureValueActual), 
                                                                                            0,
                                                                                            12,
                                                                                            rateList.get(goalYear -calcYear-1).doubleValue()
                                                                                         )
                                                    
                                                    );
                              
                                   //system.debug('***********19futureValueActual:'+futureValueActual);
                           //error.debugLog('-------detailBean 1---> '+presentValue+'-'+futureValue+'-'+pmtAmount[0]+'-'+calcYear+'-'+futureValueActual+'-'+presentValueActual+'-'+pmtAmount[1]);
                                 goalFinancialDataBeanMapByYear.put(calcYear, detailBean.populate(presentValue, 
                                                                                                  futureValue, 
                                                                                                  futureValue , 
                                                                                                  pmtAmount[0], calcYear, goalProfileList.get(goalYear - calcYear-1),
                                                                                                  futureValueActual,presentValueActual,pmtAmount[1]
                                                                                                  )/**/
                                                                       );                               
                                 pmtAmount[0] = (isGrowingPmt(savingType)? (pmtAmount[0] * 1.1): pmtAmount[0]);
                                 pmtAmount[1] = (isGrowingPmt(savingType)? (pmtAmount[1] * 1.1): pmtAmount[1]);
                             }
                             System.debug('--------------------------------rateList-------------'+rateList);
                             System.debug('----goalFinancialDataBeanMapByYear.get(calcYear).futureValue--oooooooooooo--'+goalFinancialDataBeanMapByYear.get(goalYear -1).futureValue);
                             for(Integer calcYear = goalYear -1; calcYear >= currentYear; calcYear--) /**/
                             {
                                 if(calcYear == (goalYear -1)) 
                                 {                                                                     
                                       goalFinancialDataBeanMapByYear.get(calcYear).goalPV = FinancialUtil.calculatePrincipal(
                                                                                                                           goalFinancialDataBeanMapByYear.get(calcYear).futureValue,
                                                                                                                           1,
                                                                                                                           rateList.get(goalYear - calcYear-1).doubleValue()
                                                                                                                        );
                                       goalFinancialDataBeanMapByYear.get(calcYear).goalPVActual = FinancialUtil.calculatePrincipal(
                                                                                                                             goalFinancialDataBeanMapByYear.get(calcYear).futureValueActual,
                                                                                                                             1,
                                                                                                                             rateList.get(goalYear - calcYear-1).doubleValue()
                                                                                                                           );
                                } 
                                else 
                                {
                                       goalFinancialDataBeanMapByYear.get(calcYear).goalPV = FinancialUtil.calculatePrincipal(
                                                                                                                    goalFinancialDataBeanMapByYear.get(calcYear + 1).goalPV,
                                                                                                                    1,
                                                                                                                     rateList.get(goalYear - calcYear-1).doubleValue()
                                                                                                                     );
                                                                                                                     
                                       //PV and FV  : from PV and FV we calculate PV from here except last value of PV's                                                                                                             
                                       goalFinancialDataBeanMapByYear.get(calcYear).goalPVActual = FinancialUtil.calculatePrincipal(
                                                                                                                    goalFinancialDataBeanMapByYear.get(calcYear + 1).goalPVActual
                                                                                                                    ,1,
                                                                                                                    rateList.get(goalYear - calcYear-1).doubleValue()
                                                                                                         );
                                }
                                //error.debugLog('-------populatePresentFutureValueAndSIP 2---> '+goalYear+'-'+endYear+'-'+goalFinancialDataBeanMapByYear.get(calcYear));
<<<<<<< .mine
                                goalMappingBean.populatePresentFutureValueAndSIP(goalYear,endYear,goalFinancialDataBeanMapByYear.get(calcYear),true);
=======
                                 goalMappingBean.populatePresentFutureValueAndSIP(goalYear,endYear,goalFinancialDataBeanMapByYear.get(calcYear),true);
>>>>>>> .r14313
                             }               
                         } 
                         else 
                         { 
                             // We need to do this calculation for Retirement planing and IRR
                             //FS0168
                             
                             //error.debugLog('*******2 : newgoal**************');
                           detailBean = goalMappingBean.populateGoalDetailBeanList( currentYear, goalYear, targetAmount, targetAmountActual, false ); 
                                                                 //system.debug('***********21');                                                                                                                          
                             pmtAmount = getPmtAmount(targetAmountActual,targetAmountActual,currentYear , retirementYear , goalYear,savingType);
                             //error.debugLog('-------pmtAmount else--------> '+pmtAmount+'-'+targetAmountActual+'-'+currentYear+'-'+retirementYear+'-'+goalYear);
                             futureValue = futureValueActual  = 0;
                           for(Integer calcYear = detailBean.goalStartYear; calcYear< goalYear; calcYear++)/**/ 
                           {                                                                                                                                                                                     
                             futureValueActual = (( retirementYear == null)|| (calcYear < goalMappingBean.retirementYear) ? 
                                                                FinancialUtil.calculateCompoundMonthly(presentValueActual = (true ? futureValueActual :futureValueActual), 
                                                                                                           pmtAmount[1],
                                                                                                           12,
                                                                                           rateList.get(goalYear -calcYear-1).doubleValue())
                                                              :
                                                                  FinancialUtil.calculateCompoundMonthly(presentValueActual =(true ? futureValueActual :futureValueActual), 
                                                                                          0,
                                                                                        12,
                                                                                        rateList.get(goalYear -calcYear-1).doubleValue())
                                                            
                                                    );
                                                    //system.debug('***********22');
<<<<<<< .mine
                               //error.debugLog('-------goalFinancialDataBean 1---> '+futureValue+'-'+calcYear+'-'+futureValueActual+'-'+presentValueActual+'-'+pmtAmount[1]);                     
=======
                              // error.debugLog('-------goalFinancialDataBean 1---> '+futureValue+'-'+calcYear+'-'+futureValueActual+'-'+presentValueActual+'-'+pmtAmount[1]);                     
>>>>>>> .r14313
                               goalFinancialDataBean = detailBean.populate(0, futureValue, futureValue, 0, calcYear, goalProfileList.get(goalYear -calcYear-1),
                                                                            futureValueActual, presentValueActual, pmtAmount[1]);/**/
                               goalFinancialDataBean.futureValueActual  = futureValueActual;
                               goalFinancialDataBean.presentValueActual = presentValueActual;
                               goalFinancialDataBean.pmtActual = pmtAmount[1];
                               goalFinancialDataBeanMapByYear.put(calcYear,goalFinancialDataBean);
                                
                              pmtAmount[1] = (isGrowingPmt(savingType)? (pmtAmount[1] * 1.1): pmtAmount[1]);  
                           }
                             for(Integer calcYear = goalYear -1; calcYear >= currentYear; calcYear--) /**/
                             {
                                 if(calcYear == (goalYear -1)) 
                                 {                                                                     
                                     goalFinancialDataBeanMapByYear.get(calcYear).goalPVActual = FinancialUtil.calculatePrincipal(
                                                                                             goalFinancialDataBeanMapByYear.get(calcYear).futureValueActual,
                                                                                             1,
                                                                                             rateList.get(goalYear - calcYear-1).doubleValue()); 
                                 } 
                                 else 
                                 {
                                     goalFinancialDataBeanMapByYear.get(calcYear).goalPVActual =  FinancialUtil.calculatePrincipal(
                                                                                                              goalFinancialDataBeanMapByYear.get(calcYear+1).goalPVActual
                                                                                                              ,1,
                                                                                                              rateList.get(goalYear - calcYear-1).doubleValue());                                                                      
                                 }
                                 //error.debugLog('-------populatePresentFutureValueAndSIP 1---> '+goalYear+'-'+endYear+'-'+goalFinancialDataBeanMapByYear.get(calcYear));
                                 goalMappingBean.populatePresentFutureValueAndSIP(goalYear,endYear,goalFinancialDataBeanMapByYear.get(calcYear),false);
                             }
                         }
                    }
                    
              
                     Integer iCount = 0; 
                                  
                     //RecalculateTargetAmountForGoalPVYear(goalMappingBean,iGoalPVYear);
                }   
            }
        }
        catch(Exception ex) 
        {
              //throw new GeneralException('NewGoalService.getGoalDetails : Internal Error ' + ex.getMessage());    
        }
        
        return goalMappingBeanMapByGoalId;          
    }
    
   /* private void RecalculateTargetAmountForGoalPVYear(GoalMappingBean goalMappingBean,Integer iGoalPVYear)
    {
       try
       {
              Integer iCurrentYear = Date.today().year();
       }
       catch(Exception ex) 
       {
              system.debug('*****Exce'+ex.getMessage());
        }
       
       
    }*/
    
    //Manasi
    private Void RecalculatePVForLiquidateAlignToGoalOption(GoalMappingBean goalMappingBean, Integer startYear, Double dblAllocatedAmount)
    {
      try
        {
            //List<DataEntrySummaryBean> obj = goalMappingBean.getPresentFutureValueList[0];//[0].fieldList[0];

            /*for(List<DataEntrySummaryBean> objDataEntrySummaryBean : goalMappingBean.getPresentFutureValueList)
            {
               if(objDataEntrySummaryBean[0].fieldList[0] > 0)
               {
                      
               }
            }*/
            /* There may be more than one assets with option :Liquidate Align To Goal
            To calculate total of those Allocated amount */
            Double dblPreviousPV = 0,dblTempToCalculateMaturityAmount = 0;
            //FS0400
            Integer iGoalPVYear = 0,iLatestModifiedTargetYear = 0;
            /*for(GoalMappingBean.GoalAssetMappingBean goalAssetMappingBean :  goalMappingBean.goalAssetMappingBeanList)
            {
               
                if(Allocation_Action__c.getInstance('Action3').Action__c.equalsIgnoreCase(goalAssetMappingBean.action) ||
                Allocation_Action__c.getInstance('Action6').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))
               {
                      dblAllocatedAmount = dblAllocatedAmount + goalAssetMappingBean.allocatedAmount;
               }
            }*/
           if(goalMappingBean.getPresentFutureValueList != null && goalMappingBean.getPresentFutureValueList.size() > 0 && dblAllocatedAmount > 0)
           {
               /*List<DataEntrySummaryBean> lstDataEntrySummaryBean = goalMappingBean.getPresentFutureValueList[0];
               List<Double> lstPVForCurrentYear;
               DataEntrySummaryBean objDataEntrySummaryBean;      
               if(lstDataEntrySummaryBean != null && lstDataEntrySummaryBean.size() > 0)
               {
                      objDataEntrySummaryBean = lstDataEntrySummaryBean.get(0);
                      lstPVForCurrentYear = objDataEntrySummaryBean.fieldList;
               }
               
               */
               /*
               Added following code for the following reason:
                      1. When we allocate two assets one is with option 'Liquidate align to goal' and other asset with option other than 
                      'Liquidate align to goal', then it should apply Liquidate related logic for year, in which Target amount is non zero.
                      Eg: because of 1st asset, 1st target amt is becoming zero then 'Liquidate' related asset should apply from 2nd target year
               */
               //FS0400
               //Integer iLatestModifiedTargetYear = 0;
               
               for(iLatestModifiedTargetYear = 0;goalMappingBean.goalDetailBeanList.size() > iLatestModifiedTargetYear;iLatestModifiedTargetYear++)
               {
                      if(goalMappingBean.goalDetailBeanList[iLatestModifiedTargetYear].targetAmount > 0)
                      {
                          break;
                      }
               }
               Integer iGoalYearForMF =  startYear + iLatestModifiedTargetYear;
               Integer remainder = 0,iCount = 0,iNoOfYears = iLatestModifiedTargetYear;
               Double rate = 0,assetMaturedAmount = 0;
               //FS0400
               for(iCount = 0; iCount < goalMappingBean.getPresentFutureValueList[0].get(0).fieldList.size(); iCount+=2)
               {
                     //remainder = Math.mod(iCount,2);
                     //if(remainder == 0)
                     //{
                             
                   if(goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount] > dblAllocatedAmount)
                   {
                        goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount] = goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount]
                                                                                                                                                - dblAllocatedAmount;
                        break;
                   }
                   else
                   {
                       dblPreviousPV = goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount];
                        goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount]  = goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount]
                                                                                                                                                - dblAllocatedAmount;
                        dblAllocatedAmount = dblAllocatedAmount - dblPreviousPV;
                        if(dblAllocatedAmount == 0)
                        {
                               break;
                        }
                        goalMappingBean.goalDetailBeanList[iNoOfYears].targetAmount = 0;
                        iNoOfYears ++;
                   }
                     //goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount] = 999999;
                     //}
               }
               
               //FS0400
               Integer iGoalStartYear = startYear,iCurrentYear =  Date.today().year(); 
               /*Add the count where the Allocated amount becomes zero to Goal Start Year.
               This will give the Year for which we need to re-calculate the Target amount
               */ 
               iGoalPVYear = iGoalStartYear + iNoOfYears; 
               //Logic for calculation of target amounts
               //FS0400
               //Integer iCurrentYear =  Date.today().year();
               Integer itemp = iGoalPVYear - iCurrentYear;
               rate = 0;
               if(iCount < goalMappingBean.getPresentFutureValueList[0].get(0).fieldList.size()) // Allocated amount will get finished then only need to calculate target amount  
               {
                  if((iCurrentYear) < iGoalPVYear)
                {
                    rate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList,iGoalPVYear - iCurrentYear),100,iGoalPVYear - iCurrentYear);
                    Double dblTargetAmount = FinancialUtil.calculateCompound(goalMappingBean.getPresentFutureValueList[0].get(0).fieldList[iCount],iGoalPVYear - iCurrentYear,rate);
                    //assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,maturityYear - goalYear,rate);
                    goalMappingBean.goalDetailBeanList[iNoOfYears].targetAmount = dblTargetAmount;
                }
               }
               /*for(Integer cnt = 0;cnt < iNoOfYears; cnt++)
               {
                      goalMappingBean.goalDetailBeanList[cnt].targetAmount = 0;
               }*/
         }
         
         /*for(GoalMappingBean.GoalAssetMappingBean goalAssetMappingBean :  goalMappingBean.goalAssetMappingBeanList)
         {
               
                if(Allocation_Action__c.getInstance('Action3').Action__c.equalsIgnoreCase(goalAssetMappingBean.action) ||
                 Allocation_Action__c.getInstance('Action6').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))
               {
                      dblAllocatedAmount = goalAssetMappingBean.allocatedAmount;
                      for(List<DataEntrySummaryBean> objDataEntrySummaryBean : goalMappingBean.getPresentFutureValueList)
                      {
                             if(objDataEntrySummaryBean[0].fieldList[0] != 0 && dblAllocatedAmount != 0 && dblAllocatedAmount > 0)
                             {
                                    if(objDataEntrySummaryBean[0].fieldList[0] > dblAllocatedAmount)
                                    {
                                           objDataEntrySummaryBean[0].fieldList[0] = objDataEntrySummaryBean[0].fieldList[0] - dblAllocatedAmount;
                                           dblAllocatedAmount = 0;
                                           dblTempToCalculateMaturityAmount = objDataEntrySummaryBean[0].fieldList[0];
                                           break;
                                    }
                                    else
                                    {
                                           dblPreviousPV = objDataEntrySummaryBean[0].fieldList[0];
                                           objDataEntrySummaryBean[0].fieldList[0] = objDataEntrySummaryBean[0].fieldList[0] - dblAllocatedAmount;
                                           dblAllocatedAmount = dblAllocatedAmount - dblPreviousPV;
                                           if(dblAllocatedAmount <= 0)
                                           {
                                                  dblTempToCalculateMaturityAmount = objDataEntrySummaryBean[0].fieldList[0];
                                                 break;
                                           }
                                    }
                             }
                      }
               }
         }*/
       }
       catch(Exception ex)
       {
              system.debug('*****Exce'+ex.getMessage());
       }
       //return iGoalPVYear;
    }
    
  
    private Double getTotalExpenses(String entityId)
    {
        Double totalExpense =0;
        List<Expense__c> expenseList;
        List<Loan__c> loanList;
        List<Insurance__c> insuranceList;
        List<Asset__c> assetList;
        List<Investment_Asset__c> invAssetList;
        List<Double> totalValueList;
<<<<<<< .mine
        
        /* Prajakta - FP changes - Changed currentYear to PGD year*/
        Integer currentYear;
        if(objAccount.Plan_Generation_Date__c != null)
        	currentYear = objAccount.Plan_Generation_Date__c.year();
        else
        	currentYear = System.today().year();
        //Integer currentYear = objAccount.Plan_Generation_Date__c.year();//System.today().year(); //2013;// /*Praj - PGD*/
        
=======
        Integer currentYear = System.today().year(); //2014; /*Praj*/
       
>>>>>>> .r14313
        NewCashFlowService objNewCashFlowService = new NewCashFlowService();
        NewSummaryBean summaryBean = new NewSummaryBean('Expenses',currentYear,currentYear);
        expenseList = databaseSOQLObj.getMonthlyExpenseForCashFlow(entityId);
        objNewCashFlowService.setExpensesSummaryDetails(expenseList,currentYear,currentYear,summaryBean);
        loanList = databaseSOQLObj.getLoanList(entityId);
        objNewCashFlowService.setLoanSummaryDetails(loanList,currentYear,currentYear,summaryBean);
        insuranceList = databaseSOQLObj.getInsurances(entityId,'Data Entry');
        objNewCashFlowService.setInsuranceSummaryDetails(insuranceList,currentYear,currentYear,summaryBean);
        /*assetList = databaseSOQLObj.getAssetListByClass(entityId, AssetRecTypes__c.getInstance('Retirement Accounts').RecordTypeId__c);
        objNewCashFlowService.setAssetSummaryDetails(assetList,currentYear,currentYear,summaryBean);*/
        assetList = databaseSOQLObj.getAssetListByClass(entityId, AssetRecTypes__c.getInstance('Govt. Saving Schemes').RecordTypeId__c);
        objNewCashFlowService.setAssetSummaryDetails(assetList,currentYear,currentYear,summaryBean);
        assetList = databaseSOQLObj.getAssetListByClass(entityId, AssetRecTypes__c.getInstance('Deposits With Bank').RecordTypeId__c,'Recurring Deposits');
        objNewCashFlowService.setAssetSummaryDetails(assetList,currentYear,currentYear,summaryBean);
        invAssetList = databaseSOQLObj.getInvestmentAssetListByClass(entityId, InvestmentAsset__c.getInstance('Mutual Fund').RecordTypeId__c);
        objNewCashFlowService.setInvestmentAssetSummaryDetails(invAssetList,currentYear,currentYear,summaryBean);
        totalValueList = summaryBean.totalValueByYear;
        if(!totalValueList.isEmpty())
        {
            totalExpense = totalValueList.get(0);
        }
        return totalExpense;
    }
    
    /*
        This method will populate SIP amount , Retirement Amount , Original GoalPV and Asset Goal PV values in database.
        These details will be used on Output page. 
    */
    /*
       Modified By : Niket Chandane.
       Modified At : 23 June 2011
       Summary       : Update the Value's of GoalYearValue__c to GoalYearValue__c.doubleValue() since it get's an error 
                            for the limit exception of Numerical value. 
    */
    public void populateSIPCalculation(String entityId, GoalMappingBean goalMappingBean) 
    {
        try 
        {
            system.debug('******goalMappingBean.goalObj**in populate**'+goalMappingBean.goalObj);
   
             List<GoalAssetAssociation__c> goalAssetAssociationList = new List<GoalAssetAssociation__c>();
             List<GoalInvestmentAssetAssociation__c> goalInvestmentAssetAssociationList = new List<GoalInvestmentAssetAssociation__c>(); 
             List<GoalInsuranceAssociation__c> goalInsuranceAssociationList = new List<GoalInsuranceAssociation__c>();
             
             Map<String,Map<String,List<GoalInvestmentAssetAssociation__c>>> goalInvAssetAssociationMapByRecordAndEntityName;                     
             GoalAssetAssociation__c goalAssetAssociation;
             GoalInsuranceAssociation__c goalInsuranceAssociation;
             GoalInvestmentAssetAssociation__c goalInvAssociation;
             
             //Manasi : Please uncomment........
             if(goalMappingBean.goalObj.goal_type__c.equals('Retirement'))
             {
                 //FS0323 Commented the following code .It was overwriting the SIP Values.It should not overwrite the value
                 //setRetirementSIPData(goalMappingBean);
                 /*
                    Modified By : Manasi Ranade.
                    Modified At : 11/10/2011
                    iSSUE id    : FS0185
                    Summary       : Added PV value of the retirement year.
                 */
                 Double dblTargetAmount = 0;
                //error.debugLog('----------------Plan_Generation_Date__c.year()---------------'+objAccount.Plan_Generation_Date__c.year()); 
                 if(goalMappingBean != null && goalMappingBean.goalDetailBeanList != null && goalMappingBean.goalDetailBeanList.size() >0)
               {
                     dblTargetAmount = goalMappingBean.goalDetailBeanList[0].targetAmount;
               }
<<<<<<< .mine
               //error.debugLog('---------------dblTargetAmount----------'+dblTargetAmount); 
              //  Double test = goalMappingBean.goalPVActualSumMap.get((goalMappingBean.retirementYear != null ? 
               // 														goalMappingBean.retirementYear 
               // 														: objAccount.Plan_Generation_Date__c.year()));//System.today().year())); /*Praj*/
=======
               
                 Double test= goalMappingBean.goalPVActualSumMap.get((goalMappingBean.retirementYear != null ? goalMappingBean.retirementYear : System.today().year()));
>>>>>>> .r14313
                 
                 //Original Code
                 /*goalMappingBean.goalObj.retirement_amount__c = goalMappingBean.goalPVActualSumMap.get((goalMappingBean.retirementYear != null ? goalMappingBean.retirementYear : System.today().year()))
                                                                                            + dblTargetAmount ;*/
                 //goalMappingBean.goalObj.retirement_amount__c = 100;
                 /** Eternus Solutions       **/
                 /** Author  : Manasi Ranade **/
                 /** Issue Id: FS0349      **/
                 /** Date    : 14/12/2011   **/
                 /** Purpose : Add check here from GoalController
                 /****************************************************/
                 if(goalMappingBean.goalObj.retirement_amount__c <= 0 )
                      goalMappingBean.goalObj.retirement_amount__c = goalMappingBean.goalPVActualSumMap.get(
                                                                          (goalMappingBean.retirementYear != null ?
                                                                           goalMappingBean.retirementYear : System.today().year())
                                                                          ) + dblTargetAmount ;
<<<<<<< .mine
                goalMappingBean.goalObj.Annual_Expenses__c = getTotalExpenses(entityId);    
               // error.debugLog('--------------- goalMappingBean.goalObj.Annual_Expenses__c----------'+ goalMappingBean.goalObj.Annual_Expenses__c);                                                            
           	}
=======
                           goalMappingBean.goalObj.Annual_Expenses__c = getTotalExpenses(entityId);                                                               
             }
>>>>>>> .r14313
             
           /*  if(goalMappingBean.retirementYear != null)
             {
               Integer iRetirementYear =  goalMappingBean.retirementYear - 1;
               if(goalMappingBean.goalFVActualSumMap.containsKey(iRetirementYear))
                 retirementFutureValuesWithoutAllocation = goalMappingBean.goalFVActualSumMap.get(iRetirementYear);
               else
                 retirementFutureValuesWithoutAllocation = 0;
                       
             }*/
             
             /** Eternus Solutions       **/
             /** Author  : Manasi Ranade **/
             /** Issue Id: 00001619      **/
             /** Date    : 7/5/2012      **/
             /** Purpose : Created OriginalGoalSipAmountMap Map to store old data.
             /****************************************************/
             Map<Integer,GoalSIPAmount__c> OriginalGoalSipAmountMap = new Map<Integer,GoalSIPAmount__c>();
             
<<<<<<< .mine
            for(GoalSIPAmount__c objGoalSIPAmt : databaseSOQLObj.getSIPAmountList(goalMappingBean.goalObj.id))
            {
                if(OriginalGoalSipAmountMap.get(Integer.valueOf(objGoalSIPAmt.Goal_Year__c)) == null)
                   	OriginalGoalSipAmountMap.put(Integer.valueOf(objGoalSIPAmt.Goal_Year__c),objGoalSIPAmt);
            }
            if(objAccount.Plan_Generation_Date__c != null)
            {
            	Integer iCurrentYear =  objAccount.Plan_Generation_Date__c.year();//System.today().year();	/*Praj - not used*/
            // error.debugLog('---------------iCurrentYear---------'+ iCurrentYear);    
            }
=======
             for(GoalSIPAmount__c objGoalSIPAmt : databaseSOQLObj.getSIPAmountList(goalMappingBean.goalObj.id))
             {
                 if(OriginalGoalSipAmountMap.get(Integer.valueOf(objGoalSIPAmt.Goal_Year__c)) == null)
                   OriginalGoalSipAmountMap.put(Integer.valueOf(objGoalSIPAmt.Goal_Year__c),objGoalSIPAmt);
             }
             Integer iCurrentYear = System.today().year();
             
>>>>>>> .r14313
             /**    Eternus Solutions       **/
             /** Author  : Niket Chandane      **/
             /** Issue Id: FS0349              **/
             /** Date    : 22/2/2012           **/
             /** Purpose : Calculate the percentage of the Equty,debt and goal with total amount for 
                                    respective year. **/ 
                   /****************************************************/
             //////////////////////////////////////////////////////////////******************************
            
             //////////////////////////////////////////////////////////////////**************************************************
             /////Start New //Following code is working for previous Logic (Net effect of the All Goal Profile years)
             //Now the logic is changed. As per the new logic we should consider the current
             /*For(goalMappingBean.GoalDetailBean objGoalDetailBean : goalMappingBean.goalDetailBeanList)
             {
             }*/
             
             goalMappingBean.GoalDetailBean requiredGoalDetailBean;// = goalMappingBean.goalDetailBeanList[0];
               
             for(goalMappingBean.GoalDetailBean objGoalDetailBean : goalMappingBean.goalDetailBeanList)
             {
               if(Integer.ValueOf(goalMappingBean.goalObj.Goal_Start_Year__c) == objGoalDetailBean.goalEndYear)
               {
                 requiredGoalDetailBean = objGoalDetailBean;
                 if(requiredGoalDetailBean != null && requiredGoalDetailBean.goalFinancialDataBeanList!= null 
                   && requiredGoalDetailBean.goalFinancialDataBeanList.size() > 0)
               {
                 Goal_Profile__c objGoalProfile = requiredGoalDetailBean.goalFinancialDataBeanList[0].goalProfile;// Goal start year related profile
                 GoalSIPAmount__c objGoalSIP = goalMappingBean.goalSIPAmountList.get(0);//Current year record
                 objGoalSIP.EquityCurrentYear__c = objGoalProfile.Equity_Allocation__c;// EquityCurrentYear__c;
                        objGoalSIP.GoldCurrentYear__c = objGoalProfile.Gold_allocation__c;//GoldCurrentYear__c;
                        objGoalSIP.DebtCurrentYear__c =objGoalProfile.Debt_Allocation__c;//DebtCurrentYear__c;
<<<<<<< .mine
               		
	               		/*error.debugLog('----------------EquityCurrentYear__c---------------'+objGoalSIP.EquityCurrentYear__c);
	               		error.debugLog('----------------GoldCurrentYear__c---------------'+objGoalSIP.GoldCurrentYear__c);
	               		error.debugLog('----------------DebtCurrentYear__c---------------'+objGoalSIP.DebtCurrentYear__c);*/
               		}
                 	break;
               	}
            }
			  //error.debugLog('---------------after for loop---------');                         
=======
               }
                 break;
               }
             }
                     
            
             
>>>>>>> .r14313
             /////////////////////////////End New
<<<<<<< .mine
            databaseDMLObj.deleteRecords(databaseSOQLObj.getSIPAmountList(goalMappingBean.goalObj.id));
            databaseDMLObj.upsertObject(goalMappingBean.goalSIPAmountList);
            //getSIPDetails
            goalMappingBean.goalObj.IRR__c = goalMappingBean.getIRR();
            
           // goalMappingBean.goalObj.SIP_Start_Year__c = goalMappingBean.sipStartYear(); 
           // error.debugLog('------------SIP_Start_Year__c--------------'+goalMappingBean.goalObj.SIP_Start_Year__c);
           //error.debugLog('********goalMappingBean.goalObj.SIP_Start_Year__c**********'+goalMappingBean.goalObj.SIP_Start_Year__c);
           //error.debugLog('********goalMappingBean.goalPVActualSumMap*********'+goalMappingBean.goalPVActualSumMap);
           
            if(goalMappingBean.goalObj.SIP_Start_Year__c != null)
            	goalMappingBean.goalObj.OriginalGoalPV__c = goalMappingBean.goalPVActualSumMap.get(Integer.valueOf(goalMappingBean.goalObj.SIP_Start_Year__c)); //system.today().year();/*Praj - SIP start year*/
            //error.debugLog('------------OriginalGoalPV__c--------------'+goalMappingBean.goalObj.OriginalGoalPV__c);
            //goalMappingBean.goalObj.Saving_type__c = 'Saving Type';
            //Please uncomment
            databaseDMLObj.upsertObject(goalMappingBean.goalObj);
            //Id objId = databaseDMLObj.upsertObject(goalMappingBean.goalObj);
            //upsert goalMappingBean.goalObj;
            goalInvestmentAssetAssociationList = databaseSOQLObj.getGoalInvestmentAssociationListForGoalCalculation(entityId, goalMappingBean.goalObj.id);
            //error.debugLog('----------------goalInvestmentAssetAssociationList---------------'+goalInvestmentAssetAssociationList);
            goalInvAssetAssociationMapByRecordAndEntityName = getInvestmentAsssetMap(goalInvestmentAssetAssociationList);
            goalInvestmentAssetAssociationList.clear();
            //error.debugLog('---------------goalMappingBean.goalAssetMappingBeanList------------'+goalMappingBean.goalAssetMappingBeanList);
            for(GoalMappingBean.GoalAssetMappingBean goalAssetMappingBean : goalMappingBean.goalAssetMappingBeanList) 
            {
            	if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Asset'))
                {
	                goalAssetAssociation = (GoalAssetAssociation__c)goalAssetMappingBean.assetObj;
	                goalAssetAssociationList.add(goalAssetAssociation);
	                goalAssetAssociation.GoalYearValue__c = Double.ValueOf(goalAssetMappingBean.goalYearValue);
	                if(goalAssetMappingBean.maturityValue != null)
	                	goalAssetAssociation.Maturity_Value__c = Double.ValueOf(goalAssetMappingBean.maturityValue);   /*Prajakta*/
=======
             databaseDMLObj.deleteRecords(databaseSOQLObj.getSIPAmountList(goalMappingBean.goalObj.id));
             databaseDMLObj.upsertObject(goalMappingBean.goalSIPAmountList);
             //getSIPDetails
             goalMappingBean.goalObj.IRR__c = goalMappingBean.getIRR();
             
             if(goalMappingBean.goalObj.SIP_Start_Year__c != null)
            	goalMappingBean.goalObj.OriginalGoalPV__c = goalMappingBean.goalPVActualSumMap.get(Integer.valueOf(goalMappingBean.goalObj.SIP_Start_Year__c)); //system.today().year();/*Praj - SIP start year*/
            // goalMappingBean.goalObj.OriginalGoalPV__c = goalMappingBean.goalPVActualSumMap.get(System.today().year());
             //goalMappingBean.goalObj.Saving_type__c = 'Saving Type';
             //Please uncomment
             databaseDMLObj.upsertObject(goalMappingBean.goalObj);
             //Id objId = databaseDMLObj.upsertObject(goalMappingBean.goalObj);
             //upsert goalMappingBean.goalObj;
             goalInvestmentAssetAssociationList = databaseSOQLObj.getGoalInvestmentAssociationListForGoalCalculation(entityId, goalMappingBean.goalObj.id);
             System.debug('--------------------------------goalInvestmentAssetAssociationList-------------------'+goalInvestmentAssetAssociationList);
             goalInvAssetAssociationMapByRecordAndEntityName = getInvestmentAsssetMap(goalInvestmentAssetAssociationList);
             goalInvestmentAssetAssociationList.clear();
             System.debug('--------------------------------goalMappingBean.goalAssetMappingBeanList-------------------'+goalMappingBean.goalAssetMappingBeanList);
             for(GoalMappingBean.GoalAssetMappingBean goalAssetMappingBean : goalMappingBean.goalAssetMappingBeanList) 
             {
                   if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Asset'))
                   {
                          goalAssetAssociation = (GoalAssetAssociation__c)goalAssetMappingBean.assetObj;
                          goalAssetAssociationList.add(goalAssetAssociation);
                          goalAssetAssociation.GoalYearValue__c = Double.ValueOf(goalAssetMappingBean.goalYearValue);
                          if(goalAssetMappingBean.maturityValue != null)
                            goalAssetAssociation.Maturity_Value__c = Double.ValueOf(goalAssetMappingBean.maturityValue);   /*Prajakta*/
>>>>>>> .r14313
                            
                        system.debug('goalAssetAssociation.Maturity_Value__c----->'+goalAssetAssociation.Maturity_Value__c);    
                   }
                   else if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Insurance'))
                   {
                          goalInsuranceAssociation = (GoalInsuranceAssociation__c)goalAssetMappingBean.assetObj;
                          goalInsuranceAssociationList.add(goalInsuranceAssociation);
                          goalInsuranceAssociation.GoalYearValue__c = goalAssetMappingBean.goalYearValue;
                   }
                   else if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('InvAssetFixedIncome'))
                   {
                          goalInvAssociation = (GoalInvestmentAssetAssociation__c)goalAssetMappingBean.assetObj;
                          goalInvestmentAssetAssociationList.add(goalInvAssociation);
                          goalInvAssociation.GoalYearValue__c = goalAssetMappingBean.goalYearValue;
                          //Please uncommet : Original Code
                   }
                   else if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('InvAsset'))
                   {
                          for(GoalInvestmentAssetAssociation__c objGoalInvAssociation :
                                                      goalInvAssetAssociationMapByRecordAndEntityName.get(goalAssetMappingBean.description)
                                                                                                                                 .get(goalAssetMappingBean.entityName)) 
                          {
                                 objGoalInvAssociation.GoalYearValue__c = goalAssetMappingBean.goalYearValue;
                                 goalInvestmentAssetAssociationList.add(objGoalInvAssociation);
                          }
                   }
             }
             
             if(!goalAssetAssociationList.isEmpty())
                   databaseDMLObj.upsertObject(goalAssetAssociationList);
                   
             if(!goalInvestmentAssetAssociationList.isEmpty())
                   databaseDMLObj.upsertObject(goalInvestmentAssetAssociationList);
                   
             if(!goalInsuranceAssociationList.isEmpty())
                   databaseDMLObj.upsertObject(goalInsuranceAssociationList);
       }
       catch(Exception ex)
       {
            throw new GeneralException('NewGoalService.populateSIPCalculation : Internal Error ' + ex.getMessage());
       }
    }
    
    /*   
        This is helper method to get map of Associated Investment assets for parent and child entity.
    */
    private Map<String, Map<String, List<GoalInvestmentAssetAssociation__c>>>  getInvestmentAsssetMap(List<GoalInvestmentAssetAssociation__c> goalInvAssetAssociationList) 
    {
                                         
        Map<String,Map<String,List<GoalInvestmentAssetAssociation__c>>> goalInvAssetAssociationMapByRecordAndEntityName;  
        Map<String,List<GoalInvestmentAssetAssociation__c>> goalInvAssociationMapByEntity;
        List<GoalInvestmentAssetAssociation__c> goalInvAssetList;
       
        goalInvAssetAssociationMapByRecordAndEntityName = new Map<String,Map<String,List<GoalInvestmentAssetAssociation__c>>>();
        for(GoalInvestmentAssetAssociation__c goalInvestmentAssociation : goalInvAssetAssociationList) 
        {
              
              if(!goalInvAssetAssociationMapByRecordAndEntityName.containsKey(goalInvestmentAssociation.investment_Asset__r.recordType.Name)) 
              {
                     goalInvAssetAssociationMapByRecordAndEntityName.put(goalInvestmentAssociation.investment_Asset__r.recordType.Name,
                                                                                  new Map<String,List<GoalInvestmentAssetAssociation__c>>());
              }
              goalInvAssociationMapByEntity = goalInvAssetAssociationMapByRecordAndEntityName
                                                                            .get(goalInvestmentAssociation.investment_Asset__r.recordType.Name);
              if(!goalInvAssociationMapByEntity.containsKey(goalInvestmentAssociation.Investment_Asset__r.Entity__r.Name))
              {                         
                     goalInvAssociationMapByEntity.put(goalInvestmentAssociation.Investment_Asset__r.Entity__r.Name, new List<GoalInvestmentAssetAssociation__c>());
              } 
                          
              goalInvAssetList = goalInvAssociationMapByEntity.get(goalInvestmentAssociation.Investment_Asset__r.Entity__r.Name);
              goalInvAssetList.add(goalInvestmentAssociation);
        }
        return goalInvAssetAssociationMapByRecordAndEntityName;       
    }
    
    /*   
        This is helper method to retrieve associated Assets for parent and child entity for all goals.
    */    
    private void getAssociatedAssets(List<String> goalIdList,String entityId) 
    {
<<<<<<< .mine
           
       	for(GoalAssetAssociation__c goalAssetLinkObj : databaseSOQLObj.getGoalAssetAllocationList(entityId, goalIdList))
        {
        	/** Eternus Solutions - Manasi Ranade - 00001727 - 10/8/2012      **/
      		/** Purpose : Commented declations from above and pasted it here  **/
	        String description;//,goalId;
	        String newDescription; //Issue Id: 00001614
	        Double allocatedAmount = 0, totalAssetValue, interestRate, growthRate = 10.0d;
	        Double annualContribution;
	        Double allocatedPercent = 0;     
        	
        	 /* Prajakta - FP changes - For startYear, Changed System.today().Year() to PGD year*/
	        Integer startYear;
	        if(objAccount.Plan_Generation_Date__c != null)
	        	startYear = objAccount.Plan_Generation_Date__c.year();
	        else
	        	startYear = System.today().year();
	        	
        	Integer endYear; 
	        /** Eternus Solutions - Mahesh Hirugade -  00001606 - 25/4/2012      **/
	        /** Purpose : Added the description of Business Asset, Investment Asset and Life Insurance **/
=======
        //FS0400
      /** Eternus Solutions        **/
    /** Author  : Manasi Ranade  **/
    /** Issue Id: 00001727     **/
    /** Date    : 10/8/2012    **/
    /** Purpose : Commented declations from here and pasted it in for Loop
    /****************************************************/
        /*String description;//,goalId;
        String newDescription; //Issue Id: 00001614
        Double allocatedAmount =0,totalAssetValue,interestRate,growthRate = 10.0d,annualContribution;
        Decimal allocatedPercent = 0;        
        Integer startYear = System.today().Year(),endYear;*/        
        //FS0400
        //Original Code
        //List<GoalAssetAssociation__c> goalAssetAssociationList;
       
              //FS0400
              //Original Code
             /*goalAssetAssociationList = databaseSOQLObj.getGoalAssetAllocationList(entityId, goalIdList);
             for(GoalAssetAssociation__c goalAssetLinkObj : goalAssetAssociationList)*/
             
       for(GoalAssetAssociation__c goalAssetLinkObj : databaseSOQLObj.getGoalAssetAllocationList(entityId, goalIdList))
       {
        /** Eternus Solutions        **/
      /** Author  : Manasi Ranade  **/
      /** Issue Id: 00001727     **/
      /** Date    : 10/8/2012    **/
      /** Purpose : Commented declations from above and pasted it here
      /****************************************************/
           String description;//,goalId;
        String newDescription; //Issue Id: 00001614
        Double allocatedAmount = 0, totalAssetValue, interestRate, growthRate = 10.0d;
        Double annualContribution;
        Double allocatedPercent = 0;     
        //Double maturityValue = 0;   /* Prajakta - FP changes - 14-03-2013 */   
        //Double maturityValueAmount = 0;
        Integer startYear = System.today().Year(),endYear; 
           /** Mahesh **/
          /** Eternus Solutions        **/
      /** Author  : Mahesh Hirugade**/
      /** Issue Id: 00001606     **/
      /** Date    : 25/4/2012    **/
      /** Purpose : Added the description of Business Asset, Investment Asset and Life Insurance
      /****************************************************/
      //goalAssetLinkObj.asset__r.RecordType.Name
            //if(asset.RecordType.Name == 'Govt. Saving Schemes' || asset.RecordType.Name == 'Retirement Accounts'|| asset.RecordType.Name == 'Deposits With Bank')
>>>>>>> .r14313
            
            /** Eternus Solutions        **/
      /** Author  : Mahesh Hirugade**/
      /** Issue Id: 00001614     **/
      /** Date    : 09/05/2012    **/
      /** Purpose : Assigned value to newDescription
      /****************************************************/
            if(goalAssetLinkObj.asset__r.RecordType.Name == 'Govt. Saving Schemes' || goalAssetLinkObj.asset__r.RecordType.Name == 'Retirement Accounts'|| goalAssetLinkObj.asset__r.RecordType.Name == 'Deposits With Bank')
            {
              newDescription = (goalAssetLinkObj.asset__r.RecordType.Name == 'Deposits With Bank') ? 
                        (
                          (goalAssetLinkObj.asset__r.Bank_Name__c != null) ? (goalAssetLinkObj.asset__r.Bank_Name__c + ' - ' + goalAssetLinkObj.asset__r.Account_Number__c) : (goalAssetLinkObj.asset__r.Account_Number__c)
                        )
                          
                        : (goalAssetLinkObj.asset__r.Account_Number__c);
            }
            else
              newDescription = (goalAssetLinkObj.asset__r.Description__c);
              
          /** End - 00001614 **/
               
               //FS0400
               //Original Code
               //goalId = goalAssetLinkObj.goal__c;
               //FS0400
               //Original Code
               description = goalAssetLinkObj.asset__r.Account_Type__c; 
                
               if(description == null) 
               {
                   description = goalAssetLinkObj.asset__r.Asset_Types__c;
               }
              //FS0400
               //description = ((description == null) ? goalAssetLinkObj.asset__r.Asset_Types__c : goalAssetLinkObj.asset__r.Account_Type__c);
               if(goalAssetLinkObj.Allocated__c == null)
               {
                   //setInfoMessage('Allocated Asset Percent is not valid for ' + goalAssetLinkObj.asset__r.RecordType.Name + ' asset.'); //commented by dipak 
                   continue;
               }
               //FS0400
                       //Original Code
               allocatedPercent = goalAssetLinkObj.Allocated__c;
                       totalAssetValue = goalAssetLinkObj.asset__r.Monthly_Asset__c;
                       //FS0400
                       //Original Code
                       //allocatedAmount = (totalAssetValue)* (allocatedPercent/100);
                       
               
               allocatedAmount = (totalAssetValue)* (goalAssetLinkObj.Allocated__c/100);
               if(!AssetBean.assetTypeList[1].equals(goalAssetLinkObj.asset__r.RecordType.Name)) 
               {        
                     //For Real Estate Asset End year field is not there So it gives End Year is not Valid related error...... FS0117                
                     //goalAssetLinkObj
                     
                     /*End year is valid for 'Govt. Saving Schemes' and 'Deposits With Bank' 
                            and 'Retirement Accounts'So added following conditions*/
                     if(goalAssetLinkObj.asset__r.End_Year__c == null 
                       && (goalAssetLinkObj.asset__r.RecordType.Name == 'Govt. Saving Schemes'
                          || goalAssetLinkObj.asset__r.RecordType.Name == 'Deposits With Bank'
                          || goalAssetLinkObj.asset__r.RecordType.Name == 'Retirement Accounts'))
                     {
                            setInfoMessage('End year is not valid for ' + goalAssetLinkObj.asset__r.RecordType.Name + ' assets.');
                            continue;// we can't consider this record ....
                     }
                     if(goalAssetLinkObj.asset__r.End_Year__c != null)
                           endYear = Integer.valueOf(goalAssetLinkObj.asset__r.End_Year__c.trim());
                          /** Eternus Solutions       **/
                          /** Author  : Manasi Ranade **/
                          /** Issue Id: 00001535     **/
                          /** Date    : 6/3/2012           **/
                          /** Purpose : if Expected_Year_of_Sale__c is not null then assign it to the EndYear for further calculations
                          /****************************************************/
                          if((goalAssetLinkObj.asset__r.Expected_Year_of_Sale__c != null) && 
                                 (goalAssetLinkObj.asset__r.RecordType.Name == 'Real Estate Assets'
                                 || goalAssetLinkObj.asset__r.RecordType.Name == 'Business Assets'
                                 || goalAssetLinkObj.asset__r.RecordType.Name == 'Personal Assets'))
                                
                          {
                                 endYear = Integer.valueOf(goalAssetLinkObj.asset__r.Expected_Year_of_Sale__c);
                          }
                          
                          
            if(goalAssetLinkObj.asset__r.Start_Year__c == null 
              &&(goalAssetLinkObj.asset__r.RecordType.Name == 'Govt. Saving Schemes'
                          || goalAssetLinkObj.asset__r.RecordType.Name == 'Deposits With Bank'
                          || goalAssetLinkObj.asset__r.RecordType.Name == 'Retirement Accounts'))
                      {
                            setInfoMessage('Start year is not valid for ' + goalAssetLinkObj.asset__r.RecordType.Name + ' asset.');
                            continue;
                      }
                     //FS0400
                                  //Original Code
                     /*if(goalAssetLinkObj.asset__r.Start_Year__c != null)
                     startYear = Integer.valueOf(goalAssetLinkObj.asset__r.Start_Year__c.trim());*/
                     startYear = ((goalAssetLinkObj.asset__r.Start_Year__c != null) ? Integer.valueOf(goalAssetLinkObj.asset__r.Start_Year__c.trim()) : System.today().Year());
                     //startYear = 2000;
                     //endYear = 2020;
                   }
                   else 
                   {
            if( Allocation_Action__c.getInstance('Action1').Action__c.equalsIgnoreCase( goalAssetLinkObj.asset__r.action__c ) ||
                               Allocation_Action__c.getInstance('Action2').Action__c.equalsIgnoreCase( goalAssetLinkObj.asset__r.action__c ))
                        { 
                              // To be grown till maturity and continue saving                      
                             setInfoMessage(goalAssetLinkObj.asset__r.action__c + ' action is not supported on ' + goalAssetLinkObj.asset__r.RecordType.Name + ' asset.');
                             continue;
                        }
                   }
                   
                   /*
                    Modification By : Niket Chandane
                    date                  : 8 June 2011
                    Summary               : Added the new field dblAnnualContribution which stores the Assets annual contribution.
                                            Used in to calculate the total amount of the Target Amount on the "goal calculation page"
                   */
                   //FS0400 Commented as not used anywhere in the code
                   //dblAnnualContribution = goalAssetLinkObj.asset__r.Annual_Contribution__c;
                   //dblAnnualExpextedgrowthRate = goalAssetLinkObj.asset__r.Expected_Growth_Rate__c;
                   //FS0305
                   //Assigned zero if the Expected_Growth_Rate__c is null .Previously default value was 10
                   
                   growthRate = (goalAssetLinkObj.asset__r.Expected_Growth_Rate__c != null ? goalAssetLinkObj.asset__r.Expected_Growth_Rate__c : 0 );
                   //FS0400
                           //Original Code
                   //annualContribution = (goalAssetLinkObj.asset__r.Annual_Contribution__c != null ? (goalAssetLinkObj.asset__r.Annual_Contribution__c) * (allocatedPercent/100): 0 );
                   annualContribution = (goalAssetLinkObj.asset__r.Annual_Contribution__c != null ? (goalAssetLinkObj.asset__r.Annual_Contribution__c) * (goalAssetLinkObj.Allocated__c/100): 0 );
                   if(goalAssetLinkObj.asset__r.CalculatedInterestRate__c != null) 
                   {
                       /** Eternus Solutions       **/
                       /** Author  : Manasi Ranade **/
                       /** Issue Id: FS0110      **/
                       /** Date    : 18/08/2011   **/
                       /** Purpose : If RecordType is : 'Deposits With Bank' then consider the interest rate of current deposit  
                                             else fetch it from CalculatedInterestRate__c  
                       /****************************************************/
                       //If RecordType is : 'Deposits With Bank' then consider the interest rate of current deposit else fetch it from CalculatedInterestRate__c
                       if(goalAssetLinkObj.asset__r.RecordType.Name.equals('Deposits With Bank') 
                           || goalAssetLinkObj.asset__r.RecordType.Name.equals('Retirement Accounts')
                           || goalAssetLinkObj.asset__r.RecordType.Name.equals('Govt. Saving Schemes'))
                       {
                            if(goalAssetLinkObj.asset__r.Interest_Rate__c != null)
                                  interestRate = Double.valueOf(String.valueOf(goalAssetLinkObj.asset__r.Interest_Rate__c));
                            else
                            {
                                  interestRate = 0;
                                  setInfoMessage('Please fill the Interest rate for allocated asset: '+goalAssetLinkObj.asset__r.RecordType.Name);
                            }
                       }
                       else
                           interestRate = Double.valueOf(String.valueOf(goalAssetLinkObj.asset__r.CalculatedInterestRate__c));
                       //interestRate  = 8.5;
                   }             
                   if(interestRate == null) 
                   {
                       setInfoMessage('Interest Rate is not valid for some assets.');
                       continue;
                   }
                   
                   /** Eternus Solutions       **/
                   /** Author  : Manasi Ranade **/
                   /** Issue Id: FS0191      **/
                   /** Date    : 12/10/2011   **/
                   /** Purpose : Assign growthRate to Interest rate to fetch it on Goal Output page
                   /****************************************************/
                   
                   if(goalAssetLinkObj.asset__r.RecordType.Name.equals('Real Estate Assets') || 
                     goalAssetLinkObj.asset__r.RecordType.Name.equals('Business Assets') || 
                     goalAssetLinkObj.asset__r.RecordType.Name.equals('Personal Assets'))
                   {
                     interestRate = growthRate;
                   }
                  //FS0400
                  //Original Code
                  //goalMappingBeanMapByGoalId.get(goalId).populateGoalAseetMapping(goalAssetLinkObj,goalAssetLinkObj.id,description, goalAssetLinkObj.asset__r.entity__r.name,
                  Double matValue;
                  if(goalAssetLinkObj.Maturity_Value__c != null)
                      matValue = goalAssetLinkObj.Maturity_Value__c;    /* Prajakta - FP changes - 28-03-2013 */
                  goalMappingBeanMapByGoalId.get(goalAssetLinkObj.goal__c).populateGoalAseetMapping(goalAssetLinkObj, goalAssetLinkObj.id, description,
                                                             goalAssetLinkObj.asset__r.entity__r.name,
<<<<<<< .mine
                                                            allocatedAmount,
                                                            interestRate,
                                                            startYear,
                                                            endYear,
                                                            goalAssetLinkObj.asset__r.action__c,
                                                            'Asset',
                                                            goalAssetLinkObj.GoalYearValue__c.doubleValue(),
                                                            growthRate,
                                                            annualContribution,
                                                            0.0d, 
                                                            newDescription,/** Issue Id: 00001614, Author: Mahesh Hirugade --> added parameter "newDescription" **/
                                                            allocatedPercent, 
                                                            matValue,  /* Prajakta - FP changes - 28-03-2013 */
                                                            goalAssetLinkObj.Allocation_Order__c);/* Anupam - Add new parameter AllocationOrder*/
=======
                                                                            allocatedAmount,
                                                                            interestRate,
                                                                            startYear,
                                                                            endYear,
                                                                            goalAssetLinkObj.asset__r.action__c,
                                                                            'Asset',
                                                                            goalAssetLinkObj.GoalYearValue__c.doubleValue(),
                                                                            growthRate,
                                                                            annualContribution,
                                                                            0.0d, 
                                                                            newDescription,
                                                                            allocatedPercent, 
                                                                            matValue,  /* Prajakta - FP changes - 28-03-2013 */
                                                                            goalAssetLinkObj.Allocation_Order__c); /* Anupam - Add new parameter AllocationOrder*/
>>>>>>> .r14313
                        
             }  
             
             System.debug('------------------goalMappingBeanMapByGoalId 2--------------'+goalMappingBeanMapByGoalId);     
              
    }
    
       /*   
        This is helper method to retrieve associated Investment Assets for parent and child entity for all goals.
    */    
      private void getAssociatedInvestmentAssetsExceptFixedIncome(List<String> goalIdList,String entityId) 
      {
          //FS0400
            //Original Code
          /*List<AggregateResult> goalInvAssetAssociationList = databaseSOQLObj.getGoalInvestmentAssociationList(entityId, goalIdList);*/
          String description;//,goalId;
          Double allocatedAmount = 0 ,expectedGrowthRate = 0 ,totalAssetValue,goalYearValue =0;
          Double allocatedPercent = 0;        
          GoalMappingBean mappingBean;
                
          try 
          {
              //system.debug('********goalInvAssetAssociationList:'+goalInvAssetAssociationList.size());
              //FS0400
              //Original Code
              //for(AggregateResult goalInvAssetLinkObj : goalInvAssetAssociationList) {
               for(AggregateResult goalInvAssetLinkObj : databaseSOQLObj.getGoalInvestmentAssociationList(entityId, goalIdList)) 
               {
                  description = (String)goalInvAssetLinkObj.get('recordTypeName');
                //FS0400 //Original Code
                //goalId = (String)goalInvAssetLinkObj.get('Goal__c');

                  if(goalInvAssetLinkObj.get('allocatedPercent') != null) 
                  {
                       allocatedPercent = (Decimal) goalInvAssetLinkObj.get('allocatedPercent');
                  }
              
                  totalAssetValue = (Double) goalInvAssetLinkObj.get('TotalAsset');
                     if(allocatedPercent == null) 
                     {
                          //setInfoMessage('Allocated Percent is not set.');
                          continue;
                     }

                  allocatedAmount = (totalAssetValue)* (allocatedPercent/100);
                  
                  if(globalAssumptions == null) 
                  {
                      setInfoMessage('Global Assumption does not exist for this client.');
                       continue;
                  }

                  if(goalInvAssetLinkObj.get('GoalYearValue__c') != null)
                       goalYearValue = ((Decimal)goalInvAssetLinkObj.get('GoalYearValue__c')).doubleValue();
                  
                  /** Eternus Solutions       **/
                       /** Author  : Manasi Ranade **/
                       /** Issue Id: FS0191      **/
                       /** Date    : 11/10/2011   **/
                       /** Purpose : Fetched growth rate to display it on Goal Output page
                       /****************************************************/
                  String strRecordType = (String) goalInvAssetLinkObj.get('recordTypeName');
                    
                    if(strRecordType.equals('Stocks'))
                    {   
                      system.debug('****globalAssumptions.Stock_Growth_Rate__c*******'+globalAssumptions.Stock_Growth_Rate__c);
                        expectedGrowthRate =  globalAssumptions.Stock_Growth_Rate__c;
                    }
                    /* Prajakta - FP changes - 01-04-2013 */
                    else if(strRecordType.equals('Gold'))    
                    {
                      if(globalAssumptions.Gold_Growth_Rate__c != null)   
                           expectedGrowthRate =  globalAssumptions.Gold_Growth_Rate__c;
                    }
                    else
                      expectedGrowthRate = globalAssumptions.Income_Growth_Rate__c; // There should be some other field
                    
                  try 
                  {  
            goalMappingBeanMapByGoalId.get((String)goalInvAssetLinkObj.get('Goal__c')).populateGoalAseetMapping(goalInvAssetLinkObj,
                            '0',description,(String) goalInvAssetLinkObj.get('entityName'),
                                                     allocatedAmount, expectedGrowthRate , null ,null , 
                                                     (String) goalInvAssetLinkObj.get('action'),'InvAsset',goalYearValue,0.0d , 0.0d,0.0d,
<<<<<<< .mine
                                                     '-',allocatedPercent, /* Prajakta - FP changes - 14-03-2013 . Anupam - Add new parameter AllocationOrder*/
                                                     0, 	/* Prajakta - FP changes - 29-04-2013 - Added maturity value of investment asset */
=======
                                                     '-',allocatedPercent,  /* Prajakta - FP changes - 14-03-2013 . Anupam - Add new parameter AllocationOrder*/
                                                     goalYearValue,   /* Prajakta - FP changes - 29-04-2013 - Added maturity value of investment asset */
>>>>>>> .r14313
                                                     Integer.valueOf(goalInvAssetLinkObj.get('allocationOrder')));/** Issue Id: 00001614, Author: Mahesh Hirugade --> added parameter "-" **/
                    } 
                    catch(Exception ex) 
                    {
                                  //ApexPages.addMessages(ex);
                    }              
                }
             } 
             catch(Exception ex) 
             {
              throw new GeneralException('NewGoalService.getAssociatedInvestmentAssetsExceptFixedIncome : Internal Error ' + ex.getMessage());
      }                
      }
  
 /*
    Manasi : Created new function to fetch each Allocated Investment Asset Saperately 
    */
    /** Eternus Solutions       **/
       /** Author  : Manasi Ranade **/
       /** Issue Id: FS0164      **/
       /** Date    : 27/9/2011    **/
       /** Purpose : Created new function to fetch each Allocated Investment Asset Saperately.And calculate the allocated amount,Maturity Year
       /****************************************************/
    private void getAssociatedInvestmentAssetsseparately(List<String> goalIdList,String entityId)
    {
       //FS0400
              //Original Code
       /*List<GoalInvestmentAssetAssociation__c> goalInvAssetAssociationList =
       databaseSOQLObj.getGoalInvestmentAssociationListSeparately(entityId, goalIdList);*/
       
         String description;
         Double allocatedAmount = 0,growthRate = 0;
        Double allocatedPercent = 0;
        //Double maturityValue = 0; /* Prajakta - FP changes - 14-03-2013 */
        Double totalAssetValue,premiumAmount;
        Integer totalPeriod,startYear,maturityYear;
        GoalMappingBean mappingBean;
        Double maturityAmount = 0 ;
        String FIdescription = null; /* Prajakta - FP changes - 25-02-2013 */
        
        try 
        {
          //FS0400
            //Original Code
            //for(GoalInvestmentAssetAssociation__c goalInvestmentAssetLinkObj : goalInvAssetAssociationList)
            for(GoalInvestmentAssetAssociation__c goalInvestmentAssetLinkObj : databaseSOQLObj.getGoalInvestmentAssociationListSeparately(entityId, goalIdList))
            {
              description = goalInvestmentAssetLinkObj.Investment_Asset__r.recordType.Name;
                if(description.equals('Fixed Income'))
                {
                  if((goalInvestmentAssetLinkObj.Investment_Asset__r.TotalAsset__c == null)) 
                  {
                      setInfoMessage('Please check the maturity value of the allocated Investment asset');
            continue;
          }
                    if((goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Date__c == null)) 
                    {
                      setInfoMessage('Please check the maturity date of the allocated Investment asset');
                      continue;
                    }
                  
                  /* Prajakta - FP changes - 21-02-2013 */
                  Datetime dtReport = goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Date__c;
          String strDate = '';
                  if(dtReport != null)
            strDate  = dtReport.day() + '-' + dtReport.month() + '-' + dtReport.year();
                  FIdescription = goalInvestmentAssetLinkObj.Investment_Asset__r.Description__c + ' -- ' + strDate;
                }
               
                allocatedPercent = goalInvestmentAssetLinkObj.Allocated__c; 
                if(goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Date__c != null)
                  maturityYear = goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Date__c.year();
                   
                if(goalInvestmentAssetLinkObj.Investment_Asset__r.TotalAsset__c != null)
                  allocatedAmount = (goalInvestmentAssetLinkObj.Investment_Asset__r.TotalAsset__c)* (allocatedPercent/100);
                  
                   /** Eternus Solutions       **/
                           /** Author  : Dipak Nikam **/
                           /** Case Number :00001511 **/
                           /** Date    : 22/02/2012   **/
                           /** Purpose : maturity value will grow as per the goal profile in  Progressive Asset Allocation from the  Maturity year to goal Year.
                                                  Added maturityAmount =  (goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Value__c);.
                           /****************************************************/
                  
                if(goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Value__c != null)
                  maturityAmount = (goalInvestmentAssetLinkObj.Investment_Asset__r.Maturity_Value__c);
                  
                Double dblAllacation =  allocatedPercent/100;
                   /** Eternus Solutions       **/
                           /** Author  : Manasi Ranade **/
                           /** Issue Id: FS0191      **/
                           /** Date    : 11/10/2011   **/
                           /** Purpose : Fetched Goal Year value to display it on Goal OutPut Page
                           /****************************************************/
                Double goalYearValue = 0; 
                if(goalInvestmentAssetLinkObj.get('GoalYearValue__c') != null)
                {
                  goalYearValue = ((Decimal)goalInvestmentAssetLinkObj.get('GoalYearValue__c')).doubleValue();
                }
              
                try
                {
                  goalMappingBeanMapByGoalId.get(goalInvestmentAssetLinkObj.goal__c).populateGoalAseetMapping(goalInvestmentAssetLinkObj,
                                  goalInvestmentAssetLinkObj.id,description, goalInvestmentAssetLinkObj.Investment_Asset__r.Entity__r.Name,
                                                    allocatedAmount, growthRate , startYear ,maturityYear ,goalInvestmentAssetLinkObj.Investment_Asset__r.action__c,
                                                    'InvAssetFixedIncome',goalYearValue, 0.0d, 0.0d,maturityAmount, 
                                                    //'-',/** Issue Id: 00001614, Author: Mahesh Hirugade --> added parameter "-" **/
                                                    FIdescription, /* Prajakta - FP changes - 25-02-2013 */
                                                    allocatedPercent, /* Prajakta - FP changes - 14-03-2013 Anupam - Add new parameter AllocationOrder*/
                                                    maturityAmount, 	/* Prajakta - FP changes - 29-04-2013 - Added maturity value of investment asset */
                                                    goalInvestmentAssetLinkObj.Allocation_Order__c);
                }
                catch(Exception ex)
                {
                  ApexPages.addMessages(ex);
                }
            }
        }
        catch(Exception ex)
        {
                     
        }
    }
    
    /*   
        This is helper method to retrieve associated Insurance records for parent and child entity for all goals.
    */        
    private void getAssociatedInsuranceAssets(List<String> goalIdList,String entityId) 
    {
      //FS0400
        //Original Code
        /*List<GoalInsuranceAssociation__c> goalInsuranceAssociationList = 
                                                databaseSOQLObj.getGoalInsuranceAssociationList(entityId, goalIdList);*/
        String description;
        String newDescription;//Issue Id: 00001614
        Double allocatedAmount = 0,growthRate = 0;
        Double allocatedPercent = 0;
        Double maturityValue = 0;   /* Prajakta - FP changes - 14-03-2013 */
        Double totalAssetValue,premiumAmount;
        Integer totalPeriod,startYear;
        GoalMappingBean mappingBean;        
        try 
        {
            for(GoalInsuranceAssociation__c goalInsuranceLinkObj : databaseSOQLObj.getGoalInsuranceAssociationList(entityId, goalIdList)) 
            {
              	description = goalInsuranceLinkObj.insurance__r.Policy_Type__c;
				
                /** Eternus Solutions : Mahesh Hirugade : 00001614 : 09/05/2012 : Assigned value to newDescription ***/
              	if(goalInsuranceLinkObj.insurance__r.Insurance_Company__c != null)
        		{
          			if(goalInsuranceLinkObj.insurance__r.Policy_Name__c != null)
          			{
            			newDescription = goalInsuranceLinkObj.insurance__r.Policy_Number__c != null ? 
                                     (goalInsuranceLinkObj.insurance__r.Insurance_Company__c + ' -- ' + goalInsuranceLinkObj.insurance__r.Policy_Name__c + ' -- ' + goalInsuranceLinkObj.insurance__r.Policy_Number__c)
                                     :
                                     (goalInsuranceLinkObj.insurance__r.Insurance_Company__c + ' -- ' + goalInsuranceLinkObj.insurance__r.Policy_Name__c);
          			}
          			else
            			newDescription = goalInsuranceLinkObj.insurance__r.Policy_Number__c != null ? (goalInsuranceLinkObj.insurance__r.Insurance_Company__c + ' -- ' + goalInsuranceLinkObj.insurance__r.Policy_Number__c) : (goalInsuranceLinkObj.insurance__r.Insurance_Company__c);
        		}
        		else
        		{
          			if(goalInsuranceLinkObj.insurance__r.Policy_Name__c != null)
            			newDescription = goalInsuranceLinkObj.insurance__r.Policy_Number__c != null ? (goalInsuranceLinkObj.insurance__r.Policy_Name__c + ' -- ' + goalInsuranceLinkObj.insurance__r.Policy_Number__c) : goalInsuranceLinkObj.insurance__r.Policy_Name__c;
          			else if(goalInsuranceLinkObj.insurance__r.Policy_Number__c != null)
              			newDescription = goalInsuranceLinkObj.insurance__r.Policy_Number__c;
        		}
                /**************** mahesh - End:00001614 *******************/
                if(goalInsuranceLinkObj.Allocated__c == null) 
                {
                   //setInfoMessage('Allocated percent is not set for some insurance records.');
                	continue;
                }
                if((goalInsuranceLinkObj.insurance__r.Tenure_of_Insurance__c == null)) 
                {
                  	setInfoMessage('Tenure of Insurance is NULL for some insurance records.');
                    continue;
                }
                if(goalInsuranceLinkObj.insurance__r.Commencement_Date__c == null) 
                {
                     setInfoMessage('Commencement Date is NULL for some insurance records.');
                     continue;
                }             
                
                growthRate  = LifeInsuranceInterest__c.getInstance(description).Rate__c;
                
                if(growthRate == null) 
                {
                     setInfoMessage('Policy Type is not correct , Ignoring Insurance Record. Policy Type = ' + description) ;
                     continue;
                }
                //Commented following code used Surrender_Cash_Value__c instead of TatalAsset
                //totalAssetValue = goalInsuranceLinkObj.insurance__r.totalAsset__c;
                /** Eternus Solutions       **/
                 /** Author  : Manasi Ranade **/
                 /** Issue Id: FS0165       **/
                 /** Date    : 27/9/2011    **/
                 /** Purpose : Code to calculate the current amount of Insurance at current time
                 /****************************************************/
                if(goalInsuranceLinkObj.insurance__r.Surrender_Cash_Value__c != null)
                  	totalAssetValue = goalInsuranceLinkObj.insurance__r.Surrender_Cash_Value__c;
                else
                {
                  	AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                  	if(insuranceMap.containsKey(goalInsuranceLinkObj.Insurance__C))
                    {
                      	Insurance__c objInsurance =insuranceMap.get(goalInsuranceLinkObj.Insurance__C);
                     	 Double dblOneInstallmentPremiumAmount = 0;
                        //FS0287
                        //if(!objInsurance.Premium_Frequency__c.equals('One Time Premium'))
                        dblOneInstallmentPremiumAmount = objInsurance.Premium_Amount_Rs__c;
                        //FS0400
                         //Original Code
                        //Integer iTenureOfInsurance = Integer.valueOf(objInsurance.Tenure_of_Insurance__c);
                        Integer iMaturityYear = Integer.valueOf(objInsurance.Tenure_of_Insurance__c) + objInsurance.Commencement_Date__c.year();
                        /*Integer iCurrentYearForCalculation = 0;
                        if(Date.today().year() > iMaturityYear)
                               iCurrentYearForCalculation = iMaturityYear;
                        else
                               iCurrentYearForCalculation = Date.today().year();*/
                        //FS0400
                         //Original Code
                         Integer iCurrentYearForCalculation = ((Date.today().year() > iMaturityYear) ? iMaturityYear : Date.today().year());
                        //FS0400
                         //Original Code
                        //Integer totalPeriodInYears =  iCurrentYearForCalculation - objInsurance.Commencement_Date__c.year();//
                        if(objInsurance.Surrender_Cash_Value__c == null)
                        {
                             totalAssetValue = objAssetAllocationService.GetInsuranceAmountForPeriod(objInsurance,iCurrentYearForCalculation - objInsurance.Commencement_Date__c.year(), dblOneInstallmentPremiumAmount);
                        }
                    }
                    else
                    {
                         /** Eternus Solutions       **/
                         /** Author  : Manasi Ranade **/
                         /** Issue Id: FS0183       **/
                         /** Date    : 7/10/2011    **/
                         /** Purpose : Added code to assign default value to Insurance's asset value.
                         /****************************************************/
                           totalAssetValue = 0;
                    }
                }
                if(totalAssetValue == 0) 
                {
                     setInfoMessage('There are some insurance with 0 value in system.');
                     continue;
                }            
                //premiumAmount = Double.valueOf(String.valueOf(goalInsuranceLinkObj.insurance__r.annual_premium_amount__c).trim());
                //totalAssetValue = FinancialUtil.calculateCompound(premiumAmount,totalPeriod,growthRate);
                allocatedPercent = goalInsuranceLinkObj.Allocated__c;
                //error.debugLog('----------Goal Year Value insurance------------'+goalInsuranceLinkObj.GoalYearValue__c.doubleValue());
                totalPeriod = Integer.valueOf(String.valueOf(goalInsuranceLinkObj.insurance__r.Tenure_of_Insurance__c).trim());
                startYear = goalInsuranceLinkObj.insurance__r.Commencement_Date__c.year();                           
                allocatedAmount = (totalAssetValue)* (allocatedPercent/100);
<<<<<<< .mine
                
                maturityValue = goalInsuranceLinkObj.insurance__r.Maturity_Amount__c;
                //error.DebugLog('=====maturityValue======'+maturityValue);
                 
=======
                
                /* Prajakta - FP changes - 06-05-2013 - If Revised Maturity Amount is present then it will be maturity value of insurance*/
                Double revisedMaturityAmount = goalInsuranceLinkObj.insurance__r.Revised_Maturity_Amount__c;
              	if(revisedMaturityAmount != 0.0 && revisedMaturityAmount != null)
            		maturityValue = revisedMaturityAmount;
            	else
                	maturityValue = goalInsuranceLinkObj.insurance__r.Maturity_Amount__c;
                //error.DebugLog('=====maturityValue======'+maturityValue);
                
>>>>>>> .r14313
                try
                {
                   goalMappingBeanMapByGoalId.get(goalInsuranceLinkObj.goal__c).populateGoalAseetMapping(goalInsuranceLinkObj,
<<<<<<< .mine
                                                   goalInsuranceLinkObj.id,description, goalInsuranceLinkObj.insurance__r.Entity__r.Name,
                                                   allocatedAmount, growthRate , startYear ,startYear + totalPeriod,
                                                   goalInsuranceLinkObj.insurance__r.action__c,'Insurance',
                                                   goalInsuranceLinkObj.GoalYearValue__c.doubleValue(), 0.0d, 0.0d,0.0d,
                                                   newDescription,allocatedPercent, /* Prajakta - FP changes - 14-03-2013 .Anupam - Add new parameter AllocationOrder*/
                                                   maturityValue, /* Prajakta - FP changes - 29-04-2013 - Added maturity value of insurance */
                                                   goalInsuranceLinkObj.Allocation_Order__c);/** Issue Id: 00001614, Author: Mahesh Hirugade --> added parameter "newDescription" **/
=======
                                                           goalInsuranceLinkObj.id,description, goalInsuranceLinkObj.insurance__r.Entity__r.Name,
                                                           allocatedAmount, growthRate , startYear ,startYear + totalPeriod,
                                                           goalInsuranceLinkObj.insurance__r.action__c,'Insurance',
                                                           goalInsuranceLinkObj.GoalYearValue__c.doubleValue(), 0.0d, 0.0d,0.0d,
                                                           newDescription,
                                                           allocatedPercent, /* Prajakta - FP changes - 14-03-2013 .Anupam - Add new parameter AllocationOrder*/
                                                           maturityValue, /* Prajakta - FP changes - 29-04-2013 - Added maturity value of insurance */
                                                           goalInsuranceLinkObj.Allocation_Order__c);/** Issue Id: 00001614, Author: Mahesh Hirugade --> added parameter "newDescription" **/
>>>>>>> .r14313
                }
                catch(Exception ex) 
                {
                       //ApexPages.addMessages(ex);
                }
            }
        }
        catch(Exception ex) 
        {
              throw new GeneralException('NewGoalService.getAssociatedInsuranceAssets : Internal Error ' + ex.getMessage());
        }   
    }
    
    /*   
        This method has logic to be applied on associated assets to know exact target amount after applying assets.
        It has logic based on different types of action associated with assets
        
        Modified By : Niket Chandane.
        Modified On : 10 June 2011.
        Summary      : Update the Logic to calculate the Goal amount which is displayed on the Goal Calculation page.
                             This calculation changes depends upon the action which is selected from the picklist of the Asset allocation page
                             to perticular goal.
                             1] To be grown till maturity but continuous.
                             2] To be grown till maturity and stop saving.
       
    */
    
    public Boolean isAssetAllocationStartYear = true;
    private Integer iAssetAllocationStartYear = System.today().year();
    
    private Double applyAllocatedAssetsOnGoalAmount(GoalMappingBean bean ,Goal_Profile__c startingProfile, Double targetAmount ,Integer currYear ,Integer goalYear, String savingType,Integer goalFrequency) 
    {
      	System.debug('-----------------------bean.goalAssetMappingBeanList----------------'+bean.goalAssetMappingBeanList);
      	Double remainingAmount, assetMaturedAmount, growthRate ,pvAmount ,rate;
        Integer assetStartYear,maturityYear;
        try 
        {
        	for(GoalMappingBean.GoalAssetMappingBean goalAssetMappingBean :  bean.goalAssetMappingBeanList)
            {
                remainingAmount = goalAssetMappingBean.remainingAmount;
            
                // maturity year of asset allocated to perticular goal
                maturityYear = goalAssetMappingBean.endYear;
            
                // start year of asset allocated to perticular goal
                assetStartYear = goalAssetMappingBean.startYear;
            
                // This condition should have check on Investment asset
              	if('InvAsset'.equals(goalAssetMappingBean.assetAssociationType) && (goalAssetMappingBean.startYear == null)){ 
                  	assetStartYear = System.today().year();
                  	maturityYear =  goalYear;
                }
                
                if(targetAmount == 0) continue;
                  
                if(isAssetAllocationStartYear){
                  	isAssetAllocationStartYear = false;
                  	iAssetAllocationStartYear = goalYear;
              	}
              	
                /*Niket 
                  Summary : Need this change for the Goal Calculation, Which need to change because we need to perform to different logics 
                  for 1] if assets align to goal with action "To be grown till maturity and continue saving"
                      2] if assets align to goal with action "To be grown till maturity but stop saving more"
                      
                  Note : 1] "Action1" is a Custome setting Contains the value => To be grown till maturity and continue saving
                         2] "Action2" is a Custome setting Contains the value => To be grown till maturity but stop saving more
                         3] "Action3" is a Custome setting Contains the value => Liquidate (Align to goal)
                         4] "Action4" is a Custome setting Contains the value => Liquidate (Sell)
                         5] "Action5" is a Custome setting Contains the value => Hold ==>Hold (Align to goal)
                         6] "Action6" is a Custome setting Contains the value => Sell ==>Liquidate (Align to goal)
                */
                 
                if(Allocation_Action__c.getInstance('Action1').Action__c.equalsIgnoreCase(goalAssetMappingBean.action) ||
                   Allocation_Action__c.getInstance('Action2').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))
                {
                    AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                    GoalInsuranceAssociation__c objGoalInsuranceAssociation;
                    
                    if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Insurance'))
                      	objGoalInsuranceAssociation = (GoalInsuranceAssociation__c)goalAssetMappingBean.assetObj;
                      
                    if(remainingAmount == null) 
                    { 
                         // calculate Matured amount and grow if needed
                        if(maturityYear > goalYear) 
                            continue;
                       
                        if(Allocation_Action__c.getInstance('Action2').Action__c.equalsIgnoreCase(goalAssetMappingBean.action) && 
                              goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Insurance'))
                        {
                            /*Manasi
                                 1. Maturity amount of Insurance is wrong when we select Action2
                                 2. Calculation of current value: 
                                    If Surender amount is not null then fetch it else runtime calculate the value.  
                            */
                            if(insuranceMap.containsKey(objGoalInsuranceAssociation.Insurance__C))
                            {
                                Insurance__c objInsurance =insuranceMap.get(objGoalInsuranceAssociation.Insurance__C);
                                Double dblOneInstallmentPremiumAmount = 0;
                                //FS0287
                                //if(!objInsurance.Premium_Frequency__c.equals('One Time Premium'))
                                /** Eternus Solutions       **/
                                /** Author  : Manasi Ranade **/
                                /** Issue Id: 00001622     **/
                                /** Date    : 8/5/2012           **/
                                /** Purpose : Commented following part.
                                              No need to overwrite the value of goalAssetMappingBean.allocatedAmount
                                              It is set in function getAssociatedInsuranceAssets
                                /****************************************************/
                                /*dblOneInstallmentPremiumAmount = objInsurance.Premium_Amount_Rs__c;
                                Integer iTenureOfInsurance = Integer.valueOf(objInsurance.Tenure_of_Insurance__c);
                                Integer iMaturityYear = iTenureOfInsurance + objInsurance.Commencement_Date__c.year();
                                Integer iCurrentYearForCalculation = 0;
                                if(Date.today().year() > iMaturityYear)
                                      iCurrentYearForCalculation = iMaturityYear;
                                else
                                      iCurrentYearForCalculation = Date.today().year();
                                Integer totalPeriodInYears =  iCurrentYearForCalculation - objInsurance.Commencement_Date__c.year();//
                                if(objInsurance.Surrender_Cash_Value__c == null)
                                       goalAssetMappingBean.allocatedAmount = objAssetAllocationService.GetInsuranceAmountForPeriod(objInsurance,totalPeriodInYears, dblOneInstallmentPremiumAmount);
                                else
                                       goalAssetMappingBean.allocatedAmount = objInsurance.Surrender_Cash_Value__c;*/
                                /*1.Here 2nd parameter of calculateCompound function is (Maturity year - Current Year) .
                                  2.Because we are condering current amount of insurance.
                                  3.In case of other asset classes,that parameter will be (Maturity year - Asset start year)
                                  4.Reason :If we create FD and Insurance, 2 years before with amount 5000 each, 
                                        then current value of FD will be 5000 and Insurance will be 5500 */
                                if((maturityYear - System.today().year()) > 0)
                                {
                                      assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,( maturityYear - System.today().year()),goalAssetMappingBean.growthRate);
                                      /* Prajakta FP changes - 02-04-2013 */
                                      Double revisedMaturityAmount = objInsurance.Revised_Maturity_Amount__c;
                                    
                                      if(revisedMaturityAmount != 0.0 && revisedMaturityAmount != null)
                                      {   
                                    		assetMaturedAmount = revisedMaturityAmount;
                                    		//error.debugLog('--------revisedMaturityAmount action2--------'+assetMaturedAmount);
                                      }
                                }
                                else
                                {
                                      assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                }
                            }
                        }
                        else
                        {
                          /** Eternus Solutions       **/
                             /** Author  : Manasi Ranade **/
                             /** Issue Id: FS0164      **/
                             /** Date    : 27/9/2011    **/
                             /** Purpose : Fetch the maturity amount from goalMappingBean object
                             /****************************************************/
                            if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('InvAssetFixedIncome'))
                            {
                                 /*AggregateResult  objGoalInvestmentAssetAssociation = (AggregateResult )goalAssetMappingBean.assetObj;
                                 //AggregateResult  objAggrResult = (AggregateResult)goalAssetMappingBean.assetObj;
                                 assetMaturedAmount = Double.valueOf(objGoalInvestmentAssetAssociation.get('TotalAsset'));*/
                                 //GoalInvestmentAssetAssociation__c objInvestmentAsset = (GoalInvestmentAssetAssociation__c)goalAssetMappingBean.assetObj;
                                 
                                 assetMaturedAmount = goalAssetMappingBean.maturityAmount;
                                 maturityYear = goalAssetMappingBean.endYear;
                                 //error.debugLog('----AMA----InvAssetFixedIncome--------'+assetMaturedAmount);
                                 //Investment_Asset__c objInvestmentAsset =investmentAssetMap.get(objGoalInvestmentAssetAssociation.Investment_Asset__c);
                                 //assetMaturedAmount = objInvestmentAsset.Maturity_Value__c;
                                  
                            }
                            else
                            {
                                 //Maturity amount should be calculated from Current year to Maturity year.So changed ( maturityYear - assetStartYear) to ( maturityYear - Date.today().year())
                                 /** Eternus Solutions  : Manasi Ranade : 00001552 : 15/03/2012 : 
                                 Previously First parameter for calculateCompound was Maturity amount.Changed it to Allocated amount**/ 
                                if((maturityYear - System.today().year()) > 0)
                                {
                                    assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,( maturityYear - Date.today().year()),goalAssetMappingBean.growthRate);
                                    //error.debugLog('--If--AMA----InvAsset-------->'+assetMaturedAmount);
                                }
                                else
                                {
                                    assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                    //error.debugLog('--else--AMA----InvAsset-------->'+assetMaturedAmount);
                                }
                          	}
                        }
                        
                        if(Allocation_Action__c.getInstance('Action2').Action__c.equalsIgnoreCase(goalAssetMappingBean.action)) 
                        {
                          //if((maturityYear) < goalYear)
                             {
                              	rate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList,goalYear - maturityYear),100,goalYear - maturityYear);
                                //error.debugLog('-------- action2-----khalcha---'+assetMaturedAmount+' - '+goalYear+' - '+maturityYear+' - '+rate);
                                assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,goalYear - maturityYear,rate);
                                //assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,maturityYear - goalYear,rate);
                                //error.debugLog('-------- action2-----khalcha---'+assetMaturedAmount);
                             }
                        }
                        /*
                          Modified By : Niket Chandane
                          Modified On : 9 june 2011
                          Summary       : The growthRateInAnnualContribution and the growthRate is considered in the 
                                               calculation only when "To be grown till maturity and continue saving" is get
                                               selected on the asset allocation page. This calculation can be seen on the 
                                               Allocated Goals calculation's target amount.
                        */
                          
                        else if(Allocation_Action__c.getInstance('Action1').Action__c.equalsIgnoreCase(goalAssetMappingBean.action)) 
                        {
                            //AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                            //Insurance__c objInsurance = getInsuranceDetails(goalAssetMappingBean.Insurance__c);
                            /** Eternus Solutions   **/
                             /** Author  : Manasi Ranade **/
                             /** Issue Id: FS0118      **/
                             /** Date    : 22/08/2011   **/
                             /** Purpose : Code to calculate maturity amount of insurance.
                            /****************************************************/ 
                            if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Insurance'))
                            {
                              /*AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                                GoalInsuranceAssociation__c objGoalInsuranceAssociation = (GoalInsuranceAssociation__c)goalAssetMappingBean.assetObj;*/
                                if(insuranceMap.containsKey(objGoalInsuranceAssociation.Insurance__C))
                                {
                                    /** Eternus Solutions : Manasi Ranade : 00001622 : 8/5/2012           **/
                                    /** Purpose : Commented following part.
                                                    No need to overwrite the value of goalAssetMappingBean.allocatedAmount
                                                    It is set in function getAssociatedInsuranceAssets
                                    /****************************************************/
                                    /** Eternus Solutions : Manasi Ranade : 00001663 : 31/5/2012           **/
                                    /** Purpose : Uncommented following part.
                                                    For Action1 calculate the maturity amount and then apply progressive Rate.
                                    /****************************************************/
                                    Insurance__c objInsurance =insuranceMap.get(objGoalInsuranceAssociation.Insurance__C);// databaseSOQLObj.getInsuranceDetails(objGoalInsuranceAssociation.Insurance__C);
                                    Integer iTenureOfInsurance = Integer.valueOf(objInsurance.Tenure_of_Insurance__c);
                                    Date dtEndDate =  objInsurance.Commencement_Date__c;
                                    dtEndDate = dtEndDate.addYears(iTenureOfInsurance);
                                    Integer totalPeriodInYears =  dtEndDate.year() - objInsurance.Commencement_Date__c.year();
                                        
<<<<<<< .mine
                                    assetMaturedAmount = objAssetAllocationService.GetInsuranceAmountForPeriod(objInsurance, 
                                                                            totalPeriodInYears, 
                                                                            Double.valueOf(objInsurance.Premium_Amount_Rs__c));
                                    //error.debugLog('--------assetMaturedAmount if--------'+assetMaturedAmount);
                                    /* Prajakta FP changes - 02-04-2013 */   
                                    Double revisedMaturityAmount = objInsurance.Revised_Maturity_Amount__c;
                                    
                                    if(revisedMaturityAmount != 0.0 && revisedMaturityAmount != null)
                                    {   
                                    		assetMaturedAmount = revisedMaturityAmount;
                                    		//error.debugLog('--------revisedMaturityAmount if--------'+assetMaturedAmount);
=======
                                          if(revisedMaturityAmount != 0.0 && revisedMaturityAmount != null)
                                          {   
                                            assetMaturedAmount = revisedMaturityAmount;
                                            //error.debugLog('--------revisedMaturityAmount action2--------'+assetMaturedAmount);
                                          }
>>>>>>> .r14313
                                    }
                                                                                             
                                    //assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                    Double dblAllocated = 0;
                                    if(objGoalInsuranceAssociation.Allocated__c != null)
                                    {
                                      String strAllocatedValue = string.valueof(objGoalInsuranceAssociation.Allocated__c);
                                        if(strAllocatedValue != '')
                                        {
                                          dblAllocated = double.valueof(strAllocatedValue);
                                          if(dblAllocated > 0)
                                              assetMaturedAmount = assetMaturedAmount * (dblAllocated / 100);
                                        }
                                        system.debug('=======assetMaturedAmount======zero======'+assetMaturedAmount);
                                    }
                                    //error.debugLog('-------- action1-----AMA---'+assetMaturedAmount);
                                }
                                else
                                  assetMaturedAmount = 0;
                            }
                            else
                            {
                          //Maturity amount will get calculated from Current year to Maturity year. So replaced (maturityYear - assetStartYear) parameter by (maturityYear - Date.today().year())
                             //Manasi FS0305
                             /** Eternus Solutions       **/
                             /** Author  : Manasi Ranade **/
                             /** Issue Id: FS0305      **/
                             /** Date    : 21/11/2011   **/
                             /** Purpose : Fetch the Growth rate in anual contribution for current asset
                             /****************************************************/
                                 
                                Double dblgrowthRateInAnnualContribution = 0;
                                
                                if(goalAssetMappingBean.growthRateInAnnualContribution != null)
                                {
                                    dblgrowthRateInAnnualContribution = goalAssetMappingBean.growthRateInAnnualContribution ;
                                    //dblgrowthRateInAnnualContribution = dblgrowthRateInAnnualContribution / 100;
                                }
                                 
                                if((maturityYear - Date.today().year()) > 0)
                                {
<<<<<<< .mine
                                    //dblAnnualExpextedgrowthRate
                                    //error.DebugLog('-----------all values -----------'+goalAssetMappingBean.allocatedAmount+'---'+maturityYear+'---'+goalAssetMappingBean.growthRate+'---'+goalAssetMappingBean.annualContribution+'---'+dblgrowthRateInAnnualContribution);
                                    assetMaturedAmount = FinancialUtil.calCompoundForAssetGrowth(goalAssetMappingBean.allocatedAmount,(maturityYear - Date.today().year()),goalAssetMappingBean.growthRate,goalAssetMappingBean.annualContribution,dblgrowthRateInAnnualContribution,goalAssetMappingBean.description);
                                    maturityValue = assetMaturedAmount;   /* Prajakta FP changes - 26-03-2013 */
                                    goalAssetMappingBean.maturityValue = maturityValue;
                                    //error.DebugLog('-----555------assetMaturedAmount-----in if------'+assetMaturedAmount);
                                    
                                    //assetMaturedAmount = FinancialUtil.calCompoundForAssetGrowth(goalAssetMappingBean.allocatedAmount,(maturityYear - Date.today().year()),goalAssetMappingBean.growthRate,goalAssetMappingBean.annualContribution,dblAnnualExpextedgrowthRate,goalAssetMappingBean.description);
=======
                                     //Maturity amount should be calculated from Current year to Maturity year.So changed ( maturityYear - assetStartYear) to ( maturityYear - Date.today().year())
                                     /** Eternus Solutions      **/
                                     /** Author  : Manasi Ranade **/
                                     /** Issue Id: 00001552     **/
                                     /** Date    : 15/03/2012   **/
                                     /** Purpose : Previously First parameter for calculateCompound was Maturity amount.Changed it to Allocated amount
                                     /****************************************************/ 
                                     
                                    if((maturityYear - System.today().year()) > 0)
                                    {
                                        assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,( maturityYear - Date.today().year()),goalAssetMappingBean.growthRate);
                                    }
                                    else
                                    {
                                        assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                    }
                              }
                            }
                            
                            if(Allocation_Action__c.getInstance('Action2').Action__c.equalsIgnoreCase(goalAssetMappingBean.action)) 
                            {
                              //if((maturityYear) < goalYear)
                                 {
                                    rate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList,goalYear - maturityYear),100,goalYear - maturityYear);
                                    //error.debugLog('-------- action2-----khalcha---'+assetMaturedAmount+' - '+goalYear+' - '+maturityYear+' - '+rate);
                                    assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,goalYear - maturityYear,rate);
                                    //assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,maturityYear - goalYear,rate);
                                    //error.debugLog('-------- action2-----khalcha---'+assetMaturedAmount);
                                 }
                            }
                            /*
                              Modified By : Niket Chandane
                              Modified On : 9 june 2011
                              Summary       : The growthRateInAnnualContribution and the growthRate is considered in the 
                                                   calculation only when "To be grown till maturity and continue saving" is get
                                                   selected on the asset allocation page. This calculation can be seen on the 
                                                   Allocated Goals calculation's target amount.
                            */
                              
                            else if(Allocation_Action__c.getInstance('Action1').Action__c.equalsIgnoreCase(goalAssetMappingBean.action)) 
                            {
                                //AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                                //Insurance__c objInsurance = getInsuranceDetails(goalAssetMappingBean.Insurance__c);
                                /** Eternus Solutions   **/
                                 /** Author  : Manasi Ranade **/
                                 /** Issue Id: FS0118      **/
                                 /** Date    : 22/08/2011   **/
                                 /** Purpose : Code to calculate maturity amount of insurance.
                                /****************************************************/ 
                                if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('Insurance'))
                                {
                                  /*AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                                    GoalInsuranceAssociation__c objGoalInsuranceAssociation = (GoalInsuranceAssociation__c)goalAssetMappingBean.assetObj;*/
                                    if(insuranceMap.containsKey(objGoalInsuranceAssociation.Insurance__C))
                                    {
                                        /** Eternus Solutions       **/
                                        /** Author  : Manasi Ranade **/
                                        /** Issue Id: 00001622     **/
                                        /** Date    : 8/5/2012           **/
                                        /** Purpose : Commented following part.
                                                        No need to overwrite the value of goalAssetMappingBean.allocatedAmount
                                                        It is set in function getAssociatedInsuranceAssets
                                        /****************************************************/
                                        /** Eternus Solutions       **/
                                        /** Author  : Manasi Ranade **/
                                        /** Issue Id: 00001663     **/
                                        /** Date    : 31/5/2012           **/
                                        /** Purpose : Uncommented following part.
                                                        For Action1 calculate the maturity amount and then apply progressive Rate.
                                        /****************************************************/
                                        Insurance__c objInsurance =insuranceMap.get(objGoalInsuranceAssociation.Insurance__C);// databaseSOQLObj.getInsuranceDetails(objGoalInsuranceAssociation.Insurance__C);
                                        Integer iTenureOfInsurance = Integer.valueOf(objInsurance.Tenure_of_Insurance__c);
                                        Date dtEndDate =  objInsurance.Commencement_Date__c;
                                        dtEndDate = dtEndDate.addYears(iTenureOfInsurance);
                                        Integer totalPeriodInYears =  dtEndDate.year() - objInsurance.Commencement_Date__c.year();
                                            
                                        assetMaturedAmount = objAssetAllocationService.GetInsuranceAmountForPeriod(objInsurance, 
                                                                                totalPeriodInYears, 
                                                                                Double.valueOf(objInsurance.Premium_Amount_Rs__c));
                                        //error.debugLog('--------assetMaturedAmount if--------'+assetMaturedAmount);
                                        /* Prajakta FP changes - 02-04-2013 */   
                                        Double revisedMaturityAmount = objInsurance.Revised_Maturity_Amount__c;
                                        
                                        if(revisedMaturityAmount != 0.0 && revisedMaturityAmount != null)
                                        {   
                                            assetMaturedAmount = revisedMaturityAmount;
                                            //error.debugLog('--------revisedMaturityAmount if--------'+assetMaturedAmount);
                                        }
                                                                                                 
                                        //assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                        Double dblAllocated = 0;
                                        if(objGoalInsuranceAssociation.Allocated__c != null)
                                        {
                                          String strAllocatedValue = string.valueof(objGoalInsuranceAssociation.Allocated__c);
                                            if(strAllocatedValue != '')
                                            {
                                              dblAllocated = double.valueof(strAllocatedValue);
                                              if(dblAllocated > 0)
                                                  assetMaturedAmount = assetMaturedAmount * (dblAllocated / 100);
                                            }
                                            system.debug('=======assetMaturedAmount======zero======'+assetMaturedAmount);
                                        }
                                        //error.debugLog('-------- action1-----AMA---'+assetMaturedAmount);
                                    }
                                    else
                                      assetMaturedAmount = 0;
>>>>>>> .r14313
                                }
                                
                                else
                                {
<<<<<<< .mine
                                    assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                   // error.DebugLog('-----555------assetMaturedAmount-----in else------'+assetMaturedAmount);
                                }     
                                if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('InvAssetFixedIncome'))
=======
                              //Maturity amount will get calculated from Current year to Maturity year. So replaced (maturityYear - assetStartYear) parameter by (maturityYear - Date.today().year())
                                 //Manasi FS0305
                                 /** Eternus Solutions       **/
                                 /** Author  : Manasi Ranade **/
                                 /** Issue Id: FS0305      **/
                                 /** Date    : 21/11/2011   **/
                                 /** Purpose : Fetch the Growth rate in anual contribution for current asset
                                 /****************************************************/
                                     
                                    Double dblgrowthRateInAnnualContribution = 0;
                                    
                                    if(goalAssetMappingBean.growthRateInAnnualContribution != null)
                                    {
                                        dblgrowthRateInAnnualContribution = goalAssetMappingBean.growthRateInAnnualContribution ;
                                        //dblgrowthRateInAnnualContribution = dblgrowthRateInAnnualContribution / 100;
                                    }
                                     
                                    if((maturityYear - Date.today().year()) > 0)
                                    {
                                        //dblAnnualExpextedgrowthRate
                                        //error.DebugLog('-----------all values -----------'+goalAssetMappingBean.allocatedAmount+'---'+maturityYear+'---'+goalAssetMappingBean.growthRate+'---'+goalAssetMappingBean.annualContribution+'---'+dblgrowthRateInAnnualContribution);
                                        assetMaturedAmount = FinancialUtil.calCompoundForAssetGrowth(goalAssetMappingBean.allocatedAmount,
                                        								(maturityYear - Date.today().year()),
                                        								goalAssetMappingBean.growthRate,
                                        								goalAssetMappingBean.annualContribution,
                                        								dblgrowthRateInAnnualContribution,
                                        								goalAssetMappingBean.description);
                                        maturityValue = assetMaturedAmount;   /* Prajakta FP changes - 26-03-2013 */
                                        goalAssetMappingBean.maturityValue = maturityValue;
                                        //error.DebugLog('-----------assetMaturedAmount-----in if------'+assetMaturedAmount);
                                        
                                        //assetMaturedAmount = FinancialUtil.calCompoundForAssetGrowth(goalAssetMappingBean.allocatedAmount,(maturityYear - Date.today().year()),goalAssetMappingBean.growthRate,goalAssetMappingBean.annualContribution,dblAnnualExpextedgrowthRate,goalAssetMappingBean.description);
                                    }
                                    
                                    else
                                    {
                                        assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                    }     
                                    if(goalAssetMappingBean.assetAssociationType.equalsIgnoreCase('InvAssetFixedIncome'))
                                    {
                                      /*AggregateResult  objGoalInvestmentAssetAssociation = (AggregateResult )goalAssetMappingBean.assetObj;
                                      //AggregateResult  objAggrResult = (AggregateResult)goalAssetMappingBean.assetObj;
                                      assetMaturedAmount = Double.valueOf(objGoalInvestmentAssetAssociation.get('TotalAsset'));*/
                                      //GoalInvestmentAssetAssociation__c objInvestmentAsset = (GoalInvestmentAssetAssociation__c)goalAssetMappingBean.assetObj;
                                    
                                      assetMaturedAmount = goalAssetMappingBean.maturityAmount;
                                      system.debug('=======assetMaturedAmount======InvAssetFixedIncome======'+assetMaturedAmount);
                                      maturityYear = goalAssetMappingBean.endYear; 
                                     
                                      //Investment_Asset__c objInvestmentAsset =investmentAssetMap.get(objGoalInvestmentAssetAssociation.Investment_Asset__c);
                                      //assetMaturedAmount = objInvestmentAsset.Maturity_Value__c;
                                    }
                                                              
                                }
                                  
                                if(maturityYear < goalYear)
>>>>>>> .r14313
                                {
<<<<<<< .mine
                                  /*AggregateResult  objGoalInvestmentAssetAssociation = (AggregateResult )goalAssetMappingBean.assetObj;
                                  //AggregateResult  objAggrResult = (AggregateResult)goalAssetMappingBean.assetObj;
                                  assetMaturedAmount = Double.valueOf(objGoalInvestmentAssetAssociation.get('TotalAsset'));*/
                                  //GoalInvestmentAssetAssociation__c objInvestmentAsset = (GoalInvestmentAssetAssociation__c)goalAssetMappingBean.assetObj;
                                
                                  assetMaturedAmount = goalAssetMappingBean.maturityAmount;
                                  //error.debugLog('=======assetMaturedAmount======InvAssetFixedIncome======'+assetMaturedAmount);
                                  maturityYear = goalAssetMappingBean.endYear; 
                                 
                                  //Investment_Asset__c objInvestmentAsset =investmentAssetMap.get(objGoalInvestmentAssetAssociation.Investment_Asset__c);
                                  //assetMaturedAmount = objInvestmentAsset.Maturity_Value__c;
=======
                                        rate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList,goalYear - maturityYear),100,goalYear - maturityYear);
                    					//error.debugLog('=======action1======khalcha======'+assetMaturedAmount+' - '+goalYear+' - '+maturityYear+' - '+rate);
                                        assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,goalYear - maturityYear,rate);
                                        //error.debugLog('=======action1======khalcha======'+assetMaturedAmount);
>>>>>>> .r14313
                                }
                                                          
                            }
                              
                            if(maturityYear < goalYear)
                            {
                                    rate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList,goalYear - maturityYear),100,goalYear - maturityYear);
									//error.debugLog('=======action1======khalcha===55==='+assetMaturedAmount+' - '+goalYear+' - '+maturityYear+' - '+rate);
                                    assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,goalYear - maturityYear,rate);
                                    //error.debugLog('=======action1======khalcha===5==='+assetMaturedAmount);
                            }
                        }
                        remainingAmount = assetMaturedAmount;
                        goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                      goalAssetMappingBean.remainingAmount = remainingAmount;
                    }
                    
                    if(remainingAmount > 0)
                    {
                      if(targetAmount >= remainingAmount) 
                        {
                          targetAmount = targetAmount - remainingAmount;
                            /** Eternus Solutions       **/
                            /** Author  : Manasi Ranade **/
                            /** Issue Id: 00001610     **/
                            /** Date    : 27/4/2012           **/
                            /** Purpose : Function to print the Goal Year and Related sequence of allocation
                            /****************************************************/
                             isAssetAllocationStartYear = true;
                             PrintSequence(goalYear, goalAssetMappingBean.description, goalAssetMappingBean.entityName,remainingAmount,'A');/* Prajakta- 25-03-13 */
                            goalAssetMappingBean.remainingAmount = 0;
                        }
                        else 
                        {
                            //FS0168
                            Double iTempTargetAmount = targetAmount - remainingAmount;
                            remainingAmount = remainingAmount - targetAmount;
                            
                            /** Eternus Solutions : Manasi Ranade - FS0337 - 6/12/2011 **/
                            /** Purpose : Added function to calculate the updated values of remaining amount.
                                                 It should increase by 8% every year
                            /****************************************************/
                            /** Eternus Solutions : Manasi Ranade : 00001536 : 6/3/2012           **/
                            /** Purpose : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                                                  It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1
                            /****************************************************/
                            goalAssetMappingBean.remainingAmount = calculateUpdatedRemainingAmount(remainingAmount,goalFrequency);
                            //goalAssetMappingBean.remainingAmount = remainingAmount;
                            //targetAmount = 0; 
                            targetAmount = iTempTargetAmount;
                          if(targetAmount < 0 && bean.goalEndYear == goalYear)
                                   PrintSequence(goalYear,goalAssetMappingBean.description,goalAssetMappingBean.entityName,remainingAmount,'B');/* Prajakta- 25-03-13 */
                        }
                    }
                    system.debug('=======assetMaturedAmount======action 1 after if===='+assetMaturedAmount);
                }
                   
                /** When Assets are align to Goal with Action Liquidate (Align to goal) **/
                /** Eternus Solutions       **/
                /** Author  : Manasi Ranade **/
                /** Issue Id: FS0117      **/
                /** Date    : 23/08/2011   **/
                /** Purpose : As per the discussion with Haren, Action 3 and Action 6 should work same.So added || condition for Action6
                /****************************************************/
                //FS0403
                /** When Assets are align to Goal with Action Liquidate (Align to goal) **/
                /** Eternus Solutions       **/
                /** Author  : Manasi Ranade **/
                /** Issue Id: FS0117      **/
                /** Date    : 23/08/2011   **/
                /** Purpose : Uncommented the old code related to liquidate Align To Goal
                /****************************************************/
                else if ((Allocation_Action__c.getInstance('Action3').Action__c.equalsIgnoreCase(goalAssetMappingBean.action)))
                               //||(Allocation_Action__c.getInstance('Action6').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))) 
                {
                  system.debug('*****remainingAmount****in Action 3**'+remainingAmount);
                  if(remainingAmount == null)
                     {
                     if(remainingAmount == null) 
                       {
                          remainingAmount = goalAssetMappingBean.allocatedAmount;
                          goalAssetMappingBean.goalYearValue =  remainingAmount;
                          system.debug('******goalAssetMappingBean.goalYearValue**in if***'+goalAssetMappingBean.goalYearValue);
                       }
                       if(remainingAmount == 0) 
                       {
                        continue;
                       }
                     
                         if('InvAsset'.equals(goalAssetMappingBean.assetAssociationType) ||
                         'Asset'.equals(goalAssetMappingBean.assetAssociationType) || 
                          'InvAssetFixedIncome'.equals(goalAssetMappingBean.assetAssociationType) ) 
                        {
                          //If selected asset is 'Real Estate Assets' then grow it by 10%
                            //goalAssetMappingBean.asset__r.RecordType.Name.
                          system.debug('******e**in if***'+goalAssetMappingBean.goalYearValue);
                            //if(Date.today().year() < goalYear)
                            {   
                              growthRate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList, goalYear - currYear), 100, (goalYear- currYear));
                                assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount, (goalYear - currYear ), growthRate);
                                remainingAmount = assetMaturedAmount;
                              goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                              goalAssetMappingBean.remainingAmount = remainingAmount;
                            }
                            //error.debugLog('========assetMaturedAmount=======investment asset====='+assetMaturedAmount);
                                  
                        }
                        else if('Insurance'.equals(goalAssetMappingBean.assetAssociationType)) 
                        { 
                          // Consider total Asset value here. Don't need to grow
                             //if(Date.today().year() < goalYear)
                             {
                              //To calculate current value of insurance
                                AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                                GoalInsuranceAssociation__c objGoalInsuranceAssociation;
                                objGoalInsuranceAssociation = (GoalInsuranceAssociation__c)goalAssetMappingBean.assetObj;  
                                 
                                Insurance__c objInsurance =insuranceMap.get(objGoalInsuranceAssociation.Insurance__C);
                                Double dblOneInstallmentPremiumAmount = 0;
                                if(!objInsurance.Premium_Frequency__c.equals('One Time Premium'))
                                  dblOneInstallmentPremiumAmount = objInsurance.Premium_Amount_Rs__c;
                                  
                                Integer iTenureOfInsurance = Integer.valueOf(objInsurance.Tenure_of_Insurance__c);
                                Integer iMaturityYear = iTenureOfInsurance + objInsurance.Commencement_Date__c.year();
                                Integer iCurrentYearForCalculation = 0;
                                
                               if(Date.today().year() > iMaturityYear)
                                    iCurrentYearForCalculation = iMaturityYear;
                               else
                                    iCurrentYearForCalculation = Date.today().year();
                                    
                                Integer totalPeriodInYears =  iCurrentYearForCalculation - objInsurance.Commencement_Date__c.year();//
                                /** Eternus Solutions       **/
                                /** Author  : Manasi Ranade **/
                                /** Issue Id: 00001622     **/
                                /** Date    : 8/5/2012           **/
                                /** Purpose : Commented following part.
                                               No need to overwrite the value of goalAssetMappingBean.allocatedAmount
                                               It is set in function getAssociatedInsuranceAssets
                                /****************************************************/
                                /*if(objInsurance.Surrender_Cash_Value__c == null)
                                       goalAssetMappingBean.allocatedAmount = objAssetAllocationService.GetInsuranceAmountForPeriod(objInsurance,totalPeriodInYears, dblOneInstallmentPremiumAmount);
                                else
                                     goalAssetMappingBean.allocatedAmount = objInsurance.Surrender_Cash_Value__c;*/
                              //1.Here 2nd parameter of calculateCompound function is (Maturity year - Current Year) .
                                //2.Because we are condering current amount of insurance.
                                //3.In case of other asset classes,that parameter will be (Maturity year - Asset start year)
                                //4.Reason :If we create FD and Insurance, 2 years before with amount 5000 each, 
                                //   then current value of FD will be 5000 and Insurance will be 5500
                                //if statent
                                growthRate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList, goalYear - currYear), 100,(goalYear- currYear));
                                //error.debugLog('-------- action3--------'+goalAssetMappingBean.allocatedAmount+' - '+goalYear+' - '+currYear+' - '+growthRate);
                                assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount, (goalYear - currYear ), growthRate);
                                
                                //error.debugLog('========action3=======ha ha ha====='+assetMaturedAmount);
                                //(goalYear - currYear ), 10);
                                //pvAmount = FinancialUtil.calculatePrincipal(targetAmount,(goalYear - currYear),growthRate);
                                remainingAmount = assetMaturedAmount;
                                 goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                                goalAssetMappingBean.remainingAmount = remainingAmount;
                             } 
                        }
                     }
                    if(remainingAmount > 0) 
                    {
                      if(targetAmount >= remainingAmount) 
                      {
                          targetAmount = targetAmount - remainingAmount;
                          /** Eternus Solutions       **/
                          /** Author  : Manasi Ranade **/
                          /** Issue Id: 00001610     **/
                          /** Date    : 27/4/2012           **/
                          /** Purpose : Function to print the Goal Year and Related sequence of allocation
                          /****************************************************/
                            isAssetAllocationStartYear = true;
                            PrintSequence(goalYear,goalAssetMappingBean.description,goalAssetMappingBean.entityName,remainingAmount,'C');/* Prajakta- 25-03-13 */
                            goalAssetMappingBean.remainingAmount = 0;                    
                      } 
                      else 
                      {
                          //FS0168
                          Double iTempTargetAmount =  targetAmount - remainingAmount;
                          remainingAmount = remainingAmount - targetAmount;
                          //goalAssetMappingBean.remainingAmount = remainingAmount;
                          /** Eternus Solutions       **/
                           /** Author  : Manasi Ranade **/
                           /** Issue Id: 00001536     **/
                           /** Date    : 6/3/2012           **/
                           /** Purpose : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                                               It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1 */
                                               
                           goalAssetMappingBean.remainingAmount = calculateUpdatedRemainingAmount(remainingAmount,goalFrequency);
                          //Prevoius code: It is commented to display negative target amounts
                          //targetAmount = 0;
                          
                          targetAmount = iTempTargetAmount;
                          if(targetAmount < 0 && bean.goalEndYear == goalYear)
                            PrintSequence(goalYear,goalAssetMappingBean.description,goalAssetMappingBean.entityName,remainingAmount,'D');/* Prajakta- 25-03-13 */
                      }
                    }
                     /*
                     if(remainingAmount > 0) {
                              if(targetAmount >= remainingAmount) {
                                  targetAmount = targetAmount - remainingAmount;
                                  goalAssetMappingBean.remainingAmount = 0;                    
                              } else {
                                    //FS0168
                                    Double iTempTargetAmount =  targetAmount - remainingAmount;
                                  remainingAmount = remainingAmount - targetAmount;
                                  //goalAssetMappingBean.remainingAmount = remainingAmount;
                                  //00001536
                                                         goalAssetMappingBean.remainingAmount = calculateUpdatedRemainingAmount(remainingAmount,goalFrequency);
                                  
                                  //Prevoius code: It is commented to display negative target amounts
                                  //targetAmount = 0;
                                  targetAmount = iTempTargetAmount; 
                              }
                          }
                   
                    */
                }
                /*Niket
                /*When Assets are align to Goal with Action Liquidate (Sell)*/
                
                else if(Allocation_Action__c.getInstance('Action4').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))
                {  
                  //Liquidate (Sell)
                    if(remainingAmount == null) 
                    {
<<<<<<< .mine
                      remainingAmount = goalAssetMappingBean.allocatedAmount;
                        goalAssetMappingBean.goalYearValue =  remainingAmount;
                    }
                    if(remainingAmount == 0) 
                    {
                      continue;
                    }
                    if(remainingAmount > 0) 
                    {
                      if(targetAmount >= remainingAmount) 
                      {
                             targetAmount = targetAmount - remainingAmount;
                             goalAssetMappingBean.remainingAmount = 0;                    
                      } 
                      else 
                      {
                            //FS0168
                          Double iTempTargetAmount = targetAmount - remainingAmount;
                            /** Eternus Solutions       **/
                            /** Author  : Manasi Ranade **/
                            /** Issue Id: 00001610     **/
                            /** Date    : 27/4/2012           **/
                            /** Purpose : Function to print the Goal Year and Related sequence of allocation
                            /****************************************************/
                            isAssetAllocationStartYear = true;
                            PrintSequence(goalYear, goalAssetMappingBean.description, goalAssetMappingBean.entityName,remainingAmount,'E');/* Prajakta- 25-03-13 */
                            remainingAmount = remainingAmount - targetAmount;
                             //goalAssetMappingBean.remainingAmount = remainingAmount;
                             /** Eternus Solutions       **/
                             /** Author  : Manasi Ranade **/
                             /** Issue Id: FS0337      **/
                             /** Date    : 6/12/2011    **/
                             /** Purpose : Added function to calculate the updated values of remaining amount.
                                                 It should increase by 8% every year
                             /****************************************************/
                             /** Eternus Solutions       **/
                             /** Author  : Manasi Ranade **/
                             /** Issue Id: 00001536     **/
                             /** Date    : 6/3/2012           **/
                             /** Purpose : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                                                 It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1
                             /****************************************************/
                             goalAssetMappingBean.remainingAmount = calculateUpdatedRemainingAmount(remainingAmount,goalFrequency);
                             //targetAmount = 0;
                             targetAmount = iTempTargetAmount;   
                      }
                    }                                                
                }
                
                /*When Assets are align to Goal with Action Hold*/
                else if((Allocation_Action__c.getInstance('Action5').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))) 
                {
                  Boolean blnIsApplicable = true;
                   /** Eternus Solutions       **/
                   /** Author  : Manasi Ranade **/
                   /** Issue Id: FS0166       **/
                   /** Date    : 9/26/2011    **/
                   /** Purpose : For Mutual Fund, 'Hold Align to Goal' and 'Liquidate Align To Goal' should work in same manner
                                             So if selected action is Hold Align to Goal then dont execute the following code.
                                            It should execute the Liquidate Align To Goal related code 
                   /****************************************************/
                   if('InvAsset'.equals(goalAssetMappingBean.assetAssociationType))
                   {
                      /*AggregateResult  objAggrResult = (AggregateResult)goalAssetMappingBean.assetObj;
                          String strSelectedRecordType = String.valueOf(objAggrResult.get('recordTypeName'));
                          if('Mutual Fund'.equals(strSelectedRecordType))
=======
                      	system.debug('*****remainingAmount****in Action 3**'+remainingAmount);
                      	if(remainingAmount == null)
                        {
                         	if(remainingAmount == null) 
                           	{
                              	remainingAmount = goalAssetMappingBean.allocatedAmount;
                              	goalAssetMappingBean.goalYearValue =  remainingAmount;
                              	system.debug('******goalAssetMappingBean.goalYearValue**in if***'+goalAssetMappingBean.goalYearValue);
                           	}
                           	if(remainingAmount == 0) 
                           	{
                            	continue;
                           	}
                         
                            if('InvAsset'.equals(goalAssetMappingBean.assetAssociationType) ||
                            'Asset'.equals(goalAssetMappingBean.assetAssociationType) || 
                            'InvAssetFixedIncome'.equals(goalAssetMappingBean.assetAssociationType) ) 
                            {
                              //If selected asset is 'Real Estate Assets' then grow it by 10%
                                //goalAssetMappingBean.asset__r.RecordType.Name.
                              	system.debug('******e**in if***'+goalAssetMappingBean.goalYearValue);
                                //if(Date.today().year() < goalYear)
                                {   
                                  	growthRate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList, goalYear - currYear), 100, (goalYear- currYear));
                                    assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount, (goalYear - currYear ), growthRate);
                                    //error.debugLog('========assetMaturedAmount======asset====='+assetMaturedAmount);
                                    remainingAmount = assetMaturedAmount;
                                  	goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                                  	goalAssetMappingBean.remainingAmount = remainingAmount;
                                }
                                //error.debugLog('========assetMaturedAmount=======investment asset====='+assetMaturedAmount);
                            }
                            /*
                            maturityValue = assetMaturedAmount; 
                                        goalAssetMappingBean.maturityValue = maturityValue;*/
                            else if('Insurance'.equals(goalAssetMappingBean.assetAssociationType)) 
                            { 
                              // Consider total Asset value here. Don't need to grow
                                 //if(Date.today().year() < goalYear)
                                 {
                                  //To calculate current value of insurance
                                    AssetAllocationService objAssetAllocationService = new AssetAllocationService();
                                    GoalInsuranceAssociation__c objGoalInsuranceAssociation;
                                    objGoalInsuranceAssociation = (GoalInsuranceAssociation__c)goalAssetMappingBean.assetObj;  
                                     
                                    Insurance__c objInsurance =insuranceMap.get(objGoalInsuranceAssociation.Insurance__C);
                                    Double dblOneInstallmentPremiumAmount = 0;
                                    if(!objInsurance.Premium_Frequency__c.equals('One Time Premium'))
                                      dblOneInstallmentPremiumAmount = objInsurance.Premium_Amount_Rs__c;
                                      
                                    Integer iTenureOfInsurance = Integer.valueOf(objInsurance.Tenure_of_Insurance__c);
                                    Integer iMaturityYear = iTenureOfInsurance + objInsurance.Commencement_Date__c.year();
                                    Integer iCurrentYearForCalculation = 0;
                                    
                                   if(Date.today().year() > iMaturityYear)
                                        iCurrentYearForCalculation = iMaturityYear;
                                   else
                                        iCurrentYearForCalculation = Date.today().year();
                                        
                                    Integer totalPeriodInYears =  iCurrentYearForCalculation - objInsurance.Commencement_Date__c.year();//
                                    /** Eternus Solutions       **/
                                    /** Author  : Manasi Ranade **/
                                    /** Issue Id: 00001622     **/
                                    /** Date    : 8/5/2012           **/
                                    /** Purpose : Commented following part.
                                                   No need to overwrite the value of goalAssetMappingBean.allocatedAmount
                                                   It is set in function getAssociatedInsuranceAssets
                                    /****************************************************/
                                    /*if(objInsurance.Surrender_Cash_Value__c == null)
                                           goalAssetMappingBean.allocatedAmount = objAssetAllocationService.GetInsuranceAmountForPeriod(objInsurance,totalPeriodInYears, dblOneInstallmentPremiumAmount);
                                    else
                                         goalAssetMappingBean.allocatedAmount = objInsurance.Surrender_Cash_Value__c;*/
                                  //1.Here 2nd parameter of calculateCompound function is (Maturity year - Current Year) .
                                    //2.Because we are condering current amount of insurance.
                                    //3.In case of other asset classes,that parameter will be (Maturity year - Asset start year)
                                    //4.Reason :If we create FD and Insurance, 2 years before with amount 5000 each, 
                                    //   then current value of FD will be 5000 and Insurance will be 5500
                                    //if statent
                                    growthRate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList, goalYear - currYear), 100,(goalYear- currYear));
                                    //error.debugLog('-------- action3--------'+goalAssetMappingBean.allocatedAmount+' - '+goalYear+' - '+currYear+' - '+growthRate);
                                    assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount, (goalYear - currYear ), growthRate);
                                    
                                    //error.debugLog('========action3=======ha ha ha====='+assetMaturedAmount);
                                    //(goalYear - currYear ), 10);
                                    //pvAmount = FinancialUtil.calculatePrincipal(targetAmount,(goalYear - currYear),growthRate);
                                    remainingAmount = assetMaturedAmount;
                                     goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                                    goalAssetMappingBean.remainingAmount = remainingAmount;
                                 } 
                            }
                         }
                        if(remainingAmount > 0) 
                        {
                          if(targetAmount >= remainingAmount) 
>>>>>>> .r14313
                          {
                                 blnIsApplicable = false;
                          }
                        */
                        if(goalAssetMappingBean.Description.equals('Mutual Fund'))
                        {
                          blnIsApplicable = false;
                        }
                   }
                    //if(blnIsApplicable)
                    {
                        if(remainingAmount == null)
                        {
                          if(remainingAmount == null) 
                          {
                             //isAssetAllocationStartYear = true;
                               remainingAmount = goalAssetMappingBean.allocatedAmount;
                               goalAssetMappingBean.goalYearValue =  remainingAmount;
                          }
                            if(remainingAmount == 0) 
                            {
              					continue;
                            }
                            if('Asset'.equals(goalAssetMappingBean.assetAssociationType)) 
                            {
                            //If selected asset is 'Real Estate Assets' then grow it by 10%
                             //goalAssetMappingBean.asset__r.RecordType.Name.
                             if(Date.today().year() < goalYear)
                                { 
                                  if('Asset'.equals(goalAssetMappingBean.assetAssociationType))
                                  {
                                      GoalAssetAssociation__c objGoalAssetAssociation = (GoalAssetAssociation__c)goalAssetMappingBean.assetObj;
                                        /*if(objGoalAssetAssociation.asset__r.RecordType.Name.equals('Real Estate Assets'))
                                             growthRate = double.valueOf(Label.RealEastateGrowthRate);//10
                                          else //Previous logic for real eastate: consider 10 Growth rate*/
                                          
                                        if(objGoalAssetAssociation.asset__r.Expected_Growth_Rate__c != null)
                                             growthRate = objGoalAssetAssociation.asset__r.Expected_Growth_Rate__c;
                                        else
                                        {
                                             //growthRate = objGoalAssetAssociation.asset__r.Expected_Growth_Rate__c;
                                             setInfoMessage('Please fill the Expected Growth Rate for ' + objGoalAssetAssociation.asset__r.RecordType.Name + ' assets.');
                                        } 
                                  }
                                    else
                                    {
                                        growthRate = 10;
                                    }
                                                                 
                                    /* //Working code Manasi
                                       goalAssetMappingBean.goalYearValue = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,
                                       (goalYear - currYear ), growthRate);
                                       pvAmount = FinancialUtil.calculatePrincipal(targetAmount,(goalYear - currYear),growthRate);
                                       if(remainingAmount >= pvAmount) {
                                           remainingAmount = remainingAmount - pvAmount;
                                           goalAssetMappingBean.remainingAmount = remainingAmount;
                                           targetAmount = 0;
                                       }else {
                                           pvAmount = pvAmount - remainingAmount;
                                           targetAmount =  FinancialUtil.calculateCompound(pvAmount,(goalYear - currYear ), growthRate);
                                           goalAssetMappingBean.remainingAmount = 0;
                                       }*/
                                               
                                    /** Eternus Solutions       **/
                                    /** Author  : Manasi Ranade **/
                                    /** Issue Id: 00001535     **/
                                    /** Date    : 6/3/2012           **/
                                    /** Purpose : 1. If EndYear is menssioned for the Asset, then consider it for calculation.
                                                           2. Asset will grow upto the given end year by its expected growth rate. After that asset will grow progressively.
                                                           Above functionality is done in the following code 
                                    /****************************************************/
                                    if(goalAssetMappingBean.endYear != null)
                                    {
                                      if(goalYear >= goalAssetMappingBean.endYear)
                                        {
                                                                              // Calculate the amount according to its Growth rate if End Year is mensioned
                                           if((goalAssetMappingBean.endYear - currYear) > 0)
                                               assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,
                                                                          (goalAssetMappingBean.endYear - currYear), growthRate);
                                             else
                                                assetMaturedAmount = goalAssetMappingBean.allocatedAmount;
                                            //Increase the amount progressively upto GoalYear
                                            system.debug('========assetMaturedAmount=======goalassetmappingbean===='+assetMaturedAmount);
                                             if((goalYear - goalAssetMappingBean.endYear) > 0)
                                             {
                                               rate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100, rateList,goalYear - goalAssetMappingBean.endYear)
                                                                                                    ,100,goalYear - goalAssetMappingBean.endYear);
                                              assetMaturedAmount = FinancialUtil.calculateCompound(assetMaturedAmount,goalYear - goalAssetMappingBean.endYear,rate);
                                          }
                                          system.debug('========assetMaturedAmount======if==='+assetMaturedAmount);
                                        }
                                        else
                                        {
                                            assetMaturedAmount = 0;
                                        }
                                    }
                                   else
                                   {
                                      assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,
                                                            (goalYear - currYear ), growthRate);
                                   }
                                    system.debug('========assetMaturedAmount=======after else====='+assetMaturedAmount);                      
                                    remainingAmount = assetMaturedAmount;
                                  goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                                  goalAssetMappingBean.remainingAmount = remainingAmount;
                                       }
                                         
                                }
                                 else if('InvAsset'.equals(goalAssetMappingBean.assetAssociationType))
                                 {
                                         //If selected asset is 'Real Estate Assets' then grow it by 10%
                                         //goalAssetMappingBean.asset__r.RecordType.Name.
                                              system.debug('***in investment Asset******');
                                            system.debug('***Date.today().year()******'+Date.today().year());
                                               system.debug('***goalYear*****'+goalYear);
                                         if(Date.today().year() < goalYear)
                                      { 
                                               AggregateResult  objAggrResult = (AggregateResult)goalAssetMappingBean.assetObj;
                                               //groupedResults[0].get('aver')
                                               /*if(objGoalAssetAssociation.asset__r.RecordType.Name.equals('Real Estate Assets'))
                                                  growthRate = double.valueOf(Label.RealEastateGrowthRate);//10
                                               else
                                                  growthRate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100,rateList,goalYear - currYear),
                                                                                                                       100,(goalYear- currYear));
                                                   */
                                                   String strSelectedRecordType = String.valueOf(objAggrResult.get('recordTypeName'));
                                                   if('Mutual Fund'.equals(strSelectedRecordType))
                                                   {
                                                          growthRate = FinancialUtil.calculateRate(FinancialUtil.calculateFutureValue(100,rateList,goalYear - currYear),
                                                                                                                       100,(goalYear- currYear));
                                                   }
                                                   else if(goalAssetMappingBean.description.equals('Stocks')) //|| goalAssetMappingBean.description.equals('Gold'))
                                                   {
                                                         // growthRate = double.valueOf(Label.StockGrowthRate);
                                                         system.debug('********globalAssumptions.Stock_Growth_Rate__c : 2********'+globalAssumptions.Stock_Growth_Rate__c);
                                                         if(globalAssumptions.Stock_Growth_Rate__c != null)
                                                             growthRate = globalAssumptions.Stock_Growth_Rate__c;
                                                   }
                                                   /* Prajakta - FP changes - 01-04-2013 */
                                                   else if(goalAssetMappingBean.description.equals('Gold'))
                                                   {
                                                         // growthRate = double.valueOf(Label.StockGrowthRate);
                                                         system.debug('********globalAssumptions.Gold_Growth_Rate__c : 2********'+globalAssumptions.Gold_Growth_Rate__c);
                                                         growthRate = globalAssumptions.Gold_Growth_Rate__c;
                                                   }
                                                    
                                               /* //Working code Manasi
                                               goalAssetMappingBean.goalYearValue = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,
                                               (goalYear - currYear ), growthRate);
                                               pvAmount = FinancialUtil.calculatePrincipal(targetAmount,(goalYear - currYear),growthRate);
                                               if(remainingAmount >= pvAmount) {
                                                   remainingAmount = remainingAmount - pvAmount;
                                                   goalAssetMappingBean.remainingAmount = remainingAmount;
                                                   targetAmount = 0;
                                               }else {
                                                   pvAmount = pvAmount - remainingAmount;
                                                   targetAmount =  FinancialUtil.calculateCompound(pvAmount,(goalYear - currYear ), growthRate);
                                                   goalAssetMappingBean.remainingAmount = 0;
                                               }*/
                                               system.debug('******growthRate*******'+growthRate);
                                               assetMaturedAmount = FinancialUtil.calculateCompound(goalAssetMappingBean.allocatedAmount,
                                               (goalYear - currYear ), growthRate);
                                               
                                              // error.DebugLog('--------1. assetMaturedAmount-----------'+assetMaturedAmount);
                                               remainingAmount = assetMaturedAmount;
											   goalAssetMappingBean.goalYearValue = assetMaturedAmount;
                                               goalAssetMappingBean.remainingAmount = remainingAmount;
                                               //error.DebugLog('--------goalAssetMappingBean.remainingAmount-----------'+goalAssetMappingBean.remainingAmount);
                                                                 
                                         }
                                         system.debug('========assetMaturedAmount=======remainingAmount====='+assetMaturedAmount);
                                         
                                 }
                            }
                            
                            if(remainingAmount > 0) 
                            {
                              if(targetAmount >= remainingAmount) 
                                {
                                  targetAmount = targetAmount - remainingAmount;
                                    /** Eternus Solutions       **/
                                   /** Author  : Manasi Ranade **/
                                   /** Issue Id: 00001610     **/
                                   /** Date    : 27/4/2012           **/
                                   /** Purpose : Function to print the Goal Year and Related sequence of allocation
                                   /****************************************************/
                                    isAssetAllocationStartYear = true; 
                                    goalAssetMappingBean.remainingAmount = 0;
                                    PrintSequence(goalYear,goalAssetMappingBean.description,goalAssetMappingBean.entityName,remainingAmount,'F');/* Prajakta- 25-03-13 */
                                } 
                                else
                                {
                                  //FS0168
                                  Double iTempTargetAmount =  targetAmount - remainingAmount;
                                    remainingAmount = remainingAmount - targetAmount;
                                    //goalAssetMappingBean.remainingAmount = remainingAmount;
                                    /** Eternus Solutions       **/
                                   /** Author  : Manasi Ranade **/
                                   /** Issue Id: FS0337       **/
                                   /** Date    : 6/12/2011    **/
                                   /** Purpose : Added function to calculate the updated values of remaining amount.
                                                         It should increase by 8% every year
                                   /****************************************************/
                                   /** Eternus Solutions       **/
                                   /** Author  : Manasi Ranade **/
                                   /** Issue Id: 00001536     **/
                                   /** Date    : 6/3/2012           **/
                                   /** Purpose : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                                                         It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1
                                   /****************************************************/
                                  goalAssetMappingBean.remainingAmount = calculateUpdatedRemainingAmount(remainingAmount,goalFrequency);
                                  
                                    //Prevoius code: It is commented to display negative target amounts
                                    //targetAmount = 0;
                                    targetAmount = iTempTargetAmount;
                                    if(targetAmount < 0 && bean.goalEndYear == goalYear)
                                      PrintSequence(goalYear,goalAssetMappingBean.description,goalAssetMappingBean.entityName,remainingAmount,'G');/* Prajakta- 25-03-13 */
                                }
                            }
                        }
                    }
                    /*When Assets are align to Goal with Action Sell*/
                    /** Eternus Solutions       **/
                    /** Author  : Manasi Ranade **/
                    /** Issue Id: FS0117      **/
                    /** Date    : 23/08/2011   **/
                    /** Purpose : Commented following code.Because Action6 will work as Action3.
                    /****************************************************/
                    else if((Allocation_Action__c.getInstance('Action6').Action__c.equalsIgnoreCase(goalAssetMappingBean.action))) 
                    { // Sell
                                     /*if('Asset'.equals(goalAssetMappingBean.assetAssociationType)) {
                                            if(remainingAmount == null) {
                                  remainingAmount = goalAssetMappingBean.allocatedAmount;
                                  goalAssetMappingBean.goalYearValue = remainingAmount;
                              }
                              if(remainingAmount == 0) {
                                  continue;
                              }
                                            if(targetAmount >= remainingAmount) {
                                                   targetAmount = targetAmount - remainingAmount;
                                                   goalAssetMappingBean.remainingAmount = 0; 
                                                   remainingAmount = 0;                   
                                            } else {
                                                   remainingAmount = remainingAmount - targetAmount;
                                                   goalAssetMappingBean.remainingAmount = remainingAmount;
                                                   targetAmount = 0;   
                                            }
                                     }*/
                   } 
                   else 
                   {
                       System.debug('addSupport');
                   }
                    
                   /*else 
                   { 
                       //Since target amount for this goal year is zero, no need to check other assets
                       break;
                   }*/
                   //targetAmount Manasi Joshi
               }
               
        }
      catch(Exception ex) 
      {
          throw new GeneralException('NewGoalService.applyAllocatedAssetsOnGoalAmount : Internal Error ' + ex.getMessage());
      }
        return targetAmount;
    }   
     
    /*
        This method is to get PMT amount by using 100 as PMT amount for Constant Annuity.
        PMT amount will grow by 10 percent for Growing annuity.
    */       
    private Double[] getPmtAmount(Double targetAmount, Double targetAmountActual, Integer startYear, Integer retirementYear, Integer endYear, String savingType) 
    {
      Double pmt = 100,futureValue = 0 ,futureValueActual = 0;
      try
      {        
        for(Integer index = (endYear-startYear-1); index >=0 ;  index--) 
           {                      
             //System.debug(rateList.get(index) + 'Index in PMTAmount is ' + index); 
             futureValue = (( retirementYear == null)|| (endYear-(index+1)) < retirementYear ? 
                                                        FinancialUtil.calculateCompoundMonthly(futureValue, pmt,12,rateList.get(index).doubleValue())
                                                        : FinancialUtil.calculateCompound(futureValue,1,rateList.get(index).doubleValue()));
             futureValueActual = (( retirementYear == null)|| (endYear-(index+1)) < retirementYear ?
                                                        FinancialUtil.calculateCompoundMonthly(futureValueActual, pmt,12,rateList.get(index).doubleValue())
                                                        : FinancialUtil.calculateCompound(futureValueActual,1,rateList.get(index).doubleValue()));
             pmt = (isGrowingPMT(savingType)? FinancialUtil.calculateCompound(pmt,1,10) : pmt);
               //system.debug('********futureValue*********'+futureValue);
               //system.debug('********futureValueActual*********'+futureValueActual);
             //system.debug('********pmt*********'+pmt);
                     
           }
           
             Double targetAmountCalculated,targetAmountActualCalculated;
             /** Eternus Solutions   **/
             /** Author  : Manasi Ranade **/
             /** Issue Id: FS0040      **/
             /** Date    : 02/08/2011   **/
             /** Purpose : Checked the futureValue  and futureValueActual value before division in getPmtAmount function
             /****************************************************/ 
             if(futureValue == 0)
               targetAmountCalculated = 0;
             else
               targetAmountCalculated = (targetAmount * 100) /futureValue ;
             
             if(futureValueActual == 0)
               targetAmountActualCalculated = 0;
             else
               targetAmountActualCalculated = (targetAmountActual * 100) /futureValueActual;        
                      
              return new Double[]{targetAmountCalculated, targetAmountActualCalculated};        
      }
      catch(Exception ex) 
      {
        throw new GeneralException('NewGoalService.getPmtAmount : Internal Error ' + ex.getMessage());
    }                            
    }
    
    /*
        helper method to check Progressive profile
    */
    private  Boolean isProgressiveProfile(String savingType) 
    {
        return ((savingType != null) && (savingType.contains('Progressive')) ? true : false);
    }
    
    /*
        helper method to know Growing or Constant Saving type
    */
    private  Boolean isGrowingPmt(String savingType) 
    {
        return ((savingType != null) && (savingType.contains('Growing')) ? true : false);               
    }
    
    /*
        This is a helper method to know profile combination for any goal based on starting profile and saving type
    */
    public void getGoalProfileList(Integer startYear, Integer endYear, Goal__c goalObj, Goal_Profile__c startingProfile, String savingType) 
    {    
      goalProfileList = new Goal_Profile__c[endYear - startYear];
         List<Goal_Profile__c> goalProfileForCalculationList  = new Goal_Profile__c[endYear - startYear];
         rateList = new Decimal[(endYear - startYear)];
         List<Decimal> rateCalculationList  = new Decimal[(endYear - startYear)];
         Integer index = (endYear - startYear);
         try 
         {
          for(Integer currentYear = startYear; currentYear < endYear; currentYear++) 
            {                     
                 goalProfileList.set(--index,(isProgressiveProfile(savingType)) 
                                                          ? goalProfileMapByName.get(GoalProfileSelector.getCurrentGoalProfile(goalObj, startingProfile, currentYear, endYear))
                                                          : startingProfile);
                 goalProfileForCalculationList.set(index,(isProgressiveProfile(savingType))
                                                          ? goalProfileMapByName.get(GoalProfileSelector.getCurrentGoalProfileForRateCalculation(startingProfile, currentYear, endYear))
                                                          : startingProfile);
                // rateList.set(index,goalProfileList.get(index).Return_expected__c);
                rateList.set(index,goalProfileList.get(index).Returns_expected__c); //commented for Global Assumptions
                //rateCalculationList.set(index,goalProfileForCalculationList.get(index).Return_expected__c);                
                rateCalculationList.set(index,goalProfileForCalculationList.get(index).Returns_expected__c);   
            } 
         }
         catch(Exception ex)
         {
              throw new GeneralException('NewGoalService.getGoalProfileList : Internal Error ' + ex.getMessage());
      }
    } 
       
    /*
        This method will save Goal profile years to be applied to SIP calculation.  
    */
    //FS0420
    //Added return Type to function.If size of List iDefaultYearsList is zero then dont do further calculations
    public Boolean saveGoal(GoalMappingBean goalMapping) 
    {
        Boolean blnIsValidYear = true;
        Integer  startYear,endYear,totalGoalYears;
        
        Goal__c goalObj = goalMapping.goalObj;
        
        List<Integer> defaultYearsList;
        try 
        {
            Goal_Profile__c goalProfile = databaseSOQLObj.getGoalProfile(goalObj.SelectedGoalProfile__c);
            endYear = Integer.valueof(goalObj.Goal_End_Year__c.trim());
            startYear = Integer.valueof(goalObj.Goal_Start_Year__c.trim());      
            Boolean isNotNull = (goalObj.conservative_profile_years__c == null) &&
                                (goalObj.moderately_conservative_profile_years__c == null) && 
                                (goalObj.moderate_profile_years__c == null) &&
                                (goalObj.moderately_aggressive_profile_years__c == null) &&
                                (goalObj.aggressive_profile_years__c == null) ;
            
            if(isNotNull == true) 
            {
                     //System.debug('***inside loop goalMapping:'+goalMapping.goalObj);                            
              defaultYearsList = GoalProfileSelector.getDefaultProfileYears(goalProfile.Name, startYear - System.today().year());
                      
                if((startYear - System.today().year()) > 0)
                    blnIsValidYear = true;
                else
                    blnIsValidYear = false;
                      
                 /** Eternus Solutions       **/
                 /** Author  : Manasi Ranade **/
                 /** Issue Id: FS0420      **/
                 /** Date    : 9/1/2012    **/
                 /** Purpose : Check whether defaultYearsList is filled or not**/
                if(defaultYearsList != null && defaultYearsList.size() > 0)
                {  
                  goalObj.conservative_profile_years__c = defaultYearsList.get(0);
                   system.debug('defaultYearsList::::'+defaultYearsList);
                    defaultYearsList.remove(0);
                  
                   if(!defaultYearsList.isEmpty()) 
                    {
                        goalObj.moderately_conservative_profile_years__c = defaultYearsList.get(0);
                        defaultYearsList.remove(0);
                    }
                    if(!defaultYearsList.isEmpty()) 
                    {
                        goalObj.moderate_profile_years__c = defaultYearsList.get(0);
                        defaultYearsList.remove(0);
                    }
                    if(!defaultYearsList.isEmpty()) 
                    {
                        goalObj.moderately_aggressive_profile_years__c = defaultYearsList.get(0);
                        defaultYearsList.remove(0);
                    }
                    if(!defaultYearsList.isEmpty())
                    {
                      goalObj.aggressive_profile_years__c = defaultYearsList.get(0);
                        defaultYearsList.remove(0);
                    }
                }
            }
            /** Eternus Solutions       **/
            /** Author  : Manasi Ranade **/
            /** Issue Id: FS0420      **/
            /** Date    : 9/1/2012    **/
            /** Purpose : Check whether defaultYearsList is filled or not**/
            if(defaultYearsList != null && defaultYearsList.size() > 0)
            {
              totalGoalYears = (goalObj.aggressive_profile_years__c == null ? 0 :goalObj.aggressive_profile_years__c.intValue());
                totalGoalYears += (goalObj.moderately_aggressive_profile_years__c == null ? 0 :goalObj.moderately_aggressive_profile_years__c.intValue());
                totalGoalYears += (goalObj.moderate_profile_years__c == null ? 0 :goalObj.moderate_profile_years__c.intValue()); 
                totalGoalYears += (goalObj.moderately_conservative_profile_years__c == null ? 0 :goalObj.moderately_conservative_profile_years__c.intValue());
                totalGoalYears += (goalObj.conservative_profile_years__c == null ? 0 :goalObj.conservative_profile_years__c.intValue());
                if(totalGoalYears != (startYear - System.today().year())) 
                {
                  totalGoalYears =startYear - System.today().year();
                    throw new GeneralException('Allocated year combination is not matching with Goal years'+totalGoalYears);
                }
            }
            
            /*Integer iDefaultYearsListSize = 0;
               if(defaultYearsList != null)
                            iDefaultYearsListSize = defaultYearsList.size();*/
            /*if(iDefaultYearsListSize <= 0)
            goalMapping.goalobj.Remark__c = 'Goal Start Year should not be less than or equal to Current Year';*/
            
            System.debug('***goalMapping.goalObj:'+goalMapping.goalObj);
            databaseDMLObj.upsertObject(goalMapping.goalObj);
            /*Goal__c  objSelectedGoal = [select id,Saving_type__c from  Goal__c where id =:  goalMapping.goalObj.id];
              objSelectedGoal.Saving_type__c = goalMapping.goalObj.Saving_type__c;
              upsert objSelectedGoal;*/
          return blnIsValidYear;
        }
        catch(Exception ex) 
        {
          System.debug('***saveGoal goalMapping ex:'+ex);
            throw new GeneralException('NewGoalService.saveGoal : Internal Error ' + ex.getMessage());
      }
    }
     
    /*
        This method will retrieve SIP , Goal PV and FV and Retirement amount from db and will provide it for Graph generation and other purpose.
    */
    public Map<String,GoalMappingBean> getGoalDetailsForOutput(List<String> goalIdList,String entityId)
    {
      List<Goal__c> goalObjList;
        Map<String,GoalMappingBean> goalMappingBeanMap = new Map<String,GoalMappingBean>();
        Map<String,List<GoalSIPAmount__c>> goalSIPAmountMap;
       
        //FS0323 Retirement related Graph
        //Map<String,GoalSIPAmount__c> goalSIPOverflowAmountMap;
<<<<<<< .mine
       	//error.debugLog('SIP year----------------'+SipYear);
       	//system.debug('SIP year----------------'+SipYear);
        Integer startYear,endYear,goalFrequency;//, currentYear = 2013;//System.today().year(); // /*Praj*/
=======
       
        Integer startYear,endYear,goalFrequency;
        //currentYear = System.today().year(); //2015; /*Praj*/
>>>>>>> .r14313
        Double goalCurrentAmount,targetAmount,inflationRate = 6;
        GoalMappingBean goalMappingBean; // OterClass 
        GoalMappingBean.GoalDetailBean detailBean; // Inner Class object
       
        Integer retirementYear;
        /** Eternus Solutions       **/
        /** Author  : Manasi Ranade **/
        /** Issue Id: FS0344      **/
        /** Date    : 9/12/2011    **/
        /** Purpose : When Insurance policies are allocated, the same does not reflect on the output page: 
                            The problem was because of Insurance Map Which was not filled before using getAssociatedInsuranceAssets() function
        /****************************************************/
        insuranceMap = databaseSOQLObj.getInsuranceDetails(entityId); 
        goalObjList = databaseSOQLObj.getGoal(goalIdList);
        goalSIPAmountMap = getGoalSIPAmountMap(databaseSOQLObj.getSIPAmountList(goalIdList, entityId,true));
        //FS0323 Commented the following code
        //goalSIPOverflowAmountMap = getGoalSIPOverflowAmountMap(databaseSOQLObj.getSIPAmountList(goalIdList, entityId,false));
        //00001556 Commented Original Code
        //globalAssumptions = databaseSOQLObj.getEntityGlobalAssumption(entityId);
        StaticMethodClass.entityId = entityId;
        globalAssumptions = StaticMethodClass.getEntityGlobalAssumption;
        
        if(globalAssumptions != null) 
            inflationRate = globalAssumptions.Inflation_Rate__c;
            
        for(Goal__c goalObj : goalObjList)
        {
              /* Prajakta - FP changes - 12-04-2013 */
          	Integer currentYear;
          	if(goalObj.SIP_Start_Year__c != null)
              	currentYear = Integer.valueOf(goalObj.SIP_Start_Year__c);
          	else
          		currentYear = system.today().year();
             
             if((goalObj.Goal_End_Year__c == null) ||(goalObj.Goal_Start_Year__c == null)) 
               continue;
             
             endYear = Integer.valueof(goalObj.Goal_End_Year__c.trim());
             startYear = Integer.valueof(goalObj.Goal_Start_Year__c.trim());                      
             retirementYear = ((goalObj.Entity__r.Retirement_Age__c != null ) && (goalObj.Entity__r.PersonBirthdate != null)
                              ? goalObj.Entity__r.PersonBirthdate.addYears(Integer.valueOf(goalObj.Entity__r.Retirement_Age__c)).year()
                              : null );
               
             //public GoalMappingBean(String goalId,Integer goalStartYear,Integer retirementYear, Integer goalEndYear)
             goalMappingBean = new GoalMappingBean(retirementYear);
             goalMappingBean.goalStartYear = startYear;
             goalMappingBean.goalEndYear = endYear;
             goalMappingBean.goalObj = goalObj;
             /*
                   Modified By : Niket Chandane
                   Modified At : 2 June 2011
                   Change      : Added the Method "setGoalMappingBeanInflationRate(goalObjList)"
             */
             goalMappingBean.GlobalAssumptionInflationRate = setGoalMappingBeanInflationRate(goalObjList);
             goalMappingBeanMapByGoalId.put(goalObj.id,goalMappingBean);                                                                                                   
             inflationRate = (goalObj.Inflation_Rate__c != null ? goalObj.Inflation_Rate__c :inflationRate);
             goalFrequency = Integer.valueOf(String.valueOf(((goalObj.goal_Frequency__c == NULL) || (goalObj.Goal_Frequency__c <= 0) ? 1 : goalObj.Goal_Frequency__c)).trim());
                     
             for(Integer goalYear =  startYear; goalYear <= endYear; goalYear+=goalFrequency) 
             {      
               if(goalObj.Cost_of_Goal_Annual__c != null )
                {
                  /* 
                         Change By    : Niket Chandane
                        Date        : 3 June 2011
                        Modification : If any one of the Goal of the entity doen't have any Cost of Goal Annual
                                               So application get Collapse 
                    */
                    goalCurrentAmount = Double.valueOf(String.valueOf(goalObj.Cost_of_Goal_Annual__c).trim());
                    targetAmount =  FinancialUtil.calculateCompound(goalCurrentAmount, goalYear - currentYear, inflationRate);
                    //system.debug('========assetMaturedAmount=======target amount===='+targetAmount);
                    if(targetAmount > 0)
                    {
                        detailBean = goalMappingBean.populateGoalDetailBeanList(currentYear,goalYear,targetAmount,targetAmount,false);
                  }
                }
            }
            if(goalSIPAmountMap.size() > 0 && goalSIPAmountMap.ContainsKey(goalObj.id))
            {      
              goalMappingBean.goalSIPAmountList = goalSIPAmountMap.get(goalObj.id);
            }
             
             //TODO: Eternus
             //FS0323 Commented the following code
             /*if(goalMappingBean.goalObj.goal_type__c.equals('Retirement')) {
                   goalMappingBean.currentSIP = goalSIPOverflowAmountMap.get(goalObj.id);
             }*/
          goalMappingBeanMap.put(goalObj.id , goalMappingBean);
        }
              
       getAssociatedAssets(goalIdList,entityId);
        //Commented by Manasi: Created new method :getAssociatedInvestmentAssetsseparately
        /** Eternus Solutions       **/
        /** Author  : Manasi Ranade **/
        /** Issue Id: FS0164      **/
        /** Date    : 27/9/2011    **/
        /** Purpose : Code to fetch the Investment Assets separately (Previous code is commented, as it was returning the aggreegate result) 
        /****************************************************/
       getAssociatedInvestmentAssetsExceptFixedIncome(goalIdList,entityId);
        getAssociatedInvestmentAssetsseparately(goalIdList,entityId);
        getAssociatedInsuranceAssets(goalIdList,entityId);
        return goalMappingBeanMap;
  }
    
    /*
       Method owner : Niket Chandane
       Method : setGoalMappingBeanInflationRate(List<Goal__c> lstgoal)
       Parameterts : List<Goal__c> lstgoal
       Return Type : Decimal 
       Summary  : It accepts the Goal list and checks whether the Inflation_Rate__c is Null or Not 
                             If Null it gets the Inflation_Rate__c from the Global assumption for that entity and set's in the 
                             GoalMappingBean class Property "GlobalAssumptionInflationRate". 
                             this GlobalAssumptionInflationRate property of the GoalMapping Bean is used on the "GoalComponentController"
                             Which is reflates on the generatePDF page.
    */
    
    public Decimal setGoalMappingBeanInflationRate(List<Goal__c> lstgoal)
    {
      Decimal decGlobalAssumptionInflactionRate;
         if(lstgoal != null && lstgoal.size() > 0)
         {
          for(Goal__c objgoal : lstgoal)
            {
              if(objgoal.Inflation_Rate__c == null)
               {
                  Entity_Global_Assumption__c objGlobalAssumption = databaseSOQLObj.getGlobalAssumptions(objgoal.Entity__c);
                   decGlobalAssumptionInflactionRate = objGlobalAssumption.Inflation_Rate__c;
                   break;
               }
            }
         }
        return decGlobalAssumptionInflactionRate;
    }
    
    // This method will populate data for Graph generation. 
    private Map<String,List<GoalSIPAmount__c>> getGoalSIPAmountMap(List<GoalSIPAmount__c> goalSIPAmountList) 
    {
      Map<String,List<GoalSIPAmount__c>> goalSIPAmountMap = new Map<String,List<GoalSIPAmount__c>>();           
        String goalId;
        
        for(GoalSIPAmount__c goalSIPAmountObj : goalSIPAmountList) 
        {
          if(!goalSIPAmountMap.containsKey(goalSIPAmountObj.goal__c))
            {
              goalSIPAmountMap.put(goalSIPAmountObj.goal__c, new List<GoalSIPAmount__c>());       
            } 
            goalSIPAmountMap.get(goalSIPAmountObj.goal__c).add(goalSIPAmountObj);
        }
        return goalSIPAmountMap;
    }   
      
    private Map<String,GoalSIPAmount__c> getGoalSIPOverflowAmountMap(List<GoalSIPAmount__c> goalSIPAmountList) 
    {
      Map<String,GoalSIPAmount__c> goalSIPOverflowAmountMap = new Map<String,GoalSIPAmount__c>();                             
      for(GoalSIPAmount__c goalSIPAmountObj : goalSIPAmountList) 
      {
          goalSIPOverflowAmountMap.put(goalSIPAmountObj.goal__c , goalSIPAmountObj);
      }
      return goalSIPOverflowAmountMap;                
    } 
    
    /*
        Added this method to display Saving type list without NONE as an option.
    */
    public List<SelectOption> getSavingTypeList() 
    {
       List<SelectOption> optionList = new List<SelectOption>();
        Schema.DescribeFieldResult fieldResult = Goal__c.Saving_Type__c.getDescribe();
        List<Schema.PicklistEntry> pickListValueList = fieldResult.getPicklistValues();
        for( Schema.PicklistEntry pickListValue : pickListValueList) 
        {
          if(!pickListValue.getLabel().contains('None'))
              optionList.add(new SelectOption(pickListValue.getLabel(), pickListValue.getValue()));
        }       
        return optionList;                              
    }                              
    ///Manasi Remove Plase
    public  Double calculateCompound(Double principal,Integer totalNoOfPeriod, Double rate) 
    {
      return principal * Math.pow(((100 + rate)/100),totalNoOfPeriod);
    }
       
     /** Eternus Solutions       **/
     /** Author  : Manasi Ranade **/
     /** Issue Id: FS0337      **/
     /** Date    : 6/12/2011    **/
     /** Purpose : Added function to calculate the updated values of remaining amount.
                         It should increase by 8% every year
     /****************************************************/
     /** Eternus Solutions       **/
     /** Author  : Manasi Ranade **/
     /** Issue Id: 00001536     **/
     /** Date    : 6/3/2012           **/ 
     /** Purpose : Added goalFrequency parameter to the function calculateUpdatedRemainingAmount().
                         It will be usefull in calculation of surplus amount if Goal Frequency is greater than 1
    /****************************************************/
  public Double calculateUpdatedRemainingAmount(double dblRemainingAmount,Integer goalFrequency)
    {
      double dblGrowthrateInRemainingAmount = double.valueOf(Label.growthrateInRemainingAmount);
        /** Eternus Solutions       **/
        /** Author  : Manasi Ranade **/
        /** Issue Id: 00001536     **/
        /** Date    : 6/3/2012           **/
        /** Purpose : Added loop to increase the Surplus amount as per the given Goal Frequncy
        /****************************************************/
        for(Integer iCount = 0;iCount < goalFrequency;iCount++)
        {
          dblRemainingAmount = dblRemainingAmount + (dblRemainingAmount * (dblGrowthrateInRemainingAmount / 100));
        }  
        return dblRemainingAmount;
    }
       
    /** Eternus Solutions       **/
    /** Author  : Manasi Ranade **/
    /** Issue Id: 00001610     **/
    /** Date    : 27/4/2012           **/
    /** Purpose : Function to print the Goal Year and Related sequence of allocation
    /****************************************************/
    private Static Integer allocationOrder = 1;
    private Set<String> setAllocationMessage = new Set<String>();
    public Map<Integer,String> MapOrderToAllocatiotion = new Map<Integer,String>();
    //private Static Integer assetMaturedAmt = 0;    /* Prajakta- 25-03-13 */
    public void PrintSequence(Integer iGoalYear, String strDescription, String strEntityName, Double assetMaturedAmt, String test)
    {
      isFirstLoad = false;
      System.debug('------------------Full value -----------------------'+('Asset Allocation Period : ' + iAssetAllocationStartYear + ' - ' + 
                                    iGoalYear + '. DESCRIPTION : ' + strDescription + '. ENTITY NAME : ' + strEntityName//));
                                    + '. GOAL AMOUNT : ' + assetMaturedAmt + '. TEST : ' + test));   /* Prajakta- 25-03-13 */
<<<<<<< .mine
      	 Error.DebugLog(allocationOrder + '. Asset Allocation Period : ' + iAssetAllocationStartYear + ' - ' + iGoalYear 
                  + '. DESCRIPTION : ' + strDescription + '. ENTITY NAME : ' + strEntityName);
=======
      Error.DebugLog(allocationOrder + '. Asset Allocation Period : ' + iAssetAllocationStartYear + ' - ' + iGoalYear 
                        + '. DESCRIPTION : ' + strDescription + '. ENTITY NAME : ' + strEntityName); /* Prajakta- 25-03-13 */
>>>>>>> .r14313
    
    //allocationOrder += 1;
    String StrAllocationMessage = (allocationOrder + '. Asset Allocation Period : ' + iAssetAllocationStartYear + ' - ' + 
                  iGoalYear + '. DESCRIPTION : ' + strDescription + '. ENTITY NAME : ' + strEntityName);
    System.debug('-----------------allocationMessage-----------------'+allocationMessage);
    
    if(!MapOrderToAllocatiotion.containsKey(allocationOrder))
    {
      MapOrderToAllocatiotion.put(allocationOrder,StrAllocationMessage);
    } 
    else
    {
      String str = MapOrderToAllocatiotion.get(allocationOrder);
      str = (allocationOrder + '. Asset Allocation Period : ' + iAssetAllocationStartYear + ' - ' + 
                  iGoalYear + '. DESCRIPTION : ' + strDescription + '. ENTITY NAME : ' + strEntityName);
         MapOrderToAllocatiotion.put(allocationOrder,str);
    }
    allocationOrder += 1;
    
    if(!setAllocationMessage.contains(StrAllocationMessage))
    {
      allocationMessage += StrAllocationMessage + '~~';
      setAllocationMessage.add(StrAllocationMessage);
    }
    /*if(String.isNotEmpty(StrAllocationMessage))
    {
      StrAllocationMessage = '';
    }*/
    //System.debug('-----------------allocationMessage--------Final---------'+allocationMessage);            
  }
}