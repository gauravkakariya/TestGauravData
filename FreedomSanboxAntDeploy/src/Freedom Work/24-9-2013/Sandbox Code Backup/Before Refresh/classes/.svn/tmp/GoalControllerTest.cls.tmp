/*
	Revision History:
	Version     Version Author     Date        Comments
    1.0         --           	   --	  		Initial Draft
    2.0			Manasi Ranade	   21/06/2011	Issue id: F0057 :
    											1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
	   											   exception for totalAmount parameter.
	   				 							2. So added querrystring parameter 'totalAmount' below with its value as '1234' 
	   				 							   for further calculation in testData() function.	
 	2.0			Manasi Ranade	   24/08/2011	Issue id: FS0129 :
    											Change in function :GoalControllerTest
    											Commented startTest from start of the function because it was crossing Governer Limits.
												And added it after goalTestCon.singleYearGoal.
	3.0  		Prajakta Sanap     19/04/2013	Created TestData_Ffreedom which contains all the test data for this test class.											
*/
@isTest
private class GoalControllerTest 
{
	static GoalController goalTestCon;
	static Account acc;
	static GoalOutputController goalOutCon;
	static GoalComponentController goalCompCon;
	static GoalSummaryController goalSummary;
	
	static  Goal__c gol;
	public static void testData()
	{
		TestData_Ffreedom testData = new TestData_Ffreedom();
        acc = testData.initializeAccount(); 
    	upsert acc;
	    system.assertNotEquals(null,acc);
	       
		Entity_Global_Assumption__c ega = testData.initialize_GlobalAssumptions(acc);
		upsert ega;
	    system.assertNotEquals(null,ega.id);
	       
	    List<Goal_Profile__c> lstGoalProfile = testData.initialize_lstGoalProfile(acc);
	    Database.insert(lstGoalProfile);
	      
	    List<Asset__c> lstAsset = testData.initialize_lstAsset(acc);
	    Database.insert(lstAsset);
	      
	    Goal_Profile__c goalProfile2 = testData.initialize_GoalProfile(acc, 'Aggressive', 'Customized');
	    insert goalProfile2;  
	    gol = testData.initialize_Goal(acc, 'Marriage',goalProfile2);
	    insert gol;
	    system.assertNotEquals(null,gol.id);
	    
	    Asset__c asset = testData.initialize_Asset(acc,'EPF',AssetRecTypes__c.getInstance ('Retirement Accounts').RecordTypeId__c,'To be grown till maturity and continue saving');  
	    insert asset;
	    Asset__c asset1 = testData.initialize_Asset(acc,'PPF',AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c,'To be grown till maturity and continue saving');
	    insert asset1;
	     
	    List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
	    
	    GoalAssetAssociation__c gasset1 = testData.intialize_GoalAssetAssociation(asset,gol);
	    lstGoalAssetAssociation.add(gasset1);
	    GoalAssetAssociation__c gasset2 = testData.intialize_GoalAssetAssociation(asset1,gol);
	    lstGoalAssetAssociation.add(gasset2);
	    Database.insert(lstGoalAssetAssociation);
	     
	    Insurance__c  insurance = testData.initialize_Insurance(acc);
	    insert insurance;
	    system.assertNotEquals(null,insurance.id);
	    GoalInsuranceAssociation__c gasset3 = testData.initialize_GoalIA(insurance,gol);
	    insert gasset3; 
	    system.assertNotEquals(null,gasset3.id);
	      
	    GoalSIPAmount__c goalsip = testData.initialize_GoalSIPAmount(gol);
	    upsert goalsip;
	    system.assertNotEquals(null,goalsip.id);
	      
	    Apexpages.currentPage().getParameters().put('entityId',acc.id);
	    ApexPages.currentPage().getParameters().put('goalId',gol.id);    
	       /** Eternus Solutions       **/
		   /** Author  : Manasi Ranade **/
		   /** Issue Id: F0057   	   **/
		   /** Date    : 21/06/2011    **/
		   /** Purpose : 1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
		   					exception for totalAmount parameter.
		   				 2. So added querrystring parameter 'totalAmount' below with its value as '1234' for further calculation.
		   /****************************************************/       
	    ApexPages.currentPage().getParameters().put('totalAmount','1234');
	    goalTestCon=new GoalController();
	      // boolean singleYearGoal=goalTestCon.singleYearGoal;
	    goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
	      //FS0196
	    ApexPages.currentPage().getParameters().put('dblEquitySIP','12');
	    ApexPages.currentPage().getParameters().put('dblGoldSIP','13');
	    ApexPages.currentPage().getParameters().put('dblDebtSIP','14');
	    ApexPages.currentPage().getParameters().put('dblTotalSIP','15');
	        
	    goalOutCon=new GoalOutputController();
	    
	    goalCompCon=new GoalComponentController();
	    goalSummary=new GoalSummaryController();
	}
	     
	public static void testData1()
	{
	    TestData_Ffreedom testData = new TestData_Ffreedom();
        acc = testData.initializeAccount(); 
    	upsert acc;
	    system.assertNotEquals(null,acc);
	       
	    List<Goal_Profile__c> lstGoalProfile = testData.initialize_lstGoalProfile(acc);
	    Database.insert(lstGoalProfile);
			       
	    List<Asset__c> lstAsset = new List<Asset__c>(); 
	      
	    Asset__c asset3 = testData.initialize_Asset(acc,null,AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c,'Liquidate (Sell)');
	    lstAsset.add(asset3);
	    Asset__c asset4 = testData.initialize_Asset(acc,'PPF',AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c,'Hold');
	    lstAsset.add(asset4);
	    Asset__c asset5 = testData.initialize_Asset(acc,null,AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c,'Sell');
	    lstAsset.add(asset5);
	    Asset__c asset6 = testData.initialize_Asset(acc,null,AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c,'Liquidate (Align to goal)');
	    lstAsset.add(asset6);
	    Database.insert(lstAsset);
	    
	    Goal_Profile__c goalProfile2 = testData.initialize_GoalProfile(acc, 'Aggressive', 'Customized');
	    insert goalProfile2;  
	    gol = testData.initialize_Goal(acc, 'Retirement',goalProfile2);
	    insert gol;
	    system.assertNotEquals(null,gol.id);
	      
	    List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
	      
	    GoalAssetAssociation__c gasset2 = testData.intialize_GoalAssetAssociation(asset3,gol);
	    lstGoalAssetAssociation.add(gasset2);
	    GoalAssetAssociation__c gasset3 = testData.intialize_GoalAssetAssociation(asset4,gol); 
	    lstGoalAssetAssociation.add(gasset3);
	    GoalAssetAssociation__c gasset4 = testData.intialize_GoalAssetAssociation(asset5,gol);
	    lstGoalAssetAssociation.add(gasset4);
	    GoalAssetAssociation__c gasset5 = testData.intialize_GoalAssetAssociation(asset6,gol);
	    lstGoalAssetAssociation.add(gasset5);
	    Database.insert(lstGoalAssetAssociation);
	     
	    Apexpages.currentPage().getParameters().put('entityId',acc.id);
	    ApexPages.currentPage().getParameters().put('goalId',gol.id);    
	    goalTestCon=new GoalController(); 
	    goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
	}
	 
	     
	public static testMethod void GoalControllerTest()
	{
	    //
	    /** Eternus Solutions       **/
		/** Author  : Manasi Ranade **/
		/** Issue Id: FS0129      	**/
		/** Date    : 24/08/2011 	**/
		/** Purpose : Commented startTest from here because it was crossing Governer Limits.
						And added it after goalTestCon.singleYearGoal.
		/****************************************************/
	    //Test.startTest();
	    testData();
	    boolean singleYearGoal=goalTestCon.singleYearGoal;
	    Test.startTest();
	    goalTestCon.save();
	    List<SelectOption> savingTypeList=goalTestCon.savingTypeList;
	    test.stopTest();
	    goalTestCon.customized();
	    goalTestCon.cancel();
	    goalTestCon.output();
	    goalTestCon.getSipStartYear();
	    
	   
	}
	public static testMethod void GoalComponentTest(){
	    Test.startTest();
	    testData();
	    goalCompCon.goalMappingBean=goalTestCon.goalMappingBean;
	    boolean singleYearGoal=goalCompCon.singleYearGoal;
	    double futureValueActual=goalCompCon.futureValueActual;
	    goalCompCon.output();
	    
	    test.stopTest();
	}
	
	public static testMethod void GoalComponentTest1()
	{
	    Test.startTest();
	    TestData_Ffreedom testData = new TestData_Ffreedom();    
		User partnerUser = testData.initBusinessUser();	         
	    
	    acc = testData.initBusinessAccount(partnerUser);
		insert acc;
		acc.Related_To__c = 'Business Partner';
		update acc;
		
		Entity_Global_Assumption__c ega = testData.initialize_GlobalAssumptions(acc);
	    insert ega;
	       
	    List<Goal_Profile__c> lstGoalProfile = testData.initialize_lstGoalProfile(acc);
	    Database.insert(lstGoalProfile);
	       
	      
	    List<Asset__c> lstAsset = testData.initialize_lstAsset(acc);
	    Database.insert(lstAsset);
	      
	      
	    Goal_Profile__c goalProfile2 = testData.initialize_GoalProfile(acc, 'Aggressive', 'Customized');
	    insert goalProfile2;  
	    gol = testData.initialize_Goal(acc, 'Marriage',goalProfile2);
	    insert gol;
	    system.assertNotEquals(null,gol.id);
	    
		Asset__c asset = testData.initialize_Asset(acc, 'EPF', AssetRecTypes__c.getInstance ('Retirement Accounts').RecordTypeId__c,
												 	'To be grown till maturity and continue saving');
	    insert asset;

		Asset__c asset1 = testData.initialize_Asset(acc, 'PPF', AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c,
												 	'To be grown till maturity and continue saving');
	    insert asset1;        

<<<<<<< .mine
        List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
	    GoalAssetAssociation__c gasset1 =  testData.intialize_GoalAssetAssociation(asset,gol);
	    lstGoalAssetAssociation.add(gasset1);
	    GoalAssetAssociation__c gasset2 =  testData.intialize_GoalAssetAssociation(asset1,gol);
	    lstGoalAssetAssociation.add(gasset2);
	    Database.insert(lstGoalAssetAssociation);
	     
	    
	    Insurance__c  insurance = testData.initialize_Insurance(acc);
	    insert insurance;
	    system.assertNotEquals(null,insurance.id);
	    GoalInsuranceAssociation__c gasset3 = testData.initialize_GoalIA(insurance, gol);
	    insert gasset3;
	    system.assertNotEquals(null,gasset3.id);
	    
	    GoalSIPAmount__c goalsip = testData.initialize_GoalSIPAmount(gol);
	    upsert goalsip;
	    system.assertNotEquals(null,goalsip.id);
	    Apexpages.currentPage().getParameters().put('entityId',acc.id);
	    ApexPages.currentPage().getParameters().put('goalId',gol.id);    
	       /** Eternus Solutions       **/
		   /** Author  : Manasi Ranade **/
		   /** Issue Id: F0057   	   **/
		   /** Date    : 21/06/2011    **/
		   /** Purpose : 1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
		   					exception for totalAmount parameter.
		   				 2. So added querrystring parameter 'totalAmount' below with its value as '1234' for further calculation.
		   /****************************************************/       
	    ApexPages.currentPage().getParameters().put('totalAmount','1234');
	    goalTestCon=new GoalController();
	      // boolean singleYearGoal=goalTestCon.singleYearGoal;
	    goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
	      //FS0196
	    ApexPages.currentPage().getParameters().put('dblEquitySIP','12');
	    ApexPages.currentPage().getParameters().put('dblGoldSIP','13');
	    ApexPages.currentPage().getParameters().put('dblDebtSIP','14');
	    ApexPages.currentPage().getParameters().put('dblTotalSIP','15');
	        
	    goalOutCon=new GoalOutputController();
	    goalCompCon=new GoalComponentController();
	    goalSummary=new GoalSummaryController();
	    
	    goalCompCon.goalMappingBean=goalTestCon.goalMappingBean;
	    boolean singleYearGoal=goalCompCon.singleYearGoal;
	    double futureValueActual=goalCompCon.futureValueActual;
	    goalCompCon.output();
	    
	    test.stopTest();
	}
	
	public static testMethod void GoalComponentTest2()
	{
	    Test.startTest();
		TestData_Ffreedom testData = new TestData_Ffreedom(); 
		Account objAccount = testData.initVirtualAccount();									
		insert objAccount;
		objAccount.Related_To__c = 'Virtual Partner';
		update objAccount;
	    acc = testData.initVirtualAccount(objAccount);
		insert acc;
		acc.Related_To__c = 'Virtual Partner';
		update acc;
	    
	    Entity_Global_Assumption__c ega=new Entity_Global_Assumption__c(Account__c=acc.id,Expected_Return_on_Investment__c=30,Income_Growth_Rate__c=3,Inflation_Rate__c=6,Number_Of_Months__c=5);
	    insert ega;
	       
	    List<Goal_Profile__c> lstGoalProfile = testData.initialize_lstGoalProfile(acc);
	    Database.insert(lstGoalProfile);
	      
	    List<Asset__c> lstAsset = testData.initialize_lstAsset(acc);
	    Database.insert(lstAsset);
	     
	    Goal_Profile__c goalProfile2 = testData.initialize_GoalProfile(acc, 'Aggressive', 'Customized');
	    insert goalProfile2;  
	    gol = testData.initialize_Goal(acc, 'Marriage',goalProfile2);
	    insert gol;
	    system.assertNotEquals(null,gol.id);
	     
	    Insurance__c  insurance = testData.initialize_Insurance(acc);
	    insert insurance;
	    system.assertNotEquals(null,insurance.id);
	    
	    GoalSIPAmount__c goalsip = testData.initialize_GoalSIPAmount(gol);
	    upsert goalsip;
	    system.assertNotEquals(null,goalsip.id);
	    Apexpages.currentPage().getParameters().put('entityId',acc.id);
	    ApexPages.currentPage().getParameters().put('goalId',gol.id);    
	       /** Eternus Solutions       **/
		   /** Author  : Manasi Ranade **/
		   /** Issue Id: F0057   	   **/
		   /** Date    : 21/06/2011    **/
		   /** Purpose : 1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
		   					exception for totalAmount parameter.
		   				 2. So added querrystring parameter 'totalAmount' below with its value as '1234' for further calculation.
		   /****************************************************/       
	    ApexPages.currentPage().getParameters().put('totalAmount','1234');
	    goalTestCon=new GoalController();
	    goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
	      //FS0196
	    ApexPages.currentPage().getParameters().put('dblEquitySIP','12');
	    ApexPages.currentPage().getParameters().put('dblGoldSIP','13');
	    ApexPages.currentPage().getParameters().put('dblDebtSIP','14');
	    ApexPages.currentPage().getParameters().put('dblTotalSIP','15');
	        
	    goalOutCon=new GoalOutputController();
	    goalCompCon=new GoalComponentController();
	    goalSummary=new GoalSummaryController();
	    
	    goalCompCon.goalMappingBean=goalTestCon.goalMappingBean;
	    boolean singleYearGoal=goalCompCon.singleYearGoal;
	    double futureValueActual=goalCompCon.futureValueActual;
	    goalCompCon.output();
	    
	    test.stopTest();
	}
	
	public static testMethod void  goalOutputTest()
	{
	    Test.startTest();
	    testData();
	    GoalMappingBean goalMappingBean =goalOutCon.goalMappingBean;
	      
	    double futureValueActual=goalOutCon.futureValueActual;
	    boolean singleYearGoal = false;
	    GoalMappingBean golMappingBean=new GoalMappingBean(gol.id,2011,2018,2018,2013);
	    double minValue = 10;
	    String chartData = '';
	    GoalSIPAmount__c currentSIP=golMappingBean.currentSIP;
	    List<SelectOption> goalProfileList=golMappingBean.goalProfileList;
	    List<List<DataEntrySummaryBean>> getPresentFutureValueList=golMappingBean.getPresentFutureValueList;
	    goalOutCon.output();
	    test.stopTest();
	}
	
	public static testMethod void GoalControllerTest1()
	{
	    Test.startTest();
	    TestData_Ffreedom testData = new TestData_Ffreedom();    
	    acc = testData.initializeAccount();
		insert acc;
	    testData1();
	    
	    Insurance__c  insurance = testData.initialize_Insurance(acc);
	    insert insurance;
	    system.assertNotEquals(null,insurance.id);
	    GoalInsuranceAssociation__c gins = new GoalInsuranceAssociation__c(Insurance__c=insurance.id,Goal__c=gol.id,Allocated__c=30);
	    insert gins;
	    system.assertNotEquals(null,gins.id);
	    goalTestCon.save();
	    test.stopTest();
	}
}=======
       Database.insert(lstGoalProfile);
       
      
      List<Asset__c> lstAsset = new List<Asset__c>(); 
      
      Asset__c asset=new Asset__c(Account_Type__c='EPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2018',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity and continue saving',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Retirement Accounts').RecordTypeId__c); //Prajakta//'01220000000HYzZAAW');
      lstAsset.add(asset);
      //insert asset;
      //system.assertNotEquals(null,asset.id);
      
      Asset__c asset1=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity and continue saving',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset1);
      Asset__c asset2=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity but stop saving more',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset2);
      Asset__c asset3=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Liquidate (Sell)',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset3);
      Asset__c asset4=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Hold',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset4);
      Asset__c asset5=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Sell',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset5);
      Database.insert(lstAsset);
      
    //  Investment_Asset__c inv=new   Investment_Asset__c(Entity__c=acc.id,action__c='Liquidate (Allign to Goal)',Units__c=10,Current_Price__c=100000,RecordTypeId='01220000000HYx5AAG' );
   //   insert inv;
   //   system.assertNotEquals(null,inv.id);
     
      gol=new Goal__c(Entity__c=acc.id, Goal_End_Year__c = '2024',Goal_Start_Year__c='2021',Inflation_Rate__c=6,SelectedGoalProfile__c=goalProfile2.id,Saving_type__c='Constant annuity - Progressive Risk Profile',
                                 Cost_of_Goal_Annual__c=5000000,Priority__c='High',Description__c='Marriage',goal_type__c='Marriage', 
                                 aggressive_profile_years__c=3,Goal_Frequency__c=null,moderately_aggressive_profile_years__c=2, moderate_profile_years__c=2,
                                 Allocation_Message__c='Allocation_Message', SIP_Start_Year__c='2013',
                                 moderately_conservative_profile_years__c=2,conservative_profile_years__c=1);
       insert gol;
       system.assertNotEquals(null,gol.id);
     
     List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
     
     GoalAssetAssociation__c gasset1=new GoalAssetAssociation__c(Asset__c=asset.id,Goal__c=gol.id,Allocated__c=100);
     lstGoalAssetAssociation.add(gasset1);
     GoalAssetAssociation__c gasset2=new GoalAssetAssociation__c(Asset__c=asset1.id,Goal__c=gol.id,Allocated__c=100);
     lstGoalAssetAssociation.add(gasset2);
     Database.insert(lstGoalAssetAssociation);
     
  //   GoalInvestmentAssetAssociation__c ginv=new GoalInvestmentAssetAssociation__c(Investment_Asset__c=inv.id,Goal__c=gol.id,allocated__c=100);
  //   insert ginv;
    // system.assertNotEquals(null,ginv.id);
     
     Insurance__c  insurance=new Insurance__c(Flag__c = 'Analysis',Entity__c=acc.id,action__c ='To be grown till maturity and continue saving',
                                               RecordTypeId=InsuranceRecTypes__c.getInstance ('Life Insurance').RecordTypeId__c //Prajakta//'01220000000Do0vAAC'
                                               ,Tenure_of_Insurance__c=10,Commencement_Date__c=System.today(),
                                                Next_Premium_Due_Date__c=system.today(),Premium_Amount_Rs__c =10000,Policy_Type__c='Whole Life',
                                                Premium_Frequency__c='Annually');
      insert insurance;
      system.assertNotEquals(null,insurance.id);
      GoalInsuranceAssociation__c gasset3=new GoalInsuranceAssociation__c(Insurance__c=insurance.id,Goal__c=gol.id,Allocated__c=30);
      insert gasset3;
      system.assertNotEquals(null,gasset3.id);
      GoalSIPAmount__c goalsip=new GoalSIPAmount__c(Goal__c=gol.id,SIP_Debt__c=10000,SIP_Equity__c=200000,SIP_Gold__c=3000000,Goal_Year__c=2018);
      upsert goalsip;
      system.assertNotEquals(null,goalsip.id);
       Apexpages.currentPage().getParameters().put('entityId',acc.id);
       ApexPages.currentPage().getParameters().put('goalId',gol.id);    
       /** Eternus Solutions       **/
	   /** Author  : Manasi Ranade **/
	   /** Issue Id: F0057   	   **/
	   /** Date    : 21/06/2011    **/
	   /** Purpose : 1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
	   					exception for totalAmount parameter.
	   				 2. So added querrystring parameter 'totalAmount' below with its value as '1234' for further calculation.
	   /****************************************************/       
       ApexPages.currentPage().getParameters().put('totalAmount','1234');
       goalTestCon=new GoalController();
      // boolean singleYearGoal=goalTestCon.singleYearGoal;
       goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
      //FS0196
      ApexPages.currentPage().getParameters().put('dblEquitySIP','12');
      ApexPages.currentPage().getParameters().put('dblGoldSIP','13');
      ApexPages.currentPage().getParameters().put('dblDebtSIP','14');
      ApexPages.currentPage().getParameters().put('dblTotalSIP','15');
        
       goalOutCon=new GoalOutputController();
       
       goalCompCon=new GoalComponentController();
       goalSummary=new GoalSummaryController();
     }
     
     
     
     public static void testData1(){
       acc=new Account(LastName='ABC',FirstName='PQR',RecordTypeId=RecTypes__c.getInstance ('AccountClient').Record_Type_Value__c); //Prajakta//'01220000000DnK3AAK');
       upsert acc;
       system.assertNotEquals(null,acc);
       // Entity_Global_Assumption__c ega=new Entity_Global_Assumption__c(Account__c=acc.id,Expected_Return_on_Investment__c=30,Income_Growth_Rate__c=3,Inflation_Rate__c=6,Number_Of_Months__c=5);
      // upsert ega;
      // system.assertNotEquals(null,ega.id);
       
       List<Goal_Profile__c> lstGoalProfile = new List<Goal_Profile__c>();
       
       Goal_Profile__c goalProfile1=new Goal_Profile__c(Name='Aggressive',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile1);
       Goal_Profile__c goalProfile3=new Goal_Profile__c(Name='Moderately Aggressive',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile3);
       Goal_Profile__c goalProfile4=new Goal_Profile__c(Name='Moderate',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
		lstGoalProfile.add(goalProfile4);
       Goal_Profile__c goalProfile5=new Goal_Profile__c(Name='Moderately Conservative',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile5);
       Goal_Profile__c goalProfile6=new Goal_Profile__c(Name='Conservative',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile6);
       
       Goal_Profile__c goalProfile2=new Goal_Profile__c(Name='Aggressive',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile2);
       Goal_Profile__c goalProfile7=new Goal_Profile__c(Name='Moderately Aggressive',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile7);
       Goal_Profile__c goalProfile8=new Goal_Profile__c(Name='Moderate',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile8);
       Goal_Profile__c goalProfile9=new Goal_Profile__c(Name='Moderately Conservative',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile9);
       Goal_Profile__c goalProfile10=new Goal_Profile__c(Name='Conservative',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile10);
       
       Database.insert(lstGoalProfile);
       
   /*    Asset__c asset2=new Asset__c(Account_Type__c='EPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=null,End_Year__c=null,Start_Year__c=null,
                              Entity__c=acc.id,action__c='To be grown till maturity but stop saving more',RecordTypeId='01220000000HYzZ');
      insert asset2;
      system.assertNotEquals(null,asset2.id);
     */ 
      List<Asset__c> lstAsset = new List<Asset__c>(); 
      
      Asset__c asset3=new Asset__c(Account_Type__c=null ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Liquidate (Sell)',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset3);
      Asset__c asset4=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Hold',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset4);
      Asset__c asset5=new Asset__c(Account_Type__c=null ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Sell',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset5);
      Asset__c asset6=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Liquidate (Align to goal)',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset6);
      Database.insert(lstAsset);
      
      
      gol=new Goal__c(Entity__c=acc.id, Goal_End_Year__c = '2024',Goal_Start_Year__c='2021',Inflation_Rate__c=6,Saving_type__c='Constant annuity - Progressive Risk Profile',
                                 Cost_of_Goal_Annual__c=5000000,Priority__c='High',Description__c='Marriage',goal_type__c='Retirement',
                                 Goal_Frequency__c=null,SelectedGoalProfile__c=goalProfile1.id
                                 );
      insert gol;
      system.assertNotEquals(null,gol.id);
      
      List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
      
  //    GoalAssetAssociation__c gasset1=new GoalAssetAssociation__c(Asset__c=asset2.id,Goal__c=gol.id,Allocated__c=100);
  //    lstGoalAssetAssociation.add(gasset1);
      GoalAssetAssociation__c gasset2=new GoalAssetAssociation__c(Asset__c=asset3.id,Goal__c=gol.id,Allocated__c=100);
      lstGoalAssetAssociation.add(gasset2);
      GoalAssetAssociation__c gasset3=new GoalAssetAssociation__c(Asset__c=asset4.id,Goal__c=gol.id,Allocated__c=100);
      lstGoalAssetAssociation.add(gasset3);
      GoalAssetAssociation__c gasset4=new GoalAssetAssociation__c(Asset__c=asset5.id,Goal__c=gol.id,Allocated__c=100);
      lstGoalAssetAssociation.add(gasset4);
      GoalAssetAssociation__c gasset5=new GoalAssetAssociation__c(Asset__c=asset6.id,Goal__c=gol.id,Allocated__c=100);
      lstGoalAssetAssociation.add(gasset5);
      Database.insert(lstGoalAssetAssociation);
     
       Apexpages.currentPage().getParameters().put('entityId',acc.id);
       ApexPages.currentPage().getParameters().put('goalId',gol.id);    
       goalTestCon=new GoalController(); 
      // boolean singleYearGoal=goalTestCon.singleYearGoal;
       goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
     }
 
     
public static testMethod void GoalControllerTest(){
    //
    /** Eternus Solutions       **/
	/** Author  : Manasi Ranade **/
	/** Issue Id: FS0129      	**/
	/** Date    : 24/08/2011 	**/
	/** Purpose : Commented startTest from here because it was crossing Governer Limits.
					And added it after goalTestCon.singleYearGoal.
	/****************************************************/
    //Test.startTest();
    testData();
    boolean singleYearGoal=goalTestCon.singleYearGoal;
    Test.startTest();
    goalTestCon.save();
    List<SelectOption> savingTypeList=goalTestCon.savingTypeList;
    test.stopTest();
    goalTestCon.customized();
    goalTestCon.cancel();
    goalTestCon.output();
    goalTestCon.getSipStartYear();
    
   
}
public static testMethod void GoalComponentTest(){
    Test.startTest();
    testData();
    goalCompCon.goalMappingBean=goalTestCon.goalMappingBean;
    boolean singleYearGoal=goalCompCon.singleYearGoal;
    double futureValueActual=goalCompCon.futureValueActual;
    goalCompCon.output();
    
    test.stopTest();
}

public static testMethod void GoalComponentTest1(){
    Test.startTest();
    //testData();
    //BB USer
		Profile prof = [select id  from profile where usertype = 'PowerPartner' limit 1];
        User partnerUser = [select Id from User where profileid =: prof.id and IsActive = true limit 1];
        
   
       acc = new Account(LastName='Test BP',Adjustment_Factor__c='2', OwnerId = partnerUser.Id,
	                       PersonTitle='TestData',PersonBirthdate=system.today(),PersonHomePhone='54623676',PersonMobilePhone='54637',
	                       Alternate_Mobile__c='356475',PersonEmail='sgdh@test.com', Alternate_E_Mail_Address__c='fdgr@test.com',
	                       Retirement_Year__c=2034,Residential_Status_del__c='own',Retirement_Age__c='58',Estimated_Life_Expectancy__c='67',
	                       Estimated_Life_EndYear__c=2041,Relationship_to_Entity__pc='husband', Related_To__c ='Business Partner',
	                       RecordTypeId = RecTypes__c.getInstance('AccountClient').Record_Type_Value__c,Will__c = false);
	    insert acc;
	    acc.Related_To__c = 'Business Partner';
	    update acc;
       Entity_Global_Assumption__c ega=new Entity_Global_Assumption__c(Account__c=acc.id,Expected_Return_on_Investment__c=30,Income_Growth_Rate__c=3,Inflation_Rate__c=6,Number_Of_Months__c=5);
       insert ega;
       
       List<Goal_Profile__c> lstGoalProfile = new List<Goal_Profile__c>();
       Goal_Profile__c goalProfile1=new Goal_Profile__c(Name='Aggressive',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile1);
       //insert goalProfile1;
       //system.assertNotEquals(null,goalProfile1.id);
       
       Goal_Profile__c goalProfile3=new Goal_Profile__c(Name='Moderately Aggressive',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile3);
       Goal_Profile__c goalProfile4=new Goal_Profile__c(Name='Moderate',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile4);
       Goal_Profile__c goalProfile5=new Goal_Profile__c(Name='Moderately Conservative',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile5);
       Goal_Profile__c goalProfile6=new Goal_Profile__c(Name='Conservative',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile6);
       Goal_Profile__c goalProfile2=new Goal_Profile__c(Name='Aggressive',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile2);
       Goal_Profile__c goalProfile7=new Goal_Profile__c(Name='Moderately Aggressive',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile7);
       Goal_Profile__c goalProfile8=new Goal_Profile__c(Name='Moderate',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile8);
       Goal_Profile__c goalProfile9=new Goal_Profile__c(Name='Moderately Conservative',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile9);
       Goal_Profile__c goalProfile10=new Goal_Profile__c(Name='Conservative',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile10);

       Database.insert(lstGoalProfile);
       
      
      List<Asset__c> lstAsset = new List<Asset__c>(); 
      
      Asset__c asset=new Asset__c(Account_Type__c='EPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2018',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity and continue saving',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Retirement Accounts').RecordTypeId__c); //Prajakta//'01220000000HYzZAAW');
      lstAsset.add(asset);
      //insert asset;
      //system.assertNotEquals(null,asset.id);
      
      Asset__c asset1=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity and continue saving',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset1);
      Asset__c asset2=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity but stop saving more',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset2);
      Asset__c asset3=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Liquidate (Sell)',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset3);
      Asset__c asset4=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Hold',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset4);
      Asset__c asset5=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Sell',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset5);
      Database.insert(lstAsset);
      
    //  Investment_Asset__c inv=new   Investment_Asset__c(Entity__c=acc.id,action__c='Liquidate (Allign to Goal)',Units__c=10,Current_Price__c=100000,RecordTypeId='01220000000HYx5AAG' );
   //   insert inv;
   //   system.assertNotEquals(null,inv.id);
     
      gol=new Goal__c(Entity__c=acc.id, Goal_End_Year__c = '2024',Goal_Start_Year__c='2021',Inflation_Rate__c=6,SelectedGoalProfile__c=goalProfile2.id,Saving_type__c='Constant annuity - Progressive Risk Profile',
                                 Cost_of_Goal_Annual__c=5000000,Priority__c='High',Description__c='Marriage',goal_type__c='Marriage',
                                 aggressive_profile_years__c=3,Goal_Frequency__c=null,moderately_aggressive_profile_years__c=2, moderate_profile_years__c=2,
                                 moderately_conservative_profile_years__c=2,conservative_profile_years__c=1);
       insert gol;
       system.assertNotEquals(null,gol.id);
     
     List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
     
     GoalAssetAssociation__c gasset1=new GoalAssetAssociation__c(Asset__c=asset.id,Goal__c=gol.id,Allocated__c=100);
     lstGoalAssetAssociation.add(gasset1);
     GoalAssetAssociation__c gasset2=new GoalAssetAssociation__c(Asset__c=asset1.id,Goal__c=gol.id,Allocated__c=100);
     lstGoalAssetAssociation.add(gasset2);
     Database.insert(lstGoalAssetAssociation);
     
  //   GoalInvestmentAssetAssociation__c ginv=new GoalInvestmentAssetAssociation__c(Investment_Asset__c=inv.id,Goal__c=gol.id,allocated__c=100);
  //   insert ginv;
    // system.assertNotEquals(null,ginv.id);
     
     Insurance__c  insurance=new Insurance__c(Flag__c = 'Analysis',Entity__c=acc.id,action__c ='To be grown till maturity and continue saving',
                                               RecordTypeId=InsuranceRecTypes__c.getInstance ('Life Insurance').RecordTypeId__c //Prajakta//'01220000000Do0vAAC'
                                               ,Tenure_of_Insurance__c=10,Commencement_Date__c=System.today(), Revised_Maturity_Amount__c = 45000,
                                                Next_Premium_Due_Date__c=system.today(),Premium_Amount_Rs__c =10000,Policy_Type__c='Whole Life',
                                                Premium_Frequency__c='Annually');
      insert insurance;
      system.assertNotEquals(null,insurance.id);
      GoalInsuranceAssociation__c gasset3=new GoalInsuranceAssociation__c(Insurance__c=insurance.id,Goal__c=gol.id,Allocated__c=30);
      insert gasset3;
      system.assertNotEquals(null,gasset3.id);
      GoalSIPAmount__c goalsip=new GoalSIPAmount__c(Goal__c=gol.id,SIP_Debt__c=10000,SIP_Equity__c=200000,SIP_Gold__c=3000000,Goal_Year__c=2018);
      upsert goalsip;
      system.assertNotEquals(null,goalsip.id);
       Apexpages.currentPage().getParameters().put('entityId',acc.id);
       ApexPages.currentPage().getParameters().put('goalId',gol.id);    
       /** Eternus Solutions       **/
	   /** Author  : Manasi Ranade **/
	   /** Issue Id: F0057   	   **/
	   /** Date    : 21/06/2011    **/
	   /** Purpose : 1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
	   					exception for totalAmount parameter.
	   				 2. So added querrystring parameter 'totalAmount' below with its value as '1234' for further calculation.
	   /****************************************************/       
       ApexPages.currentPage().getParameters().put('totalAmount','1234');
       goalTestCon=new GoalController();
      // boolean singleYearGoal=goalTestCon.singleYearGoal;
       goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
      //FS0196
      ApexPages.currentPage().getParameters().put('dblEquitySIP','12');
      ApexPages.currentPage().getParameters().put('dblGoldSIP','13');
      ApexPages.currentPage().getParameters().put('dblDebtSIP','14');
      ApexPages.currentPage().getParameters().put('dblTotalSIP','15');
        
       goalOutCon=new GoalOutputController();
       
       goalCompCon=new GoalComponentController();
       goalSummary=new GoalSummaryController();
     
    
    goalCompCon.goalMappingBean=goalTestCon.goalMappingBean;
    boolean singleYearGoal=goalCompCon.singleYearGoal;
    double futureValueActual=goalCompCon.futureValueActual;
    goalCompCon.output();
    
    test.stopTest();
}

public static testMethod void GoalComponentTest2(){
    Test.startTest();
    //testData();
    //BB USer
		RecordType objRT = [Select Id from RecordType where Name = 'General' and SobjectType = 'Account'];
		Account objAccount = new Account(Name='Test',Expected_Return_on_Investment__c=10,Equity__c=10,Gold__c=10,Debt__c=10,
								Income_Growth_Rate__c=10,Inflation_Rate__c=10,Default_Estimated_Life_Expectancy__c='58',Number_Of_Months__c=10,
								Gold_Growth_Rate__c=10,	   /* Prajakta - FP changes - 01-04-2013 */
								Stock_Growth_Rate__c=10,Default_Retirement_Age__c='60', RecordTypeId = objRT.Id,Related_To__c ='Virtual Partner');
	    insert objAccount;
	     objAccount.Related_To__c = 'Virtual Partner';
	    update objAccount;
       acc = new Account(LastName='Test BP',Adjustment_Factor__c='2',Virtual_Partner__c =objAccount.id, 
	                       PersonTitle='TestData',PersonBirthdate=system.today(),PersonHomePhone='54623676',PersonMobilePhone='54637',
	                       Alternate_Mobile__c='356475',PersonEmail='sgdh@test.com', Alternate_E_Mail_Address__c='fdgr@test.com',
	                       Retirement_Year__c=2034,Residential_Status_del__c='own',Retirement_Age__c='58',Estimated_Life_Expectancy__c='67',
	                       Estimated_Life_EndYear__c=2041,Relationship_to_Entity__pc='husband', Related_To__c ='Virtual Partner',
	                       RecordTypeId = RecTypes__c.getInstance('AccountClient').Record_Type_Value__c,Will__c = false);
	    insert acc;
	    acc.Related_To__c = 'Virtual Partner';
	    update acc;
       Entity_Global_Assumption__c ega=new Entity_Global_Assumption__c(Account__c=acc.id,Expected_Return_on_Investment__c=30,Income_Growth_Rate__c=3,Inflation_Rate__c=6,Number_Of_Months__c=5);
       insert ega;
       
       List<Goal_Profile__c> lstGoalProfile = new List<Goal_Profile__c>();
       Goal_Profile__c goalProfile1=new Goal_Profile__c(Name='Aggressive',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile1);
       //insert goalProfile1;
       //system.assertNotEquals(null,goalProfile1.id);
       
       Goal_Profile__c goalProfile3=new Goal_Profile__c(Name='Moderately Aggressive',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile3);
       Goal_Profile__c goalProfile4=new Goal_Profile__c(Name='Moderate',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile4);
       Goal_Profile__c goalProfile5=new Goal_Profile__c(Name='Moderately Conservative',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile5);
       Goal_Profile__c goalProfile6=new Goal_Profile__c(Name='Conservative',Goal_Profile_Type__c='Standard',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile6);
       Goal_Profile__c goalProfile2=new Goal_Profile__c(Name='Aggressive',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile2);
       Goal_Profile__c goalProfile7=new Goal_Profile__c(Name='Moderately Aggressive',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile7);
       Goal_Profile__c goalProfile8=new Goal_Profile__c(Name='Moderate',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile8);
       Goal_Profile__c goalProfile9=new Goal_Profile__c(Name='Moderately Conservative',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile9);
       Goal_Profile__c goalProfile10=new Goal_Profile__c(Name='Conservative',Account__c=acc.id,Goal_Profile_Type__c='Customized',Debt_Allocation__c=23,Equity_Allocation__c=32,Gold_allocation__c=33);
       lstGoalProfile.add(goalProfile10);

       Database.insert(lstGoalProfile);
       
      
      List<Asset__c> lstAsset = new List<Asset__c>(); 
      
      Asset__c asset=new Asset__c(Account_Type__c='EPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2018',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity and continue saving',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Retirement Accounts').RecordTypeId__c); //Prajakta//'01220000000HYzZAAW');
      lstAsset.add(asset);
      //insert asset;
      //system.assertNotEquals(null,asset.id);
      
      Asset__c asset1=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity and continue saving',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset1);
      Asset__c asset2=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='To be grown till maturity but stop saving more',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset2);
      Asset__c asset3=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Liquidate (Sell)',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset3);
      Asset__c asset4=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Hold',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset4);
      Asset__c asset5=new Asset__c(Account_Type__c='PPF' ,Accumulated_Value__c=200000,Annual_Contribution__c=10000,Expected_Growth_Rate__c=5,End_Year__c='2023',Start_Year__c='2011',
                              Entity__c=acc.id,action__c='Sell',
                              RecordTypeId=AssetRecTypes__c.getInstance ('Govt. Saving Schemes').RecordTypeId__c); //Prajakta//'01220000000HYzXAAW');
      lstAsset.add(asset5);
      Database.insert(lstAsset);
      
    //  Investment_Asset__c inv=new   Investment_Asset__c(Entity__c=acc.id,action__c='Liquidate (Allign to Goal)',Units__c=10,Current_Price__c=100000,RecordTypeId='01220000000HYx5AAG' );
   //   insert inv;
   //   system.assertNotEquals(null,inv.id);
     
      gol=new Goal__c(Entity__c=acc.id, Goal_End_Year__c = '2024',Goal_Start_Year__c='2021',Inflation_Rate__c=6,SelectedGoalProfile__c=goalProfile2.id,Saving_type__c='Constant annuity - Progressive Risk Profile',
                                 Cost_of_Goal_Annual__c=5000000,Priority__c='High',Description__c='Marriage',goal_type__c='Marriage',
                                 aggressive_profile_years__c=3,Goal_Frequency__c=null,moderately_aggressive_profile_years__c=2, moderate_profile_years__c=2,
                                 moderately_conservative_profile_years__c=2,conservative_profile_years__c=1);
       insert gol;
       system.assertNotEquals(null,gol.id);
     
    /* List<GoalAssetAssociation__c> lstGoalAssetAssociation = new List<GoalAssetAssociation__c>();
     
     GoalAssetAssociation__c gasset1=new GoalAssetAssociation__c(Asset__c=asset.id,Goal__c=gol.id,Allocated__c=100);
     lstGoalAssetAssociation.add(gasset1);
     GoalAssetAssociation__c gasset2=new GoalAssetAssociation__c(Asset__c=asset1.id,Goal__c=gol.id,Allocated__c=100);
     lstGoalAssetAssociation.add(gasset2);
     Database.insert(lstGoalAssetAssociation);
     */
  //   GoalInvestmentAssetAssociation__c ginv=new GoalInvestmentAssetAssociation__c(Investment_Asset__c=inv.id,Goal__c=gol.id,allocated__c=100);
  //   insert ginv;
    // system.assertNotEquals(null,ginv.id);
     
     Insurance__c  insurance=new Insurance__c(Flag__c = 'Analysis',Entity__c=acc.id,action__c ='To be grown till maturity and continue saving',
                                               RecordTypeId=InsuranceRecTypes__c.getInstance ('Life Insurance').RecordTypeId__c //Prajakta//'01220000000Do0vAAC'
                                               ,Tenure_of_Insurance__c=10,Commencement_Date__c=System.today(),
                                                Next_Premium_Due_Date__c=system.today(),Premium_Amount_Rs__c =10000,Policy_Type__c='Whole Life',
                                                Premium_Frequency__c='Annually');
      insert insurance;
      system.assertNotEquals(null,insurance.id);
   /*   GoalInsuranceAssociation__c gasset3=new GoalInsuranceAssociation__c(Insurance__c=insurance.id,Goal__c=gol.id,Allocated__c=30);
      insert gasset3;
      system.assertNotEquals(null,gasset3.id);*/
      GoalSIPAmount__c goalsip=new GoalSIPAmount__c(Goal__c=gol.id,SIP_Debt__c=10000,SIP_Equity__c=200000,SIP_Gold__c=3000000,Goal_Year__c=2018);
      upsert goalsip;
      system.assertNotEquals(null,goalsip.id);
       Apexpages.currentPage().getParameters().put('entityId',acc.id);
       ApexPages.currentPage().getParameters().put('goalId',gol.id);    
       /** Eternus Solutions       **/
	   /** Author  : Manasi Ranade **/
	   /** Issue Id: F0057   	   **/
	   /** Date    : 21/06/2011    **/
	   /** Purpose : 1. Test class was throwing 'System.NullPointerException: Argument 1 cannot be null ' 
	   					exception for totalAmount parameter.
	   				 2. So added querrystring parameter 'totalAmount' below with its value as '1234' for further calculation.
	   /****************************************************/       
       ApexPages.currentPage().getParameters().put('totalAmount','1234');
       goalTestCon=new GoalController();
      // boolean singleYearGoal=goalTestCon.singleYearGoal;
       goalMappingBean.GoalAssetMappingBean currentGoalAsset=goalTestCon.currentGoalAsset;
      //FS0196
      ApexPages.currentPage().getParameters().put('dblEquitySIP','12');
      ApexPages.currentPage().getParameters().put('dblGoldSIP','13');
      ApexPages.currentPage().getParameters().put('dblDebtSIP','14');
      ApexPages.currentPage().getParameters().put('dblTotalSIP','15');
        
       goalOutCon=new GoalOutputController();
       
       goalCompCon=new GoalComponentController();
       goalSummary=new GoalSummaryController();
     
    
    goalCompCon.goalMappingBean=goalTestCon.goalMappingBean;
    boolean singleYearGoal=goalCompCon.singleYearGoal;
    double futureValueActual=goalCompCon.futureValueActual;
    goalCompCon.output();
    
    test.stopTest();
}

public static testMethod void  goalOutputTest(){
    Test.startTest();
    testData();
    GoalMappingBean goalMappingBean =goalOutCon.goalMappingBean;
      
    double futureValueActual=goalOutCon.futureValueActual;
    
    //boolean singleYearGoal=goalOutCon.singleYearGoal;
    boolean singleYearGoal = false;
    GoalMappingBean golMappingBean=new GoalMappingBean(gol.id,2011,2018,2018,2013);
    //double minValue=goalOutCon.goalMappingBean.minValue;
    double minValue = 10;
    //String chartData=goalOutCon.goalMappingBean.chartData;
    String chartData = '';
    GoalSIPAmount__c currentSIP=golMappingBean.currentSIP;
    List<SelectOption> goalProfileList=golMappingBean.goalProfileList;
    List<List<DataEntrySummaryBean>> getPresentFutureValueList=golMappingBean.getPresentFutureValueList;
    goalOutCon.output();
    test.stopTest();
}

public static testMethod void GoalControllerTest1(){
    Test.startTest();
    testData1();
    Insurance__c  insurance=new Insurance__c(Flag__c = 'Analysis',Entity__c=acc.id,action__c ='To be grown till maturity and continue saving',
                                               RecordTypeId=InsuranceRecTypes__c.getInstance ('Life Insurance').RecordTypeId__c //Prajakta//'01220000000Do0vAAC'
                                               ,Tenure_of_Insurance__c=null,Commencement_Date__c=null,
                                                Next_Premium_Due_Date__c=null,Premium_Amount_Rs__c =10000,Policy_Type__c='Whole Life',
                                                Premium_Frequency__c='Annually');
      insert insurance;
      system.assertNotEquals(null,insurance.id);
      GoalInsuranceAssociation__c gins=new GoalInsuranceAssociation__c(Insurance__c=insurance.id,Goal__c=gol.id,Allocated__c=30);
      insert gins;
      system.assertNotEquals(null,gins.id);
    goalTestCon.save();
    test.stopTest();
}/*
public static testMethod void GoalControllerTest3(){
    Test.startTest();
    testData1();
  Insurance__c  insurance1=new Insurance__c(Flag__c = 'Analysis',Entity__c=acc.id,action__c ='To be grown till maturity and continue saving',
                                               RecordTypeId='01220000000Do0vAAC',Tenure_of_Insurance__c=10,Commencement_Date__c=null,
                                                Next_Premium_Due_Date__c=null,Premium_Amount_Rs__c =10000,Policy_Type__c='Whole Life',
                                                Premium_Frequency__c='Annually');
      insert insurance1;
      system.assertNotEquals(null,insurance1.id);
      GoalInsuranceAssociation__c gins1=new GoalInsuranceAssociation__c(Insurance__c=insurance1.id,Goal__c=gol.id,Allocated__c=30);
      insert gins1;
      system.assertNotEquals(null,gins1.id);

    goalTestCon.save();
    test.stopTest();
}
public static testMethod void GoalControllerTest4(){
    Test.startTest();
    testData1();
  Insurance__c  insurance2=new Insurance__c(Flag__c = 'Analysis',Entity__c=acc.id,action__c ='To be grown till maturity and continue saving',
                                               RecordTypeId='01220000000Do0vAAC',Tenure_of_Insurance__c=10,Commencement_Date__c=system.today(),
                                                Next_Premium_Due_Date__c=null,Premium_Amount_Rs__c =10000,Policy_Type__c='Whole Life',
                                                Premium_Frequency__c='Annually');
      insert insurance2;
      system.assertNotEquals(null,insurance2.id);
      GoalInsuranceAssociation__c gins2=new GoalInsuranceAssociation__c(Insurance__c=insurance2.id,Goal__c=gol.id,Allocated__c=30);
      insert gins2;
      system.assertNotEquals(null,gins2.id);
    goalTestCon.save();
    test.stopTest();
}
*/
//Commented by Persistent
/*public static testMethod void GoaloutputControllerTest(){
    Test.startTest();
    testData();
    boolean singleYearGoal=goalTestCon.singleYearGoal;
    GoalMappingBean goalMappingBean =goalOutCon.goalMappingBean;
    double futureValueActual=goalOutCon.futureValueActual;
    goalOutCon.output();
     test.stopTest();
}
public static testMethod void GoalControllerTest1(){
    Test.startTest();
    testData1();
    boolean singleYearGoal=goalTestCon.singleYearGoal;
    goalTestCon.save();
    goalTestCon.customized();
    goalTestCon.cancel();
    goalTestCon.output();
    test.stopTest();
}
public static testMethod void GoalControllerTest2(){
    Test.startTest();
    testData2();
    boolean singleYearGoal=goalTestCon.singleYearGoal;
    goalTestCon.save();
    goalTestCon.customized();
    goalTestCon.cancel();
    goalTestCon.output();
   
    test.stopTest();
}*/
  }>>>>>>> .r13960
